<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git 和 Github的使用</title>
      <link href="/2023/10/01/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%8C%96/Git/"/>
      <url>/2023/10/01/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%8C%96/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-和-Github的使用"><a href="#Git-和-Github的使用" class="headerlink" title="Git 和 Github的使用"></a>Git 和 Github的使用</h1><p>可以参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰Git</a><br>提示:下面有的命令用()来包裹的，应该为&lt;&gt;</p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">版本控制工具，进行备份</span><br><span class="line">用来记录文件的变化，用于版本更新，并且记录以前的版本。</span><br><span class="line">git是分布式版本控制系统</span><br></pre></td></tr></table></figure><p><img src="/image/img.png" alt="img.png"></p><h2 id="Git的基本概念"><a href="#Git的基本概念" class="headerlink" title="Git的基本概念"></a>Git的基本概念</h2><h3 id="三个仓库"><a href="#三个仓库" class="headerlink" title="三个仓库"></a>三个仓库</h3><ol><li>工作区(就是编写代码的地方)</li><li>暂存区(把已经完成的文件放进这里)</li><li>Git仓库(当这个文件全部完成之后，放进Git仓库进行管理)</li></ol><h3 id="一些状态"><a href="#一些状态" class="headerlink" title="一些状态"></a>一些状态</h3><p><strong>U:未跟踪,M:已修改,S:已暂存,A:新添加,’’:未修改</strong></p><h4 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h4><p>基本的 Git 工作流程如下：</p><ol><li>在工作区中修改文件</li><li>将你想要下次提交的更改进行暂存</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</li></ol><h2 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h2><p>首先先下载，安装</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="/image/GitConfig.png" alt="img.png"></p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p><img src="/image/Commond01.png" alt="img.png"><br><img src="/image/Commond2.png" alt="img.png"></p><h4 id="修改和回退历史"><a href="#修改和回退历史" class="headerlink" title="修改和回退历史"></a>修改和回退历史</h4><p>版本回退<br><img src="/image/reset.png" alt="img.png"></p><ol><li>未add但修改了(在工作区)</li><li>add了，但未commit</li><li>add和commit了<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git restore (file)</li></ol><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>结果：工作区文件回退。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git restore –staged (file)，就回到了场景1，第二步按场景1操作。</p><p>结果：暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。</p><p>场景3： 假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？<br>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset –hard (id)</p><p>结果：工作区文件、暂存区文件、本地仓库都回退</p><p><strong>我的推荐是：尽量不要直接commit</strong></p><p>修改的时候，不要直接进行commit，要先add例子：<br><code>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git add -&gt; git commit</code></p><p>可以将两次的文件进行合并，最后进行提交</p><p><code>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit</code></p><p>这种只会提交第一次的</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>先手动删除文件，然后使用git add (file) 和git rm(file)效果是一样的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当你误删的话只能回退以前的版本，来进行恢复</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><img src="/image/branch1.png" alt="img.png"><br>上面有分支的指令（知道：增，删，合并，切换分支就可以了）</p><p>注意：合并主分支的时候要在主分支进行合并</p><h3 id="推送失败"><a href="#推送失败" class="headerlink" title="推送失败"></a>推送失败</h3><ol><li><code>git pull</code>，再推送</li><li>如果<code>git pull</code>，再推送失败，按照报错的操作进行推送</li></ol><h3 id="分支合并遇到冲突"><a href="#分支合并遇到冲突" class="headerlink" title="分支合并遇到冲突"></a>分支合并遇到冲突</h3><p>手动解决冲突，再进行合并<br><img src="/image/confict.png" alt="img.png"></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
