<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React</title>
      <link href="/2023/10/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/01react/"/>
      <url>/2023/10/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/01react/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="开发需要的依赖包"><a href="#开发需要的依赖包" class="headerlink" title="开发需要的依赖包"></a>开发需要的依赖包</h3><ol><li>react:包含react所包含的核心代码</li><li>react-dom:react渲染在不同的平所需要的核心代码</li><li>babel:将jsx –&gt; React</li></ol><h3 id="Hello-React案例"><a href="#Hello-React案例" class="headerlink" title="Hello React案例"></a>Hello React案例</h3><p>基本代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加这个type类型:text/babel,为了能将jsx语法转化为react代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> message = <span class="string">&#x27;Hello World&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.创建一个根元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">changeValue</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//修改数据</span></span></span><br><span class="line"><span class="language-javascript">        message = <span class="string">&#x27;Hello React&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//更新数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">rerender</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">rerender</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.渲染根元素（根组件）</span></span></span><br><span class="line"><span class="language-javascript">        root.<span class="title function_">render</span>((</span></span><br><span class="line"><span class="language-javascript">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeValue&#125;</span>&gt;</span>点击我切换数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        ))</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">rerender</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>组件的开发</p><ol><li>定义一个类（类名大写，组件的名称是必须大写的，小写会被认为是HTML元素），继承自React.Component</li><li>实现当前组件的render函数<br>✓ render当中返回的jsx内容，就是之后React会帮助我们渲染的内容</li><li>依赖的数据放在类里面的构造函数里的state里面<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="string">&#x27;Hello React&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>一般在es6的环境下是严格模式，当使用text&#x2F;babel也为严格模式</li></ol><p>事件的处理（一个根本问题：this问题）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class App extends React.Component&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      message:&#x27;Hello React&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    //提前给需要this的方法绑定this</span><br><span class="line">    // this.changeContent = this.changeContent.bind(this)</span><br><span class="line">  &#125;</span><br><span class="line">  //方法</span><br><span class="line">  changeContent()&#123;</span><br><span class="line">    //这个函数里面进行了两步操作</span><br><span class="line">    //1.将state里面的message进行了改变2.自动进行了渲染</span><br><span class="line"></span><br><span class="line">    //this问题很重要</span><br><span class="line">    //这个this问题，这个相当于const changeContent = this.changeContent,changeContent()所以this为window/undefined</span><br><span class="line">    //所以要显示地绑定App的this const changeContent = this.changeContent.bind(this)</span><br><span class="line">    console.log(this)</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      message: &#x27;Hello World&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    // this.render()</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeContent.bind(this)&#125;</span>&gt;</span>点击我修改文本<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h3><blockquote><p> JSX是一种JavaScript的语法扩展（eXtension），也在很多地方称之为JavaScript XML，因为看起就是一段XML语法；<br> 它用于描述我们的UI界面，并且其完成可以和JavaScript融合在一起使用；</p></blockquote><p>Jsx语法是可以赋值给变量的，总之非常灵活</p><p>就是html标签可以给一个变量赋值，在js中使用<br>但要在script中加上 <code>type=&quot;text/babel&quot;</code>，才能解析语法:进行语法的转换</p><h4 id="jsx的使用"><a href="#jsx的使用" class="headerlink" title="jsx的使用"></a>jsx的使用</h4><h5 id="jsx的书写规范"><a href="#jsx的书写规范" class="headerlink" title="jsx的书写规范"></a>jsx的书写规范</h5><p> 书写规范 </p><ol><li>jsx结构中只能有一个根元素</li><li>jsx结构通常会包裹一个(), 将整个jsx当做一个整体, 实现换行</li><li>jsx可以是单标签, 也可以双标签, 但是单标签必须以&#x2F;&gt;结尾</li></ol><h5 id="jsx的注释"><a href="#jsx的注释" class="headerlink" title="jsx的注释"></a>jsx的注释</h5><p>{ &#x2F;* JSX的注释写法 *&#x2F; }</p><h5 id="jsx嵌入变量作为子元素"><a href="#jsx嵌入变量作为子元素" class="headerlink" title="jsx嵌入变量作为子元素"></a>jsx嵌入变量作为子元素</h5><ol><li>变量为Number,String,Array</li><li>变量为null,undefined,Boolean,显示内容为空</li></ol><p>✓ 如果希望可以显示null、undefined、Boolean，那么需要转成字符串；<br>✓ 转换的方式有很多，比如toString方法、和空字符串拼接，String(变量)等方式；<br>3. Object对象类型不能作为子元素</p><h5 id="jsx嵌入表达式"><a href="#jsx嵌入表达式" class="headerlink" title="jsx嵌入表达式"></a>jsx嵌入表达式</h5><ol><li>运算表达式</li><li>三元运算符</li><li>执行一个函数</li></ol><h5 id="jsx使用"><a href="#jsx使用" class="headerlink" title="jsx使用"></a>jsx使用</h5><h5 id="jsx绑定属性-例如：title属性"><a href="#jsx绑定属性-例如：title属性" class="headerlink" title="jsx绑定属性(例如：title属性)"></a>jsx绑定属性(例如：title属性)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;哈哈哈&#x27;</span>,</span><br><span class="line">        <span class="attr">imgUrl</span>:<span class="string">&#x27;https://ts1.cn.mm.bing.net/th/id/R-C.95bc299c3f1f0e69b9eb1d0772b14a98?rik=W5QLhXiERW4nLQ&amp;riu=http%3a%2f%2f20178405.s21i.faiusr.com%2f2%2fABUIABACGAAgoeLO-wUo4I3o2gEw8Qs4uAg.jpg&amp;ehk=N7Bxe9nqM08w4evC2kK6yyC%2bxIWTjdd6HgXsQYPbMj0%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&#x27;</span>,</span><br><span class="line">        <span class="attr">href</span>:<span class="string">&#x27;https:baidu.com&#x27;</span>,</span><br><span class="line">        <span class="attr">isActive</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">objStyle</span>:&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,<span class="attr">fontSize</span>:<span class="string">&#x27;30px&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;title,imgUrl,href,isActive,objStyle&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">      <span class="comment">//1.class绑定写法一:字符串的拼接</span></span><br><span class="line">      <span class="keyword">const</span> className = <span class="string">`abc cba <span class="subst">$&#123;isActive?<span class="string">&#x27;active&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span>`</span></span><br><span class="line">      <span class="comment">//2. class绑定的写法二:将所有的class放入数组中</span></span><br><span class="line">      <span class="keyword">const</span> classList = [<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;bcd&#x27;</span>]</span><br><span class="line">      <span class="keyword">if</span>(isActive)classList.<span class="title function_">push</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">        <span class="comment">// 3.class绑定的写法三: 第三方库classnames -&gt; npm install classnames</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*1.基础属性的绑定*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;imgUrl&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*2.绑定class属性最好使用className*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;classList.join(</span>&#x27; &#x27;)&#125;&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;/*3.绑定style属性：绑定对象类型*/&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;,<span class="attr">fontSize:</span>&#x27;<span class="attr">30px</span>&#x27;&#125;&#125;&gt;</span>你好呀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;objStyle&#125;</span>&gt;</span>你好呀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line">  root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>)</span><br></pre></td></tr></table></figure><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><h4 id="react事件绑定-推荐传入箭头函数"><a href="#react事件绑定-推荐传入箭头函数" class="headerlink" title="react事件绑定(推荐传入箭头函数)"></a>react事件绑定(推荐传入箭头函数)</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*1.bind绑定*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btn1Click.bind(this)&#125;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*2.this绑定第二种:es6的class file*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btn2Click&#125;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*3.传入一个箭头函数,这个重要*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.btn3Click()&#125;&gt;按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数:&#123;this.state.counter&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="事件参数传递"><a href="#事件参数传递" class="headerlink" title="事件参数传递"></a>事件参数传递</h4><ol><li>获取event参数</li><li>获取更多参数<br>有更多参数时，我们最好的方式就是传入一个箭头函数，主动执行的事件函数，并且传入相关的其他参数；<img src="/img.png" alt="img.png"></li></ol><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>◼ 常见的条件渲染的方式有哪些呢？</p><ol><li>◼ 方式一：条件判断语句<br> 适合逻辑较多的情况</li><li>◼ 方式二：三元运算符<br> 适合逻辑比较简单</li><li>◼ 方式三：与运算符&amp;&amp;<br> 适合如果条件成立，渲染某一个组件；如果条件不成立，什么内容也不渲染<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">super</span>();</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">       <span class="attr">isReady</span>:<span class="literal">false</span>,</span><br><span class="line">       <span class="attr">friend</span>:<span class="literal">undefined</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123;isReady,friend&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">     <span class="keyword">let</span> showElement = <span class="literal">null</span></span><br><span class="line">     <span class="keyword">if</span>(isReady)&#123;</span><br><span class="line">       showElement = <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好呀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       showElement = <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>再见<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">             <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               /*if渲染*/</span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;showElement&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               &#123;/*三元运算符*/&#125;</span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;isReady?<span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好呀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>:<span class="tag">&lt;<span class="name">h2</span>&gt;</span>再见<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               &#123;/*逻辑&amp;&amp;*/&#125;</span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;friend &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;friend.name + &quot; &quot; + friend.desc&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="脚手架开发"><a href="#脚手架开发" class="headerlink" title="脚手架开发"></a>脚手架开发</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>一、第一种方式</p><ol><li>先全局安装脚手架工具包</li></ol><p>命令：pnpm i -g create-react-app</p><ol start="2"><li>用脚手架工具来创建项目</li></ol><p>命令：create-react-app + 项目名称</p><p>二、第二种方式<br>创建方式2<br>直接使用npx来创建项目</p><p>命令：</p><p>npx create-react-app + 项目名称</p><p>解释：</p><p>npx create-react-app 是固定命令，create-react-app 是 React 脚手架的名称</p><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><p><img src="/img_3.png" alt="img_3.png"></p><h5 id="脚手架的webpack"><a href="#脚手架的webpack" class="headerlink" title="脚手架的webpack"></a>脚手架的webpack</h5><p>![img_4.png](img_4.</p><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><p>如何展示列表呢？<br> 在React中，展示列表最多的方式就是使用数组的map高阶函数；</p><p>◼ 很多时候我们在展示一个数组中的数据之前，需要先对它进行一些处理：</p><p> 比如过滤掉一些内容：filter函数<br> 比如截取数组中的一部分内容：slice函数</p><h4 id="脚手架-1"><a href="#脚手架-1" class="headerlink" title="脚手架"></a>脚手架</h4><p><img src="/img_1.png" alt="img_1.png"><br>前端脚手架<br><img src="/img_2.png" alt="img_2.png"><br>使用前端脚手架创建项目</p><h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><blockquote><p>概念和vue一样<br>组件的分类:函数组件，类组件。无状态组件，有状态组件。展示性组件，容器性组件</p></blockquote><p>类组件的要求（怎么定义前面写了）</p><blockquote><ol><li>名称大写字符开头</li><li>继承React.Component</li><li>实现render函数</li></ol></blockquote><p>函数组件<br><img src="/img_7.png" alt="img_7.png"></p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>最常用的<br><img src="/img_8.png" alt="img_8.png"></p><p><code>Constructor</code><br>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。<br>constructor中通常只做两件事情：</p><ol><li>通过给this.state赋值对象来初始化内部的state；</li><li>为事件绑定实例（this）；</li></ol><p><code>componentDidMount</code><br>componentDidMount()会在组件挂载后（插入 DOM 树中）立即调用。<br>componentDidMount中通常进行哪里操作呢？<br>依赖于DOM的操作可以在这里进行；</p><ol><li>在此处发送网络请求就最好的地方；（官方建议）</li><li>可以在此处添加一些订阅（会在componentWillUnmount取消订阅）；</li></ol><p><code>componentDidUpdate</code><br>componentDidUpdate()会在<code>更新后会被立即调用</code>，首次渲染不会执行此方法。<br>当组件更新后，可以在此处对 DOM 进行操作；</p><ol><li>如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）。</li></ol><p><code>componentWillUnmount</code><br>componentWillUnmount()会在组件卸载及销毁之前直接调用。<br>在此方法中执行必要的清理操作；</p><ol><li>例如，清除 timer，取消网络请求或清除在componentDidMount() 中创建的订阅等；</li></ol><p>不常用的插槽<br><img src="/img_9.png" alt="img_9.png"></p><h4 id="组件之间的通信"><a href="#组件之间的通信" class="headerlink" title="组件之间的通信"></a>组件之间的通信</h4><h5 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line">function App() &#123;</span><br><span class="line">   return (</span><br><span class="line">           &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">           &lt;Header title=&quot;我是头部呀&quot; age=&#123;18&#125; height=&#123;1.8&#125;&gt;&lt;/Header&gt;</span><br><span class="line">           &lt;Main&gt;&lt;/Main&gt;</span><br><span class="line">           &lt;Footer&gt;&lt;/Footer&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span> = props;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;title, age, height&#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">h2</span>&gt;</span>展示父组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;&#123;age&#125;&#123;height&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传递来的参数默认值</span></span><br><span class="line"><span class="title class_">Header</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">   <span class="attr">title</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">19</span>,</span><br><span class="line">   <span class="attr">height</span>:<span class="number">1.9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span>;</span><br></pre></td></tr></table></figure><p>类型验证（ts&#x2F;prop-types）’</p><p>需要的时候查文档<br><a href="https://zh-hans.reactjs.org/docs/typechecking-with-proptypes.html">https://zh-hans.reactjs.org/docs/typechecking-with-proptypes.html</a></p><p>当没有传递的时候希望有默认值的时候:defaultProps</p><h5 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h5><p>在React中同样是通过props传递消息，只是让父组件给子组件传递一个回调函数，在子组件中调用这个函数即可；</p><p>父亲给儿子传递一个函数，儿子进行调用就可以了</p><p>计时器的案例(自己去看源码)</p><h5 id="组件通信案例（tab栏切换）"><a href="#组件通信案例（tab栏切换）" class="headerlink" title="组件通信案例（tab栏切换）"></a>组件通信案例（tab栏切换）</h5><p>自行查看</p><h5 id="React中的插槽"><a href="#React中的插槽" class="headerlink" title="React中的插槽"></a>React中的插槽</h5><ol><li>组件的children元素</li><li>props属性传递React元素</li></ol><h6 id="组件的children"><a href="#组件的children" class="headerlink" title="组件的children"></a>组件的children</h6><p>每个组件都可以获取到props.children:包含组件的开始标签和结束标签</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Nav</span> <span class="keyword">from</span> <span class="string">&quot;./nav&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nav</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;children&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;nav-bar&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children[0]&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children[1]&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;right&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children[2]&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Nav</span>;</span><br></pre></td></tr></table></figure><h6 id="props来实现"><a href="#props来实现" class="headerlink" title="props来实现"></a>props来实现</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./NavBar.css&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NavBar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;left,center,right&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;nav-bar&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span>&#123;left&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span>&#123;center&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;right&#x27;</span>&gt;</span>&#123;right&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NavBar</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NavBar</span> <span class="keyword">from</span> <span class="string">&quot;./NavBar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> left = <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">const</span> center = <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">const</span> right =  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">NavBar</span> <span class="attr">left</span>=<span class="string">&#123;left&#125;</span> <span class="attr">center</span>=<span class="string">&#123;center&#125;</span> <span class="attr">right</span>=<span class="string">&#123;right&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App2</span>;</span><br></pre></td></tr></table></figure><h5 id="非父子间的通信"><a href="#非父子间的通信" class="headerlink" title="非父子间的通信"></a>非父子间的通信</h5><h6 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h6><blockquote><p>数据共享</p></blockquote><p>相关API</p><ol><li>React.createContext<br>创建一个需要共享的Context对象</li><li>Context.Provider<ol><li>每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化：</li><li>Provider 接收一个value属性，传递给消费组件；</li><li>一个 Provider 可以和多个消费组件有对应关系；</li><li>多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据；</li><li>当 Provider 的value值发生变化时，它内部的所有消费组件都会重新渲染；</li></ol></li><li>Context.Consumer<br>这里需要 函数作为子元素（function as child）这种做法；</li><li>Class.contextType<br>MyClass.contextType &#x3D; MyContext</li></ol><p>使用步骤</p><ol><li>创建上下文（Context）对象<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//设置上下文，创建Context对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ThemeContext</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//设置上下文，创建Context对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserContext</span></span><br></pre></td></tr></table></figure></li><li>第二步操作: 通过ThemeContext中Provider中value属性为后代提供数据，Context.Provider<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./Home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeBanner</span> <span class="keyword">from</span> <span class="string">&quot;./HomeBanner&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&quot;./Profile&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/user-context&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ThemeContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/theme-context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">info</span>:&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">99</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;info&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">UserContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;nickname:</span>&#x27;<span class="attr">kobe</span>&#x27;,<span class="attr">age:19</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;,<span class="attr">size:</span>&#x27;<span class="attr">30</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Home</span> &#123;<span class="attr">...info</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">Home</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">UserContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Profile</span>&gt;</span><span class="tag">&lt;/<span class="name">Profile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App2</span>;</span><br></pre></td></tr></table></figure></li><li>第三步操作: 设置组件的contextType为某一个Context<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/user-context&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ThemeContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/theme-context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeInfo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">//第四步：获取数据，使用数据(这个是类组件中的写法)</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">UserContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        value =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                            return <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Info User:&#123;value.nickname&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#125;</span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">UserContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">HomeInfo</span>.<span class="property">contextType</span> = <span class="title class_">ThemeContext</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HomeInfo</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">函数组件的操作</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ThemeContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/theme-context&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HomeBanner</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/*函数式组件使用Context共享数据*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    value =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Banner theme:&#123;value.color&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HomeBanner</span>;</span><br></pre></td></tr></table></figure></li><li>第四步操作: 获取数据, 并且使用数据</li></ol><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><p>渲染机制</p><p>Jsx -&gt; 虚拟Dom -&gt; 真实Dom</p><p>react的更新机制</p><p>props&#x2F;state改变 -&gt; render函数重新执行 -&gt; 产生新的DOM树 -&gt; 新旧DOM树进行diff -&gt; 计算出差异进行更新 -&gt; 更新到真实DOM</p><h5 id="keys优化"><a href="#keys优化" class="headerlink" title="keys优化"></a>keys优化</h5><p>遍历列表，需要加上key</p><p>注意:</p><ol><li>key是唯一的</li><li>不要用随机数</li><li>使用index，不会做优化</li></ol><h5 id="render函数优化"><a href="#render函数优化" class="headerlink" title="render函数优化"></a>render函数优化</h5><p>当更改一个数据，组件就需要render，进行diff算法，性能会很低，所以有了解决方法</p><p>shouldComponentUpdate,接收两个参数:nextProps(修改后的props),nextState(修改后的state),它的<br>主要作用是判断props和state数据是否发生改变，来决定true还是false</p><p>返回true，就会render，返回false，不会render</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">counter</span> !== nextProps.<span class="property">counter</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h4><p>如果要是手动的实现上面的行为，会很繁琐，react已经配置好了，再PureComponent,就是在里面弄就可以了（rpc）</p><h4 id="高阶组件memo"><a href="#高阶组件memo" class="headerlink" title="高阶组件memo"></a>高阶组件memo</h4><p>类可以通过PureComponent来实现，函数组件可以用memo来实现，在想要实现上述的效果的函数组件外面包一层memo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; memo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Profile</span> = <span class="title function_">memo</span>(<span class="keyword">function</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;profile render&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Profile: &#123;props.message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Profile</span></span><br></pre></td></tr></table></figure><h4 id="不可变的数据"><a href="#不可变的数据" class="headerlink" title="不可变的数据"></a>不可变的数据</h4><p>就是说不能直接改变this.setState里面的数据，可以进行拷贝（浅拷贝）</p><h4 id="获取DOM方式refs"><a href="#获取DOM方式refs" class="headerlink" title="获取DOM方式refs"></a>获取DOM方式refs</h4><blockquote><p>通常不需要和不建议直接操作DOM原生</p></blockquote><h3 id="原理类的"><a href="#原理类的" class="headerlink" title="原理类的"></a>原理类的</h3><h4 id="为什么使用setState"><a href="#为什么使用setState" class="headerlink" title="为什么使用setState"></a>为什么使用setState</h4><h4 id="vue3和react中在数据上的区别"><a href="#vue3和react中在数据上的区别" class="headerlink" title="vue3和react中在数据上的区别"></a>vue3和react中在数据上的区别</h4><ol><li>vue3是数据劫持,通过对数据进行劫持来监听数据的变化</li><li>React中没有数据劫持,必须通过setState来告知React数据已经发生了变化；</li></ol><h4 id="React的setState是异步更新的优点"><a href="#React的setState是异步更新的优点" class="headerlink" title="React的setState是异步更新的优点"></a>React的setState是异步更新的优点</h4><p>setState设计为异步，可以显著的提升性能；</p><ol><li>如果每次调用 setState都进行一次更新，那么意味着render函数会被频繁调用，界面重新渲染，这样效率是很低的；</li></ol><p>最好的办法应该是获取到多个更新，之后进行批量更新；<br>2. 如果同步更新了state，但是还没有执行render函数，那么state和props不能保持同步；<br>state和props不能保持一致性，会在开发中产生很多的问题；</p><h4 id="setState的使用"><a href="#setState的使用" class="headerlink" title="setState的使用"></a>setState的使用</h4><p>setState接受两个参数：第二个参数是一个回调函数，这个回调函数会在更新后会执行；<br>格式如下：setState(partialState, callback)</p><h4 id="setState咋18前和后区别"><a href="#setState咋18前和后区别" class="headerlink" title="setState咋18前和后区别"></a>setState咋18前和后区别</h4><ol><li><p>前</p><p>其实分成两种情况：</p><ol><li>在组件生命周期或React合成事件中，setState是异步；</li><li>在setTimeout或者原生dom事件中，setState是同步；</li></ol></li><li><p>后</p></li></ol><p>所有的都为异步的</p><h3 id="在react中写css的方案"><a href="#在react中写css的方案" class="headerlink" title="在react中写css的方案"></a>在react中写css的方案</h3><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><ol><li>style 接受一个采用小驼峰命名属性的 JavaScript 对象，，而不是 CSS 字符串；</li><li>并且可以引用state中的状态来设置相关的样式；</li></ol><p>缺点</p><ol><li>写法上都需要使用驼峰标识</li><li>某些样式没有提示</li><li>大量的样式, 代码混乱</li><li>某些样式无法编写(比如伪类&#x2F;伪元素)<figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>, <span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Index</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            titleSize :<span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addTitleSize</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">titleSize</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">titleSize</span> +<span class="number">2</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>this.addTitleSize()&#125;&gt;点击我增加字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:</span>`$&#123;<span class="attr">this.state.titleSize</span>&#125;<span class="attr">px</span>`,<span class="attr">color:</span>&quot;<span class="attr">red</span>&quot;&#125;&#125;&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Index</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="单独的css文件引入"><a href="#单独的css文件引入" class="headerlink" title="单独的css文件引入"></a>单独的css文件引入</h4><p>和以前写css一样</p><p>缺点：</p><ol><li>这个css文件没有作用域，是全局生效的</li><li>样式之间会重叠</li></ol><h4 id="CSS-Module写法"><a href="#CSS-Module写法" class="headerlink" title="CSS Module写法"></a>CSS Module写法</h4><blockquote><p>css modules并不是React特有的解决方案，而是所有使用了类似于webpack配置的环境下都可以使用的。<br> 如果在其他项目中使用它，那么我们需要自己来进行配置，比如配置webpack.config.js中的modules: true等。</p></blockquote><p>好处解决了局部作用域问题</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">index<span class="selector-class">.module</span><span class="selector-class">.css</span></span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">使用</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Index</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;home.title&#125;</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#123;home.content&#125;</span>&gt;</span>哈哈，我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Index</span>;</span><br></pre></td></tr></table></figure><h4 id="CSS-in-JS-写法"><a href="#CSS-in-JS-写法" class="headerlink" title="CSS in JS 写法"></a>CSS in JS 写法</h4><h5 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个相当于调用了foo函数，返回的是一个数组 ：[ [ &#x27;my name is &#x27;, &#x27;,age is &#x27;, &#x27;&#x27; ], &#x27;ymj&#x27;, 18 ]</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;ymj&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">...arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>,age is <span class="subst">$&#123;age&#125;</span>`</span></span><br></pre></td></tr></table></figure><h5 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">css_jsx</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 基本的使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HomeWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  .top&#123;</span></span><br><span class="line"><span class="string">    .banner&#123;</span></span><br><span class="line"><span class="string">      font-size: 22px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .bottom&#123;</span></span><br><span class="line"><span class="string">    .product_list&#123;</span></span><br><span class="line"><span class="string">      .product_item1&#123;</span></span><br><span class="line"><span class="string">        color: red;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      .product_item2&#123;</span></span><br><span class="line"><span class="string">        color: pink;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      .product_item3&#123;</span></span><br><span class="line"><span class="string">        color: #61dafb;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HomeWrapper</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./homs_css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">HomeWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        我是轮播图</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;product_list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item1&quot;</span>&gt;</span>商品1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item2&quot;</span>&gt;</span>商品2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item3&quot;</span>&gt;</span>商品3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">HomeWrapper</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure><p>还可以进行拆分(子元素单独抽取到一个样式文件里面)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 基本的使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HomeWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  .top&#123;</span></span><br><span class="line"><span class="string">    .banner&#123;</span></span><br><span class="line"><span class="string">      font-size: 22px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">BottomWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    .product_list&#123;</span></span><br><span class="line"><span class="string">      .product_item1&#123;</span></span><br><span class="line"><span class="string">        color: red;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      .product_item2&#123;</span></span><br><span class="line"><span class="string">        color: pink;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      .product_item3&#123;</span></span><br><span class="line"><span class="string">        color: #61dafb;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h5 id="在css中使用js-props的使用"><a href="#在css中使用js-props的使用" class="headerlink" title="在css中使用js(props的使用)"></a>在css中使用js(props的使用)</h5><h6 id="使用props"><a href="#使用props" class="headerlink" title="使用props"></a>使用props</h6><p>非常方便，别的方案会很麻烦<br>外部的组件给样式组件传入值，来进行在css中使用js的变量，使用函数的形式实现</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 基本的使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HomeWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  .top&#123;</span></span><br><span class="line"><span class="string">    .banner&#123;</span></span><br><span class="line"><span class="string">      font-size: <span class="subst">$&#123;props=&gt;props.size&#125;</span>px;</span></span><br><span class="line"><span class="string">      color:<span class="subst">$&#123;props=&gt;props.color&#125;</span>;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BottomWrapper</span>, <span class="title class_">HomeWrapper</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./homs_css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">size</span>:<span class="number">30</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&quot;yellow&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;color,size&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">HomeWrapper</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;</span> <span class="attr">size</span>=<span class="string">&#123;size&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        我是轮播图</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">BottomWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;product_list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item1&quot;</span>&gt;</span>商品1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item2&quot;</span>&gt;</span>商品2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item3&quot;</span>&gt;</span>商品3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">BottomWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">HomeWrapper</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure><h6 id="使用attrs给标签字符串提供属性"><a href="#使用attrs给标签字符串提供属性" class="headerlink" title="使用attrs给标签字符串提供属性"></a>使用attrs给标签字符串提供属性</h6><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 基本的使用</span></span><br><span class="line"><span class="comment">//如果没有传递元素的话，可以添加默认值</span></span><br><span class="line"><span class="comment">// 使用styled.div.attrs来实现</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HomeWrapper</span> = styled.<span class="property">div</span>.<span class="title function_">attrs</span>(<span class="function"><span class="params">props</span>=&gt;</span>(&#123;</span><br><span class="line">    <span class="attr">tcolor</span>:props.<span class="property">color</span>||<span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;))<span class="string">`</span></span><br><span class="line"><span class="string">  .top&#123;</span></span><br><span class="line"><span class="string">    .banner&#123;</span></span><br><span class="line"><span class="string">      font-size: <span class="subst">$&#123;props=&gt;props.size&#125;</span>px;</span></span><br><span class="line"><span class="string">      color:<span class="subst">$&#123;props=&gt;props.tcolor&#125;</span>;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h5 id="设置全局的样式"><a href="#设置全局的样式" class="headerlink" title="设置全局的样式"></a>设置全局的样式</h5><p>将全局的样式放在一个文件里面，需要什么的时候引入即可</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//variables.js文件中，当使用公共主题色的时候引入即可</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> primaryColor = <span class="string">&quot;#ff8822&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> secondColor = <span class="string">&quot;#ff7788&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> smallSize = <span class="string">&quot;12px&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> middleSize = <span class="string">&quot;14px&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> largeSize = <span class="string">&quot;18px&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以使用主题提供</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ThemeProvider theme=&#123;&#123;color:&quot;red&quot;,size:&quot;19px&quot;&#125;&#125;&gt;&lt;/ThemeProvider&gt;</span><br></pre></td></tr></table></figure><h5 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h5><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//样式的继承</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HYButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  padding: 8px 30px;</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HYWarnButton</span> = styled.<span class="title function_">button</span>(<span class="title class_">HYButton</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  background-color:red ;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h4 id="动态添加class"><a href="#动态添加class" class="headerlink" title="动态添加class"></a>动态添加class</h4><p>安装一个库 classnames<br><img src="/img_10.png" alt="img_10.png"></p><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><h3 id="js的纯函数"><a href="#js的纯函数" class="headerlink" title="js的纯函数"></a>js的纯函数</h3><blockquote><p> 确定的输入，一定会产生确定的输出；<br> 函数在执行过程中，不能产生副作用；</p></blockquote><p>副作用：调用了这个函数，对外部产生了一些影响（1.依赖外部的变量，修改外部的变量，修改参数或者改变外部的存储）</p><p>React中就要求我们无论是函数还是class声明一个组件，这个组件都必须像纯函数一样，<code>保护它们的props不被修改</code></p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><p>action</p>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 和 Github的使用</title>
      <link href="/2023/10/01/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%8C%96/Git/"/>
      <url>/2023/10/01/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%8C%96/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-和-Github的使用"><a href="#Git-和-Github的使用" class="headerlink" title="Git 和 Github的使用"></a>Git 和 Github的使用</h1><p>可以参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰Git</a><br>提示:下面有的命令用()来包裹的，应该为&lt;&gt;</p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">版本控制工具，进行备份</span><br><span class="line">用来记录文件的变化，用于版本更新，并且记录以前的版本。</span><br><span class="line">git是分布式版本控制系统</span><br></pre></td></tr></table></figure><p><img src="/image/img.png" alt="img.png"></p><h2 id="Git的基本概念"><a href="#Git的基本概念" class="headerlink" title="Git的基本概念"></a>Git的基本概念</h2><h3 id="三个仓库"><a href="#三个仓库" class="headerlink" title="三个仓库"></a>三个仓库</h3><ol><li>工作区(就是编写代码的地方)</li><li>暂存区(把已经完成的文件放进这里)</li><li>Git仓库(当这个文件全部完成之后，放进Git仓库进行管理)</li></ol><h3 id="一些状态"><a href="#一些状态" class="headerlink" title="一些状态"></a>一些状态</h3><p><strong>U:未跟踪,M:已修改,S:已暂存,A:新添加,’’:未修改</strong></p><h4 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h4><p>基本的 Git 工作流程如下：</p><ol><li>在工作区中修改文件</li><li>将你想要下次提交的更改进行暂存</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</li></ol><h2 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h2><p>首先先下载，安装</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="/image/GitConfig.png" alt="img.png"></p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p><img src="/image/Commond01.png" alt="img.png"><br><img src="/image/Commond2.png" alt="img.png"></p><h4 id="修改和回退历史"><a href="#修改和回退历史" class="headerlink" title="修改和回退历史"></a>修改和回退历史</h4><p>版本回退<br><img src="/image/reset.png" alt="img.png"></p><ol><li>未add但修改了(在工作区)</li><li>add了，但未commit</li><li>add和commit了<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git restore (file)</li></ol><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>结果：工作区文件回退。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git restore –staged (file)，就回到了场景1，第二步按场景1操作。</p><p>结果：暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。</p><p>场景3： 假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？<br>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset –hard (id)</p><p>结果：工作区文件、暂存区文件、本地仓库都回退</p><p><strong>我的推荐是：尽量不要直接commit</strong></p><p>修改的时候，不要直接进行commit，要先add例子：<br><code>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git add -&gt; git commit</code></p><p>可以将两次的文件进行合并，最后进行提交</p><p><code>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit</code></p><p>这种只会提交第一次的</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>先手动删除文件，然后使用git add (file) 和git rm(file)效果是一样的。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当你误删的话只能回退以前的版本，来进行恢复</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><img src="/image/branch1.png" alt="img.png"><br>上面有分支的指令（知道：增，删，合并，切换分支就可以了）</p><p>注意：合并主分支的时候要在主分支进行合并</p><h3 id="推送失败"><a href="#推送失败" class="headerlink" title="推送失败"></a>推送失败</h3><ol><li><code>git pull</code>，再推送</li><li>如果<code>git pull</code>，再推送失败，按照报错的操作进行推送</li></ol><h3 id="分支合并遇到冲突"><a href="#分支合并遇到冲突" class="headerlink" title="分支合并遇到冲突"></a>分支合并遇到冲突</h3><p>手动解决冲突，再进行合并<br><img src="/image/confict.png" alt="img.png"></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tailwindcss</title>
      <link href="/2023/10/01/%E6%9C%AA%E6%9D%A5%E5%85%88%E9%A9%B1%EF%BC%8C%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/tailwindcss/"/>
      <url>/2023/10/01/%E6%9C%AA%E6%9D%A5%E5%85%88%E9%A9%B1%EF%BC%8C%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/tailwindcss/</url>
      
        <content type="html"><![CDATA[<h1 id="原子化css"><a href="#原子化css" class="headerlink" title="原子化css"></a>原子化css</h1>]]></content>
      
      
      <categories>
          
          <category> 未来先驱，前沿技术 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
