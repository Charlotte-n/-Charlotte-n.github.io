<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端Vercel部署</title>
      <link href="/2024/01/29/%E9%83%A8%E7%BD%B2/Vercel%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/01/29/%E9%83%A8%E7%BD%B2/Vercel%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="Vercel部署"><a href="#Vercel部署" class="headerlink" title="Vercel部署"></a>Vercel部署</h1><h2 id="1-注册Vercel账号"><a href="#1-注册Vercel账号" class="headerlink" title="1. 注册Vercel账号"></a>1. 注册Vercel账号</h2><h2 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2. 创建项目"></a>2. 创建项目</h2><h2 id="3-配置项目"><a href="#3-配置项目" class="headerlink" title="3. 配置项目"></a>3. 配置项目</h2><h2 id="4-部署项目"><a href="#4-部署项目" class="headerlink" title="4. 部署项目"></a>4. 部署项目</h2><h2 id="5-访问项目"><a href="#5-访问项目" class="headerlink" title="5. 访问项目"></a>5. 访问项目</h2><h2 id="6-配置自定义域名"><a href="#6-配置自定义域名" class="headerlink" title="6. 配置自定义域名"></a>6. 配置自定义域名</h2><h2 id="7-配置HTTPS"><a href="#7-配置HTTPS" class="headerlink" title="7. 配置HTTPS"></a>7. 配置HTTPS</h2><h2 id="8-配置CDN"><a href="#8-配置CDN" class="headerlink" title="8. 配置CDN"></a>8. 配置CDN</h2><h2 id="9-配置SSL证书"><a href="#9-配置SSL证书" class="headerlink" title="9. 配置SSL证书"></a>9. 配置SSL证书</h2><h2 id="10-配置Webhook"><a href="#10-配置Webhook" class="headerlink" title="10. 配置Webhook"></a>10. 配置Webhook</h2>]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React项目框架搭建</title>
      <link href="/2024/01/23/%E5%BC%80%E5%90%AF%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/React%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/01/23/%E5%BC%80%E5%90%AF%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/React%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">你好呀</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开启一个项目的准备 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue前端框架搭建</title>
      <link href="/2024/01/23/%E5%BC%80%E5%90%AF%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/vue%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/01/23/%E5%BC%80%E5%90%AF%E4%B8%80%E4%B8%AA%E6%96%B0%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/vue%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><h3 id="git管理"><a href="#git管理" class="headerlink" title="git管理"></a>git管理</h3><p>git init</p><p>git add .</p><p>git commit -m ‘’</p><p>根据GitHub来做就可以了</p><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="/img.png" alt="img.png"><br>我的目录结构<br><img src="/img_2.png" alt="img_2.png"></p><h3 id="环境空间的配置"><a href="#环境空间的配置" class="headerlink" title="环境空间的配置"></a>环境空间的配置</h3><h4 id="env-development"><a href="#env-development" class="headerlink" title=".env.development"></a>.env.development</h4><h4 id="env-production"><a href="#env-production" class="headerlink" title=".env.production"></a>.env.production</h4><h4 id="env-test"><a href="#env-test" class="headerlink" title=".env.test"></a>.env.test</h4><h4 id="新增环境变量的类型声明"><a href="#新增环境变量的类型声明" class="headerlink" title="新增环境变量的类型声明"></a>新增环境变量的类型声明</h4><p>在 <code>src/env.d.ts</code>增加声明，会在import.env.meta 中会有ts的校验和提示</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImportMetaEnv</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">VITE_BASE_URL</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ImportMeta</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">env</span>: <span class="title class_">ImportMetaEnv</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="别名的设置"><a href="#别名的设置" class="headerlink" title="别名的设置"></a>别名的设置</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    别名的配置</span></span><br><span class="line"><span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">    <span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@&quot;</span>: <span class="selector-attr">[<span class="string">&quot;src&quot;</span>]</span>,</span><br><span class="line">        <span class="string">&quot;@/*&quot;</span>: <span class="selector-attr">[<span class="string">&quot;src/*&quot;</span>]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vite.config.ts</span></span><br><span class="line"><span class="symbol">resolve:</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">    alias:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="string">&quot;@&quot;</span>:path.resolve(__dirname,<span class="string">&quot;src&quot;</span>)</span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="vite-config-ts配置"><a href="#vite-config-ts配置" class="headerlink" title="vite.config.ts配置"></a>vite.config.ts配置</h3><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="code"><pre><span class="line">export default defineConfig(&#123;</span><br><span class="line">    plugins: [vue()],</span><br><span class="line">    resolve:&#123;</span><br><span class="line">        alias:&#123;</span><br><span class="line">            &quot;@&quot;:path.resolve(__dirname,&quot;src&quot;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    server:&#123;</span><br><span class="line">        port:8080,</span><br><span class="line">        //热更新</span><br><span class="line">        hmr:&#123;</span><br><span class="line">            host:&#x27;127.0.0.1&#x27;,</span><br><span class="line">            port:8080</span><br><span class="line">        &#125;,</span><br><span class="line">        //设置https代理(写接口的时候写)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="ts的配置"><a href="#ts的配置" class="headerlink" title="ts的配置"></a>ts的配置</h3><h3 id="代码风格统一（eslint-prettier-husky-commitizen-commitlint）"><a href="#代码风格统一（eslint-prettier-husky-commitizen-commitlint）" class="headerlink" title="代码风格统一（eslint+prettier+husky+commitizen+commitlint）"></a>代码风格统一（eslint+prettier+husky+commitizen+commitlint）</h3><h4 id="eslintrc-js-eslintrc-json-eslintignore"><a href="#eslintrc-js-eslintrc-json-eslintignore" class="headerlink" title=".eslintrc.js&#x2F;.eslintrc.json+.eslintignore"></a>.eslintrc.js&#x2F;.eslintrc.json+.eslintignore</h4><ol><li>安装  npm install -D eslint eslint-plugin-vue</li><li>按照<a href="https://eslint.vuejs.org/user-guide/#usage">https://eslint.vuejs.org/user-guide/#usage</a>配即可</li><li>在命令行输入<br>“eslint”: “eslint . –ext .vue,.js,.jsx,.cjs,.mjs –fix –ignore-path .gitignore”,</li><li>因为eslint使用的是espree语法解析，所以要安装<br><code> @typescript-eslint/parser,</code><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i @typescript-eslint/parser -D</span><br></pre></td></tr></table></figure></li><li>一些ts额外的eslint的语法规则<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i @typescropt-eslint/eslint-plugin --save-dev</span><br></pre></td></tr></table></figure>在.eslintrc.js&#x2F;.eslintrc.json中配置<figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    root: true,</span><br><span class="line">    extends: [</span><br><span class="line">        &#x27;plugin:vue/vue3-essential&#x27;,</span><br><span class="line">        &#x27;eslint:recommended&#x27;,</span><br><span class="line">        &#x27;prettier&#x27;,</span><br><span class="line">        &#x27;plugin:prettier/recommended&#x27;,</span><br><span class="line">        &#x27;plugin:@/typescript-eslint/recommended&#x27;,</span><br><span class="line">    ],</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        ecmaVersion: &#x27;latest&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>.eslintignore<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta"># (不需要检查的)</span></span><br><span class="line">node_modules/</span><br><span class="line">dist/</span><br><span class="line"><span class="keyword">index</span>.html</span><br></pre></td></tr></table></figure></li></ol><h4 id="代码规范prettier"><a href="#代码规范prettier" class="headerlink" title="代码规范prettier"></a>代码规范prettier</h4><ol><li>下载<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">npm i prettier eslint-config-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure></li><li>配置文件 prettier.config.js或.prettierrc.js可以定义规则<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span><span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;endOfLine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;trailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>在eslint中配置<br>npm install eslint-config-prettier –save-dev</li></ol><p>{<br>“extends”: [“eslint:recommended”, “plugin:prettier&#x2F;recommended”, “eslint-config-prettier”]<br>}</p><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="code"><pre><span class="line">解决与prettier的冲突</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    root: true,</span><br><span class="line">    extends: [</span><br><span class="line">        &#x27;plugin:vue/vue3-essential&#x27;,</span><br><span class="line">        &#x27;eslint:recommended&#x27;,</span><br><span class="line">        &#x27;prettier&#x27;,</span><br><span class="line">        &#x27;plugin:prettier/recommended&#x27;,</span><br><span class="line">        &#x27;plugin:@/typescript-eslint/recommended&#x27;,</span><br><span class="line">        &#x27;&#x27;</span><br><span class="line">    ],</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">        ecmaVersion: &#x27;latest&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>最后使用webstorm中的自动配置prettier来规范代码，就可以不用在package.json里面写了,在package.json填写：”format”: “prettier –write &quot;.&#x2F;**&#x2F;*.{html,vue,ts,js,json,md}&quot;“,</li></ol><h3 id="git规范"><a href="#git规范" class="headerlink" title="git规范"></a>git规范</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">简介：</span><br><span class="line">1. pre-commit判断提交的代码是否符合规范</span><br><span class="line">2. commit-msg通过钩子函数，判断commit `信息` 是否符合规范</span><br><span class="line">3. pre-push执行测试，避免对以前的内容造成影响</span><br><span class="line"></span><br><span class="line">使用的工具:</span><br><span class="line">1. husky:操纵git钩子函数的工具</span><br><span class="line">2. commitlint:信息校验工具</span><br><span class="line">3. lint-staged:本地缓存代码检查工具</span><br><span class="line">4. commitizen:辅助commit信息，规范提交信息</span><br></pre></td></tr></table></figure><h4 id="配置husky-管理git钩子函数的一个工具"><a href="#配置husky-管理git钩子函数的一个工具" class="headerlink" title="配置husky(管理git钩子函数的一个工具)"></a>配置husky(管理git钩子函数的一个工具)</h4><ol><li><code>pnpm i husky lint-staged -D</code></li><li>在package.json的script中添加脚本<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;script&quot;:&#123;</span><br><span class="line">        &quot;prepare&quot;:&quot;husky install&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>当执行pnpm prepare的时候会有一个.husky目录</li><li>使用husky命令添加<code>pre-commit</code>钩子，<br><code> pnpm husky add .husky/pre-commit &quot;dlx lint-staged&quot;</code><br>这样就会在.husky目录下生成相关pre-commit的文件</li><li>在根目录创建.lintstagedrc.json文件控制检查和操作方式<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;*.&#123;js,jsx,ts,tsx&#125;&quot;: [&quot;prettier --write .&quot;, &quot;eslint  --fix&quot;],</span><br><span class="line">    &quot;*.md&quot;: [&quot;prettier --write&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h3><p>在src&#x2F;store里面创建index.ts</p><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="code"><pre><span class="line">import &#123;createPinia&#125; from &quot;pinia&quot;;</span><br><span class="line">const pinia = createPinia()</span><br><span class="line">export default pinia</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="code"><pre><span class="line">main.ts使用</span><br><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#x27;./style.css&#x27;</span><br><span class="line">//导入pinia</span><br><span class="line">import pinia from &quot;@/store&quot;;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(pinia)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后的使用我再明确地说，现在只是基本配置</p><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p>在src&#x2F;router下创建index.ts,并导出router</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter, createWebHistory, <span class="title class_">RouteRecordRaw</span>&#125; <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes :<span class="title class_">Array</span>&lt;<span class="title class_">RouteRecordRaw</span>&gt; = [</span><br><span class="line">    </span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>在main.ts中使用</p><figure class="highlight plaintext"><figcaption><span>6</span></figcaption><table><tr><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;</span><br><span class="line">import &#x27;./style.css&#x27;</span><br><span class="line">//导入pinia</span><br><span class="line">import pinia from &#x27;@/store&#x27;</span><br><span class="line">//导入router</span><br><span class="line">import router from &quot;@/router&quot;;</span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(pinia)</span><br><span class="line">app.use(router)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置axios"><a href="#配置axios" class="headerlink" title="配置axios"></a>配置axios</h3><p>安装</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i axios</span><br></pre></td></tr></table></figure><p>在src&#x2F;utils下创建http.ts<br>配置axios和请求拦截器，相应拦截器</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios, &#123;<span class="title class_">AxiosInstance</span>, <span class="title class_">AxiosResponse</span>, <span class="title class_">InternalAxiosRequestConfig</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">http</span>: <span class="title class_">AxiosInstance</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://www.disastar.edu.cn&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截器</span></span><br><span class="line">http.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">config:InternalAxiosRequestConfig</span>):<span class="title class_">InternalAxiosRequestConfig</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">error:<span class="built_in">any</span></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//相应拦截器</span></span><br><span class="line">http.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response:AxiosResponse</span>):<span class="title class_">AxiosResponse</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">&#125;,<span class="keyword">function</span> (<span class="params">error:<span class="built_in">any</span></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>页面哪里有请求哪里就导入就可以了</p><h3 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h3><h4 id="导入全局的主题样式"><a href="#导入全局的主题样式" class="headerlink" title="导入全局的主题样式"></a>导入全局的主题样式</h4><p>styles&#x2F;common.scss</p><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">$themeColor: <span class="meta">#4C84FF<span class="comment">;</span></span></span><br><span class="line">$secondColor:<span class="meta">#9DCCA8<span class="comment">;</span></span></span><br><span class="line">$helpColor: <span class="meta">#e26237<span class="comment">;</span></span></span><br><span class="line">$sucColor: <span class="meta">#1dc779<span class="comment">;</span></span></span><br><span class="line">$warnColor: <span class="meta">#ffb302<span class="comment">;</span></span></span><br><span class="line">$priceColor: <span class="meta">#cf4444<span class="comment">;</span></span></span><br></pre></td></tr></table></figure><h3 id="tailwindcss的引入"><a href="#tailwindcss的引入" class="headerlink" title="tailwindcss的引入"></a>tailwindcss的引入</h3><ol><li>首先根据官网安装</li><li>使用postcss的插件</li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vite.<span class="property">config</span>.<span class="property">ts</span></span><br><span class="line"><span class="attr">postcss</span>: &#123;</span><br><span class="line"><span class="attr">plugins</span>: [<span class="title class_">PostcssPresetEnv</span>, my_pxtovw, tailwindcss, autoprefixer]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置tailwind.config.js<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@type</span> &#123;<span class="type">import(&#x27;tailwindcss&#x27;).Config</span>&#125;**/</span></span><br><span class="line"><span class="comment">//tailwindcss的配置</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">important</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">content</span>: [<span class="string">&#x27;./index.html&#x27;</span>, <span class="string">&#x27;./src/**/*.&#123;js,ts,jsx,tsx,vue&#125;&#x27;</span>],</span><br><span class="line">    <span class="attr">plugins</span>: [],</span><br><span class="line">    <span class="attr">corePlugins</span>: &#123;</span><br><span class="line">        <span class="attr">preflight</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">theme</span>: &#123;</span><br><span class="line">        <span class="comment">// fix tailwind line-height</span></span><br><span class="line">        <span class="attr">fontSize</span>: &#123;</span><br><span class="line">            <span class="attr">xs</span>: <span class="string">&#x27;12px&#x27;</span>,</span><br><span class="line">            <span class="attr">sm</span>: <span class="string">&#x27;14px&#x27;</span>,</span><br><span class="line">            <span class="attr">base</span>: <span class="string">&#x27;16px&#x27;</span>,</span><br><span class="line">            <span class="attr">lg</span>: <span class="string">&#x27;18px&#x27;</span>,</span><br><span class="line">            <span class="attr">xl</span>: <span class="string">&#x27;20px&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;2xl&#x27;</span>: <span class="string">&#x27;24px&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;3xl&#x27;</span>: <span class="string">&#x27;30px&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;4xl&#x27;</span>: <span class="string">&#x27;36px&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;5xl&#x27;</span>: <span class="string">&#x27;48px&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;6xl&#x27;</span>: <span class="string">&#x27;60px&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;7xl&#x27;</span>: <span class="string">&#x27;72px&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//进行响应式</span></span><br><span class="line">    <span class="attr">breakpoints</span>: &#123;</span><br><span class="line">        <span class="attr">xs</span>: <span class="string">&#x27;480px&#x27;</span>, <span class="comment">// 添加自定义断点</span></span><br><span class="line">        <span class="attr">sm</span>: <span class="string">&#x27;640px&#x27;</span>,</span><br><span class="line">        <span class="attr">md</span>: <span class="string">&#x27;768px&#x27;</span>,</span><br><span class="line">        <span class="attr">lg</span>: <span class="string">&#x27;1024px&#x27;</span>,</span><br><span class="line">        <span class="attr">xl</span>: <span class="string">&#x27;1280px&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>按照我的来进行配置，官方的没有写vue，不会解析vue的，所以不会生效</li><li>引入样式tailwindcss.css<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@tailwind</span> base;</span><br><span class="line"><span class="keyword">@tailwind</span> components;</span><br><span class="line"><span class="keyword">@tailwind</span> utilities;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>在main.js引入<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./styles/scss/common.scss&#x27;</span></span><br></pre></td></tr></table></figure>这就引入完毕了</li></ol><h4 id="UI库本项目采用地是Ant-Design-Vue3"><a href="#UI库本项目采用地是Ant-Design-Vue3" class="headerlink" title="UI库本项目采用地是Ant Design Vue3"></a>UI库本项目采用地是Ant Design Vue3</h4><ol><li>安装<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">npm install ant-<span class="built_in">design</span>-vue --<span class="keyword">save</span></span><br></pre></td></tr></table></figure></li><li>按需加载<br>先安装这个包<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> i unplugin-vue-components -D</span><br></pre></td></tr></table></figure>在vite中引入ant design vue3项目，没有使用vue4的因为之前用发现样式丢失了<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="comment">//自动引入ant design vue3</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/dist/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AntDesignVueResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/dist/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">vue</span>(),</span><br><span class="line">        <span class="comment">//自动引入ant design vue3</span></span><br><span class="line">        <span class="title class_">Components</span>(&#123;</span><br><span class="line">            <span class="attr">resolvers</span>: [<span class="title class_">AntDesignVueResolver</span>()],</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">alias</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;@&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">server</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">        <span class="comment">//热更新</span></span><br><span class="line">        <span class="attr">hmr</span>: &#123;</span><br><span class="line">            <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">            <span class="attr">port</span>: <span class="number">8080</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//设置https代理(写接口的时候写)</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="出现的问题"><a href="#出现的问题" class="headerlink" title="出现的问题"></a>出现的问题</h2><p>1.<img src="/img_1.png" alt="img_1.png"><br>因为vite的创建的vue3项目不支持CommonJs的模块<br>2. 出现了ts无法识别vue后缀文件解决办法,在src或者根目录添加env.d.ts对它进行声明文件</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;*.vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; <span class="title class_">DefineComponent</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">component</span>: <span class="title class_">DefineComponent</span>&lt;&#123;&#125;, &#123;&#125;, <span class="built_in">any</span>&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> component</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="响应式适配"><a href="#响应式适配" class="headerlink" title="响应式适配"></a>响应式适配</h2><ol><li>npm install postcss-px-to-viewport –save-dev</li><li>vite里面添加配置项<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">import pxtovw from &#x27;postcss-px-to-viewport&#x27;</span><br><span class="line">const my_pxtovw = pxtovw(&#123;</span><br><span class="line">    unitToConvert: &#x27;px&#x27;, //需要转换的单位，默认为&quot;px&quot;</span><br><span class="line">    viewportWidth: 1440,</span><br><span class="line">    unitPrecision: 6, // 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span><br><span class="line">    propList: [&#x27;*&#x27;], // 能转化为vw的属性列表</span><br><span class="line">    viewportUnit: &#x27;vw&#x27;, // 指定需要转换成的视窗单位，建议使用vw</span><br><span class="line">    fontViewportUnit: &#x27;vw&#x27;, //字体使用的视口单位</span><br><span class="line">    selectorBlackList: [&#x27;.ignore-&#x27;, &#x27;.hairlines&#x27;, &#x27;wrap&#x27;, &#x27;.no_change_px&#x27;], //指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span><br><span class="line">    minPixelValue: 1, // 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span><br><span class="line">    mediaQuery: true, // 允许在媒体查询中转换`px`</span><br><span class="line">    replace: true, //是否直接更换属性值，而不添加备用属性</span><br><span class="line">    exclude: [/node_modules/], //忽略某些文件夹下的文件或特定文件，例如 &#x27;node_modules&#x27; 下的文件</span><br><span class="line">    landscape: false, //是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span><br><span class="line">    // landscapeUnit: &#x27;vw&#x27;, //横屏时使用的单位</span><br><span class="line">    // landscapeWidth: 1334, //横屏时使用的视口宽度</span><br><span class="line">&#125;)</span><br><span class="line">&#123;</span><br><span class="line">    css: &#123;</span><br><span class="line">        preprocessorOptions: &#123;</span><br><span class="line">            scss: &#123;</span><br><span class="line">                additionalData: `@use &quot;@/styles/var.scss&quot; as *; `,</span><br><span class="line">            &#125;</span><br><span class="line">        ,</span><br><span class="line">        &#125;</span><br><span class="line">    ,</span><br><span class="line">        postcss: &#123;</span><br><span class="line">            plugins: [PostcssPresetEnv, my_pxtovw],</span><br><span class="line">        &#125;</span><br><span class="line">    ,</span><br><span class="line">    &#125;</span><br><span class="line">,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="写代码的一些不会的点"><a href="#写代码的一些不会的点" class="headerlink" title="写代码的一些不会的点"></a>写代码的一些不会的点</h2><ol><li>user-select:none是不能选中文本</li><li>ts类型检查<br>开发环境<br>要下载这个插件</li></ol><pre><code>import checker from &#39;vite-plugin-checker&#39;; plugins: [    vue(),    checker(&#123;    vueTsc: true,    &#125;),    ],</code></pre><p>生产环境的配置<br>tsc –noEmit</p>]]></content>
      
      
      <categories>
          
          <category> 开启一个新项目准备工作 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2024/01/23/%E9%83%A8%E7%BD%B2/docker/"/>
      <url>/2024/01/23/%E9%83%A8%E7%BD%B2/docker/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端手动部署</title>
      <link href="/2024/01/23/%E9%83%A8%E7%BD%B2/%E5%89%8D%E7%AB%AF%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2024/01/23/%E9%83%A8%E7%BD%B2/%E5%89%8D%E7%AB%AF%E6%89%8B%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端自动化部署</title>
      <link href="/2024/01/23/%E9%83%A8%E7%BD%B2/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2(github%20action%20+%20docker)/"/>
      <url>/2024/01/23/%E9%83%A8%E7%BD%B2/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2(github%20action%20+%20docker)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 部署 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试02-计算机网络.md</title>
      <link href="/2023/12/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2023/12/09/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Http常见请求头有哪些，以及作用"><a href="#Http常见请求头有哪些，以及作用" class="headerlink" title="Http常见请求头有哪些，以及作用"></a>Http常见请求头有哪些，以及作用</h1><blockquote><p>别名为:超文本传输协议</p><p>HTTP头字段，指的是超文本传输协议的请求和响应消息中的消息头部分，可以自己定义</p></blockquote><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>Accept:能接受的回应内容类型（Content-type）</p><p>Authorization:超文本传输协议请求中的授权信息，通常为basic为开头</p><p>Cache-Control:控制缓存的行为,Cache-Control:no-cache</p><p>Content-Type:请求体的多媒体类型，Content-Type：application&#x2F;x一www-form-urlencode</p><p>User-Agent:浏览器的浏览器身份表示字符串。User-Agent:User-Agent: Mozilla&#x2F;5.0(X11;Linux x86_64; rv:12.0)<br>Gecko&#x2F;20100101 Firefox&#x2F;21.0</p><p>Origin:发起一个针对跨来源资源共享,Origin:Origin: http:&#x2F;&#x2F; <a href="http://www.example-social-network.com/">www.example-social-network.com</a></p><h2 id="强缓存和协商缓存"><a href="#强缓存和协商缓存" class="headerlink" title="强缓存和协商缓存"></a>强缓存和协商缓存</h2><p><img src="/img_6.png" alt="img_6.png"></p><h2 id="会话状态"><a href="#会话状态" class="headerlink" title="会话状态"></a>会话状态</h2><p>cookie是为了辨别用户身份</p><p>cookie的应用三个方面:</p><ol><li>会话状态管理(登录状态，购物车或其他需要记录的信息)</li><li>个性化设置</li><li>浏览器行为跟踪(跟踪分析用户行为)</li></ol><h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><blockquote><p>通过状态码来判断和分析服务器运行状态</p></blockquote><p>1:消息</p><p>2:成功</p><p>3:重定向</p><p>4:请求错误</p><p>5:服务器错误</p><h1 id="什么是HTTP，HTTP和HTTPS有什么区别"><a href="#什么是HTTP，HTTP和HTTPS有什么区别" class="headerlink" title="什么是HTTP，HTTP和HTTPS有什么区别"></a>什么是HTTP，HTTP和HTTPS有什么区别</h1><blockquote><p>HTTP:超文本传输协议，网络通信的一种规范。常被用于Web浏览器和网站服务器之间传递信息，以明文方式发送内容，不提供任何方式的数据加密</p></blockquote><p>特点:</p><ol><li>支持客户&#x2F;服务器模式</li><li>简单快速:客户端只需要传递请求方法和路径就可以了。</li><li>灵活:HTTP允许传输任何类型的数据对象，使用Content-Type标记</li><li>无连接:每次连接只处理一个请求，服务器处理完请求，并收到客户端的应答后，即断开连接</li><li>无状态:HTTP协议自身不对请求和响应之间的通信状态进行保存</li></ol><blockquote><p>HTTPS:超文本传输安全协议，通过安全套接字层(SSL)进行加密传输,相当于HTTPS &#x3D; HTTP + SSL&#x2F;TLS,通过SSL帧数来验证服务器身份，并为浏览器和服务器之间通信进行加密<br><img src="/img_7.png" alt="img_7.png"></p></blockquote><p>HTTP 和HTTPS的区别</p><ol><li>HTTP是明文的，HTTPS是经过SSL加密的</li><li>HTTPS和HTTP的连接方式不同，默认端口不一样，HTTP:80,HTTPS:443</li><li>HTTPS需要设计加密以及握手，性能不如HTTP</li><li>HTTPS需要SSL，SSL需要钱，功能越强大费用越高。</li></ol><h1 id="输入URL地址之后会发生什么"><a href="#输入URL地址之后会发生什么" class="headerlink" title="输入URL地址之后会发生什么"></a>输入URL地址之后会发生什么</h1><p>①：DNS解析域名得到IP地址</p><p>②：客户端与服务器建立连接(TCP三次握手)</p><p>③：客户端发起请求</p><p>④：服务器接收到请求根据端口号.路径等找到对应资源文件，响应源代码给客户端</p><p>⑤：客户端拿到请求到的数据(html页面的源代码)，开始解析页面以及请求资源</p><p>⑥：客户端渲染页面</p><p>⑦：web服务器断开连接(四次挥手)</p>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试01-NodeJs</title>
      <link href="/2023/11/22/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/NodeJs/"/>
      <url>/2023/11/22/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/NodeJs/</url>
      
        <content type="html"><![CDATA[<h1 id="对Buffer的理解"><a href="#对Buffer的理解" class="headerlink" title="对Buffer的理解"></a>对Buffer的理解</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>Node应用中，处理网络协议、操作数据库、处理图片、接受上传文件等，在网络流和文件的操作中，要处理大量的二进制数据，而Buffer就是在内存中开辟一片区域，用来存放二进制数据</p><p>上面的操作中都会存放数据流动，每个数据流动的工程中，都有一个最小或最大的数据量。</p><p>如果数据到达的速度比进程消耗的速度快，那么少数早到达的数据会处于等待区等候被处理。反之，如果数据到达的速度比进程消耗的数据慢，那么早先到达的数据需要等待一定量的数据到达之后才能被处理</p><p>这里的等待区就是缓冲区(Buffer),Nodejs不能控制数据传输速度和时间，只能决定何时发送数据，如果还没到发送的时间，则将数据放在Buffer中。<br><img src="/img_8.png" alt="img_8.png"><br>我的理解:就是一个存放二进制的一个区域</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>创建Buffer方法</p><p>Buffer.from()</p><p>Buffer.alloc()</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>)<span class="comment">//创建一个大小为10个字节的缓冲区</span></span><br><span class="line"><span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>,<span class="number">1</span>)<span class="comment">//创建一个长度为10的Buffer，其中全部填充了值&#x27;1&#x27;的字节</span></span><br><span class="line"><span class="keyword">const</span> buffer = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><ol><li>编码和解码不是相同的格式则会出现乱码的情况</li><li>设定的范围导致字符串被截断的时候，也会出现乱码</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>I&#x2F;O操作</p><p>加密解密</p><p>zlib.js(提供压缩和解压功能)</p><h1 id="对Node中Stream的理解-应用场景"><a href="#对Node中Stream的理解-应用场景" class="headerlink" title="对Node中Stream的理解?应用场景?"></a>对Node中Stream的理解?应用场景?</h1><p>流，是有顺序的，逐块读取数据、处理内容，用于顺序读取输入或写入输出</p><p>会以Buffer为单位，流分为3部分:source、dest、pipe<br><img src="/img_9.png" alt="img_9.png"><br>在NodeJs中HTTP服务模块中，request为可读流，response为可写流</p><h1 id="nodejs模块的导入与导出以及es6区别"><a href="#nodejs模块的导入与导出以及es6区别" class="headerlink" title="nodejs模块的导入与导出以及es6区别"></a>nodejs模块的导入与导出以及es6区别</h1><h2 id="node模块化导入和导出"><a href="#node模块化导入和导出" class="headerlink" title="node模块化导入和导出"></a>node模块化导入和导出</h2><p>导出的模块：两种方式<br>module.exports &#x3D; { }<br>exports.key &#x3D; value<br>两种方式的区别：<br>module.exports 导出的是一个对象 ； 一个文件中只能使用一次 ; 导入模块同样可以使用对象解构形式</p><p>exports 导出的是一个具体的值 ； 一个文件中可以出现多次 ; exports 可以导出多个模块，当我们引入模块式，会得到一个对象集合 { fun: [Function], test: [Function], num: ‘hello world’ } 可以使用对象解构的形式获取具体的模块</p><p>导入：<br>nodejs 遵循的是 CommonJs 的规范</p><p>导入模块： 统一使用 require(url) 导入模块</p><h2 id="es6模块化导入和导出"><a href="#es6模块化导入和导出" class="headerlink" title="es6模块化导入和导出"></a>es6模块化导入和导出</h2><p>重点 和 es6 的模块导入和导出区分</p><p>es6模块化：</p><ul><li>导出模块</li></ul><ol><li><p>单独导出： export let num &#x3D; 100;</p></li><li><p>整体导出：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">const</span> num = <span class="number">100</span>;  </span><br><span class="line"> <span class="keyword">export</span> &#123;</span><br><span class="line">     fun,</span><br><span class="line">     num</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>导出默认模块</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> str;</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">导出模块可以命名别名</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    num <span class="keyword">as</span> n,</span><br><span class="line">    fun <span class="keyword">as</span> f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ul><li>导入模块<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">导入普通模块 : <span class="keyword">import</span> &#123;解构&#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span> </span><br><span class="line">导入默认模块  <span class="keyword">import</span> 变量名 <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span> </span><br><span class="line">两者结合：  <span class="keyword">import</span> 变量名,&#123;解构&#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span> </span><br><span class="line">导入命名别名： <span class="keyword">import</span> &#123;解构 <span class="keyword">as</span> 别名&#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span> </span><br><span class="line">整体导入： <span class="keyword">import</span> * <span class="keyword">as</span> 别名 <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>  如果里边有默认模块，通过 <span class="string">`别名.default`</span> 使用 , 其他模块 <span class="string">`别名.模块名`</span> 使用</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="对中间件概念的理解，如何封装node中间件"><a href="#对中间件概念的理解，如何封装node中间件" class="headerlink" title="对中间件概念的理解，如何封装node中间件"></a>对中间件概念的理解，如何封装node中间件</h1><p><img src="/img_10.png" alt="img_10.png"><br>在实现中间件时候，单个中间件应该足够简单，职责单一，中间件的代码编写应该高效， 必要的时候通 过缓存重复获取数据。</p><p>koa本身比较简洁，但是通过中间件的机制能够实现各种所需要的功能，使得 web应用具备良好的可 拓展性和组合性 通过将公共逻辑的处理编写在中间件中，可以不用在每一个接口回调中做相同的代码编写，减少了冗杂<br>代码，过程就如装饰者模式</p><p>例如:<br><code>koa-bodyparse</code>:就是将我们的post请求和表单提交的查询字符串转化为对象并挂载在ctx.request.body上</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// my-koa-bodyparser.js</span></span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> <span class="title function_">bodyParser</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line"> <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">let</span> dataArr = [];</span><br><span class="line"> ctx.<span class="property">req</span>.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="params">data</span> =&gt;</span> dataArr.<span class="title function_">push</span>(data));</span><br><span class="line"> ctx.<span class="property">req</span>.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">let</span> contentType = ctx.<span class="title function_">get</span>(<span class="string">&quot;Content-Type&quot;</span>);</span><br><span class="line"> <span class="keyword">let</span> data = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(dataArr).<span class="title function_">toString</span>();</span><br><span class="line"> <span class="keyword">if</span> (contentType === <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line"> ctx.<span class="property">request</span>.<span class="property">body</span> = querystring.<span class="title function_">parse</span>(data);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (contentType === <span class="string">&quot;applaction/json&quot;</span>) &#123;</span><br><span class="line">     </span><br><span class="line"> ctx.<span class="property">request</span>.<span class="property">body</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(data);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">resolve</span>();</span><br><span class="line"> &#125;);</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">await</span> <span class="title function_">next</span>();</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试01-三件套篇</title>
      <link href="/2023/11/22/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/1.%E4%B8%89%E4%BB%B6%E5%A5%97/"/>
      <url>/2023/11/22/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/1.%E4%B8%89%E4%BB%B6%E5%A5%97/</url>
      
        <content type="html"><![CDATA[<h1 id="css"><a href="#css" class="headerlink" title="css"></a>css</h1><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ol><li>是什么<br>将所有元素放在一个矩形里，由<code>content</code>、<code>padding</code>、<code>border</code>、<code>margin</code><br>css中的盒子模型分为:W3C标准盒子模型、IE怪异模型</li><li>标准盒子模型<br>盒子宽度 &#x3D; width + padding + border + margin</li><li>怪异盒子模型<br>盒子宽度 &#x3D; width + margin</li><li>box-sizing:content-box|border-box|inherit</li></ol><h2 id="BFC（属于普通流）"><a href="#BFC（属于普通流）" class="headerlink" title="BFC（属于普通流）"></a>BFC（属于普通流）</h2><blockquote><p>块级格式化上下文，页面中的一块渲染区域，并有着一套属于自己的渲染规则</p></blockquote><p>BFC就是页面上的一个隔离的度容器，容器中的子元素不会影响到外面的元素，反之亦然，BFC目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响啊到外部元素 </p><h2 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a>触发条件</h2><p>根元素</p><p>浮动元素</p><p>overflow不为visible,为auto、scroll、hidden</p><p>display为inline-block、table-cell、table-caption、flex、inline-flex</p><p>position为absolute、fixed </p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h4 id="防止margin重叠"><a href="#防止margin重叠" class="headerlink" title="防止margin重叠"></a>防止margin重叠</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="comment">/*//触发bfc*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>:hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span>hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>heihei<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="清除内部浮动"><a href="#清除内部浮动" class="headerlink" title="清除内部浮动"></a>清除内部浮动</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.par</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>:<span class="number">5px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.child</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*触发BFC*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;par&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自适应多栏布局"><a href="#自适应多栏布局" class="headerlink" title="自适应多栏布局"></a>自适应多栏布局</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.aside</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125; </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.main</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*//触发BFC*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aside&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h2><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ol><li>媒体查询</li><li>百分比</li><li>vw&#x2F;vh</li><li>rem</li></ol><h2 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h2><blockquote><p>分为两种情况:居中元素（子元素）的宽高已知，居中元素宽高未知</p></blockquote><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ol><li>定位+margin:auto<br>子绝父相，定位的属性值为0，那么如果子级没有设置宽高，则会拉开和父级一样的宽高</li><li>定位+margin:负值 (不需要直到父亲的宽高，得知道子元素的宽高)<br>子绝父相，top，left为50%，transform为该子元素的一半并是一个负值。</li><li>定位+transform(不用知道子元素的宽高)<br>这个使用的transform来进行替代上面的第二个方案</li><li>table布局<br>父元素:<code>display:table-cell</code>,子元素:<code>display:inline-block</code>,利用<code>vertical:middle</code>和<code>text-align:center</code>让所有行内块元素水平垂直居中</li><li>flex<br>最常使用的</li><li>grid<br>和上面的flex一样，除了<code>display</code>不一样</li></ol><h4 id="内联元素居中对齐"><a href="#内联元素居中对齐" class="headerlink" title="内联元素居中对齐"></a>内联元素居中对齐</h4><h5 id="水平对齐"><a href="#水平对齐" class="headerlink" title="水平对齐"></a>水平对齐</h5><p>text-align:center</p><p>flex设置: display:flex;justify-content:middle;</p><h5 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h5><p>单行文本父元素确定高度:height&#x3D;&#x3D;&#x3D;line-height</p><p>多行文本父元素确定高度:display:table-cell;vertical-align:middle;</p><h4 id="块级元素居中布局"><a href="#块级元素居中布局" class="headerlink" title="块级元素居中布局"></a>块级元素居中布局</h4><h5 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h5><p>定宽:margin:0 auto</p><p>绝对定位+left:50%+margin:负自身一半</p><h5 id="垂直居中-1"><a href="#垂直居中-1" class="headerlink" title="垂直居中"></a>垂直居中</h5><p>上面的情况</p><h2 id="实现两栏布局，右侧自适应。三栏布局中间，自适应"><a href="#实现两栏布局，右侧自适应。三栏布局中间，自适应" class="headerlink" title="实现两栏布局，右侧自适应。三栏布局中间，自适应"></a>实现两栏布局，右侧自适应。三栏布局中间，自适应</h2><h3 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h3><p>实现思路</p><ol><li>使用float左浮左边栏</li><li>右边模块使用margin-left撑出内容块做内容展示</li><li>为父级元素添加BFC，防止下方元素飞到上方内容<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">overflow</span>: hidden; BFC</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">margin-left</span>: <span class="number">210px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-color</span>: lightgray;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>flex弹性布局<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>注意的是:flex容器的一个默认属性值:align-items:stretch<br>这个属性会导致列等高的效果。为了让两个盒子高度自动:align-items:flex-start</li></ol><h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><ol><li>两边使用float,中间使用margin<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">overflow</span>: hidden; &lt;!-- BFC --&gt;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: coral;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">margin-left</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: lightpink;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">margin-right</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span> 左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span> 右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span> 中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>两边使用absolute,中间使用margin<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">110px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span>中间<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>两边使用float和负margin</li><li>display:table实现<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">table-layout</span>: fixed;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">display</span>: table-cell;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span> 左边固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span> 中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span> 右边固定<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>display:table设置为表格，table-layout:fixed表示列宽自身宽度确定，不是自动计算。</li><li>flex<br>左右设置为固定宽度，中间为100%或者为flex:1</li><li>grid<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.wrap</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">display</span>: grid;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">grid-template-columns</span>: <span class="number">300px</span> auto <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span>,</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: coral;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: lightblue;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.middle</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左边固定 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;middle&quot;</span>&gt;</span> 中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右边固定 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="CSS选择器，优先级，哪些属性可以继承"><a href="#CSS选择器，优先级，哪些属性可以继承" class="headerlink" title="CSS选择器，优先级，哪些属性可以继承"></a>CSS选择器，优先级，哪些属性可以继承</h2><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>后代选择器(#box div),子选择器(.one&gt;.one_1),相邻同胞选择器(.one+.two),群组选择器(div,p)</p><p>伪类选择器:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">:link 选择还未访问的链接</span><br><span class="line">:visited 访问过的链接</span><br><span class="line">:hover 鼠标悬停</span><br><span class="line">:focus 选择具有焦点的</span><br><span class="line">:active 正在点的链接</span><br><span class="line">:first-child 父元素的首个子元素</span><br></pre></td></tr></table></figure><p>伪类元素选择器</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">:first-letter</span><br><span class="line">:first-line</span><br><span class="line">:before</span><br><span class="line">:after</span><br><span class="line">:nth-child(n)</span><br></pre></td></tr></table></figure><p>属性选择器</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[attribute]</span><br><span class="line">[attribute=value]</span><br><span class="line">[attribute~=value]:选择attribute属性包含value的元素</span><br><span class="line">[attribute|=value]:选择attribute属性以value开头的元素</span><br><span class="line"></span><br><span class="line">[attribute^=value]:选择attribute属性开头为value的所有元素</span><br><span class="line">[attribute$=value]:选择attribute属性结尾的value的所有元素</span><br><span class="line">[attribute*=value:选择attribute属性包含value的所有元素]</span><br></pre></td></tr></table></figure><p>层次选择器<br>p~ul:选择前面有p元素的每个ul元素</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>内联&gt;ID&gt;类选择器&gt;标签选择器</p><h3 id="继承属性"><a href="#继承属性" class="headerlink" title="继承属性"></a>继承属性</h3><p>字体系列属性,文本系列属性(text-indent,text-align,line-height,word-spacing,letter-spacing,text-transform,direction,color)</p><p>元素可见性:visibility</p><p>表格布局属性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">caption-side:定位表格标签位置</span><br><span class="line">border-collapse:合并表格边框</span><br><span class="line">border-spacing:设置边框之间的距离</span><br><span class="line">empty-cells:单元格的边框的出现消失</span><br><span class="line">table-layout:表格宽度由什么决定</span><br></pre></td></tr></table></figure><p>列表属性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">list-style-type:文字前面的小点点样式</span><br><span class="line">list-style-position:小点点位置</span><br><span class="line">list-style:可以通过它来进行集合</span><br></pre></td></tr></table></figure><p>光标属性:cursor</p><h2 id="CSS中，有哪些方式乐意隐藏页面元素？区别"><a href="#CSS中，有哪些方式乐意隐藏页面元素？区别" class="headerlink" title="CSS中，有哪些方式乐意隐藏页面元素？区别"></a>CSS中，有哪些方式乐意隐藏页面元素？区别</h2><ol><li>display:none;</li><li>visibility:hidden<br>不会触发重排，但会触发重绘</li><li>opacity:0<br>不会触发重排和重绘</li><li>height、weight设为0<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.hiddenBox &#123;</span><br><span class="line"> margin:0; </span><br><span class="line"> border:0;</span><br><span class="line"> padding:0;</span><br><span class="line"> height:0;</span><br><span class="line"> width:0;</span><br><span class="line"> overflow:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>position:absolute<br>移除可视区域<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.hide&#123;</span><br><span class="line">    position:absolute;</span><br><span class="line">    top:-9999px;</span><br><span class="line">    left:-9999px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>clip-path<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.hide&#123;</span><br><span class="line">    clip-path:polygon(0px 0px ,0px 0px,0px 0px,0px 0px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="实现单行-多行文本溢出的省略样式"><a href="#实现单行-多行文本溢出的省略样式" class="headerlink" title="实现单行 &#x2F; 多行文本溢出的省略样式"></a>实现单行 &#x2F; 多行文本溢出的省略样式</h2><p>基于单行文本溢出，基于高度截断，基于行数截断</p><h3 id="单行文本溢出"><a href="#单行文本溢出" class="headerlink" title="单行文本溢出"></a>单行文本溢出</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">white-space</span>: normal;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="多行文本溢出"><a href="#多行文本溢出" class="headerlink" title="多行文本溢出"></a>多行文本溢出</h3><h4 id="基于高度截断"><a href="#基于高度截断" class="headerlink" title="基于高度截断"></a>基于高度截断</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>:<span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.demo</span><span class="selector-pseudo">::after</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">content</span>: <span class="string">&quot;...&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span> <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">        这是一段很长的话</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般存在英文的时候，可以设置word-break:break-all,将一个单词能够在换行时进行拆分</p><h4 id="基于行数截断"><a href="#基于行数截断" class="headerlink" title="基于行数截断"></a>基于行数截断</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">        -webkit-line-clamp: <span class="number">2</span>;<span class="comment">/*用来限制一个块元素显示的文本的行数*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: -webkit-box;<span class="comment">/*将对象设置为弹性伸缩盒子模型显示*/</span></span></span><br><span class="line"><span class="language-css">        -webkit-box-orient: vertical;<span class="comment">/*设置或检索伸缩盒对象的子元素的排列方式*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本</span><br><span class="line">    这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="CSS画一个三角形，原理是什么"><a href="#CSS画一个三角形，原理是什么" class="headerlink" title="CSS画一个三角形，原理是什么"></a>CSS画一个三角形，原理是什么</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">  border-top: 50px solid yellowgreen;</span><br><span class="line">  border-bottom: 50px solid deeppink;</span><br><span class="line">  border-left: 50px solid bisque;</span><br><span class="line">  border-right: 50px solid chocolate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想要一个的化，就把其余的border颜色变为透明</p><h2 id="CSS实现视差滚动"><a href="#CSS实现视差滚动" class="headerlink" title="CSS实现视差滚动"></a>CSS实现视差滚动</h2><p>实现方式</p><ol><li>background-attachment</li><li>transform:translate3D</li></ol><h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><p>scroll</p><p>fixed</p><p>inherit</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">7</span>);</span></span><br><span class="line"><span class="language-css"> <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">line-height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">font-size</span>: <span class="number">20vh</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.a-img1</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://images.pexels.com/photos/109749</span></span></span><br><span class="line"><span class="string"><span class="language-css">1/pexels-photo-1097491.jpeg</span>);</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-position</span>: center center;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.a-img2</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://images.pexels.com/photos/243729</span></span></span><br><span class="line"><span class="string"><span class="language-css">9/pexels-photo-2437299.jpeg</span>);</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-position</span>: center center;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.a-img3</span> &#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">https://images.pexels.com/photos/100541</span></span></span><br><span class="line"><span class="string"><span class="language-css">7/pexels-photo-1005417.jpeg</span>);</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-attachment</span>: fixed;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-size</span>: cover;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">background-position</span>: center center;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-text&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-img1&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-text&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-img2&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-text&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-img3&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a-text&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ol><li>transform</li><li>transition</li><li>animation<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@keyframes rotate&#123;</span><br><span class="line"> 0%&#123;</span><br><span class="line"> transform: rotate(0deg);</span><br><span class="line"> &#125;</span><br><span class="line"> 50%&#123;</span><br><span class="line"> transform: rotate(180deg);</span><br><span class="line"> &#125;</span><br><span class="line"> 100%&#123;</span><br><span class="line"> transform: rotate(360deg);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">animation: rotate 2s;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">@keyframes rotate&#123;</span><br><span class="line"> from&#123;</span><br><span class="line"> transform: rotate(0deg);</span><br><span class="line"> &#125;</span><br><span class="line"> to&#123;</span><br><span class="line"> transform: rotate(360deg);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">display:grid</span><br><span class="line">行列</span><br><span class="line">grid-<span class="keyword">template</span>-<span class="keyword">columns</span> </span><br><span class="line">grid-<span class="keyword">template</span>-<span class="keyword">rows</span></span><br><span class="line">.<span class="keyword">wrapper</span> &#123;</span><br><span class="line"> display: grid;</span><br><span class="line"> grid-<span class="keyword">template</span>-<span class="keyword">columns</span>: repeat(<span class="number">3</span>,<span class="number">200</span>px);</span><br><span class="line"> grid-gap: <span class="number">5</span>px;</span><br><span class="line"> grid-<span class="keyword">template</span>-<span class="keyword">rows</span>:repeat(<span class="number">2</span>,<span class="number">50</span>px);</span><br><span class="line">&#125;</span><br><span class="line">grid-<span class="keyword">template</span>-<span class="keyword">columns</span>: repeat(auto-fill, <span class="number">200</span>px)</span><br><span class="line">grid-<span class="keyword">template</span>-<span class="keyword">columns</span>: <span class="number">200</span>px <span class="number">1</span>fr <span class="number">2</span>fr</span><br><span class="line">minmax(<span class="number">100</span>px, <span class="number">1</span>fr) :表示长度范围</span><br><span class="line">grid-<span class="keyword">template</span>-<span class="keyword">columns</span>: <span class="number">100</span>px auto </span><br><span class="line">间隔</span><br><span class="line">grid-<span class="keyword">row</span>-gap: <span class="number">10</span>px</span><br><span class="line">grid-<span class="keyword">column</span>-gap: <span class="number">20</span>px</span><br><span class="line">grid-gap: <span class="number">10</span>px <span class="number">20</span>px</span><br><span class="line">子元素按照一定的顺序</span><br><span class="line">grid-auto-flow:<span class="keyword">row</span>/<span class="keyword">column</span></span><br><span class="line">单元格内容的位置属性</span><br><span class="line">.container &#123;</span><br><span class="line"> justify-items: <span class="keyword">start</span> | <span class="keyword">end</span> | center | stretch;</span><br><span class="line"> align-items: <span class="keyword">start</span> | <span class="keyword">end</span> | center | stretch;</span><br><span class="line">&#125;</span><br><span class="line">整个内容区域在容器的水平和垂直位置</span><br><span class="line">.container &#123;</span><br><span class="line"> justify-content: <span class="keyword">start</span> | <span class="keyword">end</span> | center | stretch | space-around | space-be</span><br><span class="line">tween | space-evenly;</span><br><span class="line"> align-content: <span class="keyword">start</span> | <span class="keyword">end</span> | center | stretch | space-around | space-betw</span><br><span class="line">een | space-evenly; </span><br><span class="line">&#125;</span><br><span class="line">grid-<span class="keyword">column</span>-<span class="keyword">start</span>/grid-<span class="keyword">column</span>-<span class="keyword">end</span>/grid-<span class="keyword">row</span>-<span class="keyword">start</span>/grid-<span class="keyword">row</span>-<span class="keyword">end</span>属性</span><br><span class="line">&lt;style&gt;</span><br><span class="line"> #container&#123;</span><br><span class="line"> display: grid;</span><br><span class="line"> grid-<span class="keyword">template</span>-<span class="keyword">columns</span>: <span class="number">100</span>px <span class="number">100</span>px <span class="number">100</span>px;</span><br><span class="line"> grid-<span class="keyword">template</span>-<span class="keyword">rows</span>: <span class="number">100</span>px <span class="number">100</span>px <span class="number">100</span>px;</span><br><span class="line"> &#125;</span><br><span class="line"> .item<span class="number">-1</span> &#123;</span><br><span class="line"> grid-<span class="keyword">column</span>-<span class="keyword">start</span>: <span class="number">2</span>;</span><br><span class="line"> grid-<span class="keyword">column</span>-<span class="keyword">end</span>: <span class="number">4</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;container&quot;&gt;</span><br><span class="line"> &lt;div <span class="keyword">class</span>=&quot;item item-1&quot;&gt;<span class="number">1</span>&lt;/div&gt;</span><br><span class="line"> &lt;div <span class="keyword">class</span>=&quot;item item-2&quot;&gt;<span class="number">2</span>&lt;/div&gt;</span><br><span class="line"> &lt;div <span class="keyword">class</span>=&quot;item item-3&quot;&gt;<span class="number">3</span>&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">设置单元格内容的位置</span><br><span class="line">justify-self/align-self属性</span><br><span class="line">.item&#123;</span><br><span class="line">    justify-self:<span class="keyword">start</span>|<span class="keyword">end</span>|center|stretch;</span><br><span class="line">    align-self:<span class="keyword">start</span>|<span class="keyword">end</span>|center|stretch;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h2><p>order:定义项目的排列顺序，数值越小，排名越靠前</p><p>flex-grow:定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大</p><p>flex-shrink:定义项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</p><p>flex-basis:定义在分配多余空间之前，项目占据的主轴空间（main size）</p><p>flex</p><p>align-self</p><h2 id="说说px-em-rem-vw-vh区别"><a href="#说说px-em-rem-vw-vh区别" class="headerlink" title="说说px&#x2F;em&#x2F;rem&#x2F;vw&#x2F;vh区别"></a>说说px&#x2F;em&#x2F;rem&#x2F;vw&#x2F;vh区别</h2><p><img src="/img_1.png" alt="img_1.png"><br>px为固定大小</p><p>em</p><ol><li>值不是固定的</li><li>em继承成父级元素的字体</li><li>如果不指定字体的大小，会相对于浏览器来设置(16px<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span></span><br><span class="line"> 14px=1.4rem<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;small&quot;</span>&gt;</span> 12px=1.2rem<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-tag">html</span> &#123;<span class="attribute">font-size</span>: <span class="number">10px</span>; &#125; <span class="comment">/* 16px*62.5%=10px */</span> </span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.big</span>&#123;<span class="attribute">font-size</span>: <span class="number">1.4rem</span>&#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.small</span>&#123;<span class="attribute">font-size</span>: <span class="number">1.2rem</span>&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>rem：相对的是HTML根元素<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html &#123;font-size: 62.5%; &#125; /* 16px*62.5%=10px */</span><br></pre></td></tr></table></figure>vh&#x2F;vw:视口大小</li><li>对于普通定位元素就是我们理解的父元素</li><li>对于position:absolute的元素是相对于已定位的父元素</li><li>position:fixed,相对于ViewPort</li></ol><h2 id="让Chrome支持小于12px的字体？以及的区别？"><a href="#让Chrome支持小于12px的字体？以及的区别？" class="headerlink" title="让Chrome支持小于12px的字体？以及的区别？"></a>让Chrome支持小于12px的字体？以及的区别？</h2><ol><li>Zoom<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.span1</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css"> zoom: <span class="number">0.8</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.span2</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span> 10px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span2&quot;</span>&gt;</span> 12px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>-webkit-transform:scale()</li></ol><p>只对可以定义宽高的元素生效</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.span1</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css"> -webkit-<span class="attribute">transform</span>:<span class="built_in">scale</span>(<span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"> <span class="selector-class">.span2</span>&#123;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css"> <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css"> &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span1&quot;</span>&gt;</span> 10px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;span2&quot;</span>&gt;</span> 12px<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>-webkit-text-size-adjust:none|percentage|auto</p><h2 id="Css预编语言的理解？有哪些区别？"><a href="#Css预编语言的理解？有哪些区别？" class="headerlink" title="Css预编语言的理解？有哪些区别？"></a>Css预编语言的理解？有哪些区别？</h2><p>Css预处理器</p><p>拓展了Css语言，增加了变量、继承、逻辑判断、函数定义和运算、条件语句等功能，是Css的超集</p><p>sass&#x2F;less&#x2F;stylus</p><p>功能</p><ol><li>变量<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--less中的--&gt;</span></span><br><span class="line">@red:#c00;</span><br><span class="line">strong&#123;</span><br><span class="line"> color:@red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">&lt;!--sass中的--&gt;</span></span><br><span class="line">$red:#c00;</span><br><span class="line">strong&#123;</span><br><span class="line"> color:$red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>注意:最好不要定义重复的变量</li><li>嵌套<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--less中的--&gt;</span></span><br><span class="line">.box&#123;</span><br><span class="line"> .inner&#123;</span><br><span class="line">  color:#f00;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">&lt;!--sass中的--&gt;</span></span><br><span class="line">.box&#123;</span><br><span class="line"> .inner&#123;</span><br><span class="line">  color:#f00;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--less中的--&gt;</span></span><br><span class="line">.border-radius&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>作用域</li><li>代码混入<blockquote><p>将一部分样式抽离出来，作为单独定义的模块，被很多选择器重复使用</p></blockquote><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line"> <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>(<span class="variable">@color</span>: red) &#123;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line"> <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.heads-up</span> &#123;</span><br><span class="line"> <span class="selector-class">.alert</span>;</span><br><span class="line"> <span class="selector-class">.highlight</span>(red);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译后</span></span><br><span class="line"><span class="selector-class">.alert</span> &#123;</span><br><span class="line"> <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.heads-up</span> &#123;</span><br><span class="line"> <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line"> <span class="attribute">font-size</span>: <span class="number">1.2em</span>;</span><br><span class="line"> <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>sass<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@mixin</span> large-text &#123;</span><br><span class="line"> <span class="attribute">font</span>: &#123;</span><br><span class="line"> family: Arial;</span><br><span class="line"> size: <span class="number">20px</span>;</span><br><span class="line"> weight: bold;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="attribute">color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-title</span> &#123;</span><br><span class="line"> <span class="keyword">@include</span> large-text;</span><br><span class="line"> <span class="attribute">padding</span>: <span class="number">4px</span>;</span><br><span class="line"> <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>代码模块化<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./common&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./github-markdown&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./mixin&#x27;</span>;</span><br><span class="line"><span class="keyword">@import</span> <span class="string">&#x27;./variables&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="优化css"><a href="#优化css" class="headerlink" title="优化css"></a>优化css</h2><ol><li>内联首屏关键CSS</li><li>异步加载CSS</li><li>资源压缩:通过打包工具，压缩css代码</li><li>合理使用选择器<br>注意:不要嵌套太深，使用id选择器就没必要进行嵌套，通配符和属性选择器效率最低减少使用</li><li>减少使用昂贵的属性</li><li>不要使用@import</li><li>其他<br>减少重排，以及减少不必要的重绘</li></ol><p>小的icon图片转化为base64编码</p><p>CSS3动画或过渡尽量使用transform和opacity来实现</p><p>精灵图</p><p>避免对属性的反复重写</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>基本数据类型<br>Number,String,Boolean,Null,Undefined,Symbol</p><p>Number:八进制(0开头),十六进制(0x开头),科学计数法</p><p>Undefined:声明了变量但未对其初始化</p><p>typeof null &#x3D;&#x3D; ‘object’</p><p>Symbol:符号实例是唯一、不可变的</p><p>引用数据类型<br>Array,Object,Function</p><p>Object</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;Nicholas&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">29</span>,</span><br><span class="line">    <span class="number">5</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Array</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = []</span><br></pre></td></tr></table></figure><p>Function</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> sum1 = <span class="keyword">function</span> (<span class="params">num1,num2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">sum2</span> = (<span class="params">num1,num2</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他的引用类型:Date、RegExp、Map、Set</p><h3 id="存储区别"><a href="#存储区别" class="headerlink" title="存储区别"></a>存储区别</h3><p>基本数据类型存储在栈，引用数据类型存储在（引用类型对应的值）堆中，这个引用地址存放在栈中，地址储存在栈中。</p><p>赋值变量时的不同:</p><ol><li>简单类型赋值:生成相同的值，两个对象对应不同的地址</li><li>引用类型赋值:保存对象的内存赋值给另一个变量。</li></ol><h2 id="DOM常见的操作有哪些"><a href="#DOM常见的操作有哪些" class="headerlink" title="DOM常见的操作有哪些"></a>DOM常见的操作有哪些</h2><blockquote><p>DOM，创建节点，查询节点，更新节点，删除节点，添加节点<br>div、p元素节点，content文本节点，title属性节点，style样式节点</p></blockquote><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>createElement、createTextNode、createDocumentFragment、createAttribute</p><h3 id="获取节点"><a href="#获取节点" class="headerlink" title="获取节点"></a>获取节点</h3><p>每个Dom元素还有parentNode、childNodes、firstChild、lastChild、nextSibling、previousSibling等属性</p><h3 id="更新节点"><a href="#更新节点" class="headerlink" title="更新节点"></a>更新节点</h3><p>innerHtml、innerText、textContent、style</p><h3 id="添加节点-这个要知道"><a href="#添加节点-这个要知道" class="headerlink" title="添加节点(这个要知道)"></a>添加节点(这个要知道)</h3><p>appendChild、insertBefore(newElement,referenceElement):把子节点插入到指定位置,子节点会插入到referenceElement之前、setAttribute</p><h3 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h3><p>removeChild:拿到父节点，调用这个removeChild方法把它删掉</p><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><blockquote><p>BOM浏览器对象模型，作用和浏览器做一些交互效果<br>window:浏览器窗口对象，navigator:浏览器对象，screen:屏幕对象，location:地址栏对象，history:历史记录对象</p></blockquote><h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>窗口的控制</p><p>moveBy(x,y):从当前位置水平移动，垂直移动</p><p>moveTo(x,y):移动到相对于屏幕左上角的x,y坐标</p><p>resizeBy(width,height):以像素为单位，改变窗口的大小</p><p>resizeTo(w,h):窗体宽度调整为w,高度h</p><p>scrollBy(x,y):滚动窗口，x,y为像素，将横向滚动条移动到相对于窗口宽度的x个像素位置</p><p>scrollTo(x,y):滚动窗口，x,y,左移动x个像素，下移动y个像素</p><p>window.open(url)</p><p>window.close()</p><h3 id="location"><a href="#location" class="headerlink" title="location"></a>location</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">http:<span class="regexp">//</span>foouser:barpassword@www.wrox.com:<span class="number">80</span><span class="regexp">/WileyCDA/</span>?q=javascript<span class="comment">#contents</span></span><br></pre></td></tr></table></figure><p>属性</p><p>hash,host,hostname,href,pathname,port,search</p><p>方法</p><p>location.reload()</p><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h3><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>history.go()</p><p>history.back()</p><p>history.forward()</p><p>history.leng</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>null和undefined相等。两个都为引用类型，则比较他们是否指向同一个对象。存在NaN返回false</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>) <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>) <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果两个操作的都是对象，比较他们是不是同一个对象，古国两个操作数都指向同一个对象，则相等操作返回true</span></span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">name</span>:<span class="string">&quot;xxx&quot;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">name</span>:<span class="string">&quot;xxx&quot;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> result1 = (obj1 == obj2 ); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;&#x3D;</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> === <span class="literal">undefined</span>)<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D; ，最好使用&#x3D;&#x3D;&#x3D;</p><h2 id="typeof-和instanceof"><a href="#typeof-和instanceof" class="headerlink" title="typeof 和instanceof"></a>typeof 和instanceof</h2><p>typeof返回字符串，instanceof返回布尔值</p><p>typeof null 为object</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// instanceof 实现原理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">myInstanceof</span>(<span class="params">left, right</span>) &#123;</span><br><span class="line">    <span class="comment">// typeof false</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> left !== <span class="string">&#x27;object&#x27;</span> || left === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// getProtypeOf Object API</span></span><br><span class="line">    <span class="keyword">let</span> proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(left);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(proto === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(proto === right.<span class="property"><span class="keyword">prototype</span></span>) <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">// tru</span></span><br><span class="line">        e</span><br><span class="line">        proto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeof</span>(proto);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><blockquote><p>每个对象都有自己的原型对象<br><img src="/img_2.png" alt="img_2.png"><br><img src="/img_3.png" alt="img_3.png"><br><img src="/img_4.png" alt="img_4.png"><br><img src="/img_5.png" alt="img_5.png"></p></blockquote><h2 id="作用域链的理解"><a href="#作用域链的理解" class="headerlink" title="作用域链的理解"></a>作用域链的理解</h2><p>变量和函数生效的区域或集合</p><p>作用域链分为:全局作用域链，局部作用域链，块级作用域链</p><p>在一个最近的作用域中找不到，就会往上找</p><h2 id="this对象理解"><a href="#this对象理解" class="headerlink" title="this对象理解"></a>this对象理解</h2><p>分类:</p><ol><li>默认绑定</li><li>隐式绑定</li><li>new绑定</li><li>显示绑定</li></ol><p>优先级:new&gt;显示&gt;隐式&gt;默认</p><h3 id="默认绑定"><a href="#默认绑定" class="headerlink" title="默认绑定"></a>默认绑定</h3><p>非严格模式下绑定的为window，严格模式下绑定的为undefined</p><h3 id="隐式绑定"><a href="#隐式绑定" class="headerlink" title="隐式绑定"></a>隐式绑定</h3><p>函数还可以作为某个对象的方法调用，这时this指向这个上级对象</p><h3 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h3><p>通过new关键字生成一个实例对象，此时this指向这个实例对象。</p><p>通过构建函数new关键字生成一个实例对象，此时this指向这个实例对象。</p><p>一些特殊情况:<br>new 过程遇到return一个对象，此时this指向返回的对象。<br>返回简单类型的时候，this指向实例对象。<br>返回null的时候，this仍然指向实例对象（虽然null为对象）</p><h3 id="显示修改"><a href="#显示修改" class="headerlink" title="显示修改"></a>显示修改</h3><p>apply()、call()、bind()</p><h2 id="闭包的理解-闭包的使用场景"><a href="#闭包的理解-闭包的使用场景" class="headerlink" title="闭包的理解,闭包的使用场景"></a>闭包的理解,闭包的使用场景</h2><blockquote><p>内层函数访问外层函数作用域</p></blockquote><p>注意:不是在特定的任务中，使用闭包不明智，因为会造成内存泄露，处理速度也有负面影响</p><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>创建私有变量</li><li>延长变量的生命周期</li></ol><h4 id="柯里化函数"><a href="#柯里化函数" class="headerlink" title="柯里化函数"></a>柯里化函数</h4><h4 id="模拟私有方法"><a href="#模拟私有方法" class="headerlink" title="模拟私有方法"></a>模拟私有方法</h4><h2 id="JavaScript中的字符串常用方法"><a href="#JavaScript中的字符串常用方法" class="headerlink" title="JavaScript中的字符串常用方法"></a>JavaScript中的字符串常用方法</h2><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><p>增:<br>+,<code>$&#123;&#125;</code>,concat</p><p>删:<br>slice(),substr(),substring()</p><p>改:<br>trim()、trimLeft()、trimRight()、repeat()、toLowerCase()、toUpperCase()</p><p>查:<br>charAt()、indexOf()、startWith()、includes()</p><h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><p>split(“分隔符”):字符串&#x3D;&gt;数组</p><p>match()、search()、replace()</p><p>xxx.match(正则),xxx.search(正则):找到返回索引,没有返回-1,xxx.replace(‘匹配的内容’,’替换的内容’)</p><h2 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h2><p>增:<br>push()、unshift()、concat():创建新的数组，不改变原数组 、splice():传入三个参数开始位置，0(要删除的元素数量)、插入的元素，改变原数组，返回空数组</p><p>删:<br>pop()、shift()、splice()、slice():不会改变原数组</p><p>改:<br>splice()</p><p>查:<br>includes()、indexOf()、find()</p><p>排序:<br>reserve()、sort():接受一个比较函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">value1, value2</span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (value1 &lt; value2) &#123;</span><br><span class="line"> <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> values = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line">values.<span class="title function_">sort</span>(compare);</span><br><span class="line"><span class="title function_">alert</span>(values); <span class="comment">// 0,1,5,10,15</span></span><br></pre></td></tr></table></figure><p>转换:数组转化为字符串<br>join()</p><p>迭代方法:<br>some()、every()、filter()、map():映射、forEach()</p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><blockquote><p>在JavaScript是一门单线程语言,为了不阻塞，采用的是单线程非阻塞方法</p></blockquote><p>JS中，所有任务分为:同步任务和异步任务，放在不同的区域，同步放在主线程，异步放在任务队列中，当主线程只想完成，看任务队列是否有完成的</p><h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h3><p>异步任务又分为:微任务和红任务</p><p>常见的微任务:Promise.then、process.nextTick、MutaionObserver、使用Proxy对象替代</p><p>异步任务:耗时间的任务，如ajax、定时器、文件读取、网络请求、DOM操作、UI渲染</p><p>执行流程:<br>当执行一个红任务，如果遇到微任务把微任务放到微任务的事件队列中，当前宏任务执行完成后，会查看微任务的事件队列，然后将里面的所有微任务执行完。</p><h3 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h3><p>async为异步，await为等待异步方法执行，await后面是一个Promise对象，返回该对象的值</p><p>await就是将异步转化为同步，会阻塞后面代码</p><h2 id="本地存储方式"><a href="#本地存储方式" class="headerlink" title="本地存储方式"></a>本地存储方式</h2><p>localStorage、sessionStorage、cookie</p><p>应用场景:<br>cookie(标记用户与跟踪用户行为)、localStorage(长期保存在本地的数据)、sessionStorage(敏感账号一次性登录)、indexedDB(存储大量数据、在线文档给保存编辑历史)</p><h1 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h1><h2 id="引入了let、const，说说他们与var区别"><a href="#引入了let、const，说说他们与var区别" class="headerlink" title="引入了let、const，说说他们与var区别"></a>引入了let、const，说说他们与var区别</h2><p>区别:</p><ol><li>变量提升</li><li>暂时性死局:let和const有暂时性死局</li><li>块级作用域:let和const有</li><li>重复声明:var和let</li><li>修改生命的变量</li></ol><h2 id="拓展符"><a href="#拓展符" class="headerlink" title="拓展符"></a>拓展符</h2><p>是浅拷贝，没有Iterator接口的对象，使用拓展符会报错</p><h2 id="新增方法"><a href="#新增方法" class="headerlink" title="新增方法"></a>新增方法</h2><h3 id="构造函数新增的方法"><a href="#构造函数新增的方法" class="headerlink" title="构造函数新增的方法"></a>构造函数新增的方法</h3><p>Array.from()、Array.of():将他们转化为真正的数组</p><p>数组.copyWithin():target(必须，从该位置开始替换),start,end</p><p>find()、findIndex()、fill()</p><p>fill():</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>).<span class="title function_">fill</span>(<span class="number">7</span>)</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">fill</span>(<span class="number">7</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>entries()、keys()、values()</p><p>includes()</p><p>flat()、flatMap():将数组扁平化处理，返回一个新数组，对原数组没有影响</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 相当于[[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">flatMap</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>])</span><br><span class="line"><span class="comment">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h2 id="模块的导出和引入"><a href="#模块的导出和引入" class="headerlink" title="模块的导出和引入"></a>模块的导出和引入</h2><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h2 id="异步的解决方案"><a href="#异步的解决方案" class="headerlink" title="异步的解决方案"></a>异步的解决方案</h2><h2 id="Set和Map"><a href="#Set和Map" class="headerlink" title="Set和Map"></a>Set和Map</h2>]]></content>
      
      
      <categories>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2023/10/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/01react/"/>
      <url>/2023/10/04/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/01react/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="开发需要的依赖包"><a href="#开发需要的依赖包" class="headerlink" title="开发需要的依赖包"></a>开发需要的依赖包</h3><ol><li>react:包含react所包含的核心代码</li><li>react-dom:react渲染在不同的平所需要的核心代码</li><li>babel:将jsx –&gt; React</li></ol><h3 id="Hello-React案例"><a href="#Hello-React案例" class="headerlink" title="Hello React案例"></a>Hello React案例</h3><p>基本代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加这个type类型:text/babel,为了能将jsx语法转化为react代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> message = <span class="string">&#x27;Hello World&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.创建一个根元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">changeValue</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//修改数据</span></span></span><br><span class="line"><span class="language-javascript">        message = <span class="string">&#x27;Hello React&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//更新数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">rerender</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">rerender</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.渲染根元素（根组件）</span></span></span><br><span class="line"><span class="language-javascript">        root.<span class="title function_">render</span>((</span></span><br><span class="line"><span class="language-javascript">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;changeValue&#125;</span>&gt;</span>点击我切换数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">        ))</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">rerender</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>组件的开发</p><ol><li>定义一个类（类名大写，组件的名称是必须大写的，小写会被认为是HTML元素），继承自React.Component</li><li>实现当前组件的render函数<br>✓ render当中返回的jsx内容，就是之后React会帮助我们渲染的内容</li><li>依赖的数据放在类里面的构造函数里的state里面<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@18/umd/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">crossorigin</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react-dom@18/umd/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">super</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="string">&#x27;Hello React&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>一般在es6的环境下是严格模式，当使用text&#x2F;babel也为严格模式</li></ol><p>事件的处理（一个根本问题：this问题）</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">class App extends React.Component&#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">    super();</span><br><span class="line">    this.state = &#123;</span><br><span class="line">      message:&#x27;Hello React&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    //提前给需要this的方法绑定this</span><br><span class="line">    // this.changeContent = this.changeContent.bind(this)</span><br><span class="line">  &#125;</span><br><span class="line">  //方法</span><br><span class="line">  changeContent()&#123;</span><br><span class="line">    //这个函数里面进行了两步操作</span><br><span class="line">    //1.将state里面的message进行了改变2.自动进行了渲染</span><br><span class="line"></span><br><span class="line">    //this问题很重要</span><br><span class="line">    //这个this问题，这个相当于const changeContent = this.changeContent,changeContent()所以this为window/undefined</span><br><span class="line">    //所以要显示地绑定App的this const changeContent = this.changeContent.bind(this)</span><br><span class="line">    console.log(this)</span><br><span class="line">    this.setState(&#123;</span><br><span class="line">      message: &#x27;Hello World&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">    // this.render()</span><br><span class="line">  &#125;</span><br><span class="line">  render()&#123;</span><br><span class="line">    return (</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;this.state.message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeContent.bind(this)&#125;</span>&gt;</span>点击我修改文本<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="JSX语法"><a href="#JSX语法" class="headerlink" title="JSX语法"></a>JSX语法</h3><blockquote><p> JSX是一种JavaScript的语法扩展（eXtension），也在很多地方称之为JavaScript XML，因为看起就是一段XML语法；<br> 它用于描述我们的UI界面，并且其完成可以和JavaScript融合在一起使用；</p></blockquote><p>Jsx语法是可以赋值给变量的，总之非常灵活</p><p>就是html标签可以给一个变量赋值，在js中使用<br>但要在script中加上 <code>type=&quot;text/babel&quot;</code>，才能解析语法:进行语法的转换</p><h4 id="jsx的使用"><a href="#jsx的使用" class="headerlink" title="jsx的使用"></a>jsx的使用</h4><h5 id="jsx的书写规范"><a href="#jsx的书写规范" class="headerlink" title="jsx的书写规范"></a>jsx的书写规范</h5><p> 书写规范 </p><ol><li>jsx结构中只能有一个根元素</li><li>jsx结构通常会包裹一个(), 将整个jsx当做一个整体, 实现换行</li><li>jsx可以是单标签, 也可以双标签, 但是单标签必须以&#x2F;&gt;结尾</li></ol><h5 id="jsx的注释"><a href="#jsx的注释" class="headerlink" title="jsx的注释"></a>jsx的注释</h5><p>{ &#x2F;* JSX的注释写法 *&#x2F; }</p><h5 id="jsx嵌入变量作为子元素"><a href="#jsx嵌入变量作为子元素" class="headerlink" title="jsx嵌入变量作为子元素"></a>jsx嵌入变量作为子元素</h5><ol><li>变量为Number,String,Array</li><li>变量为null,undefined,Boolean,显示内容为空</li></ol><p>✓ 如果希望可以显示null、undefined、Boolean，那么需要转成字符串；<br>✓ 转换的方式有很多，比如toString方法、和空字符串拼接，String(变量)等方式；<br>3. Object对象类型不能作为子元素</p><h5 id="jsx嵌入表达式"><a href="#jsx嵌入表达式" class="headerlink" title="jsx嵌入表达式"></a>jsx嵌入表达式</h5><ol><li>运算表达式</li><li>三元运算符</li><li>执行一个函数</li></ol><h5 id="jsx使用"><a href="#jsx使用" class="headerlink" title="jsx使用"></a>jsx使用</h5><h5 id="jsx绑定属性-例如：title属性"><a href="#jsx绑定属性-例如：title属性" class="headerlink" title="jsx绑定属性(例如：title属性)"></a>jsx绑定属性(例如：title属性)</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">        <span class="attr">title</span>:<span class="string">&#x27;哈哈哈&#x27;</span>,</span><br><span class="line">        <span class="attr">imgUrl</span>:<span class="string">&#x27;https://ts1.cn.mm.bing.net/th/id/R-C.95bc299c3f1f0e69b9eb1d0772b14a98?rik=W5QLhXiERW4nLQ&amp;riu=http%3a%2f%2f20178405.s21i.faiusr.com%2f2%2fABUIABACGAAgoeLO-wUo4I3o2gEw8Qs4uAg.jpg&amp;ehk=N7Bxe9nqM08w4evC2kK6yyC%2bxIWTjdd6HgXsQYPbMj0%3d&amp;risl=&amp;pid=ImgRaw&amp;r=0&#x27;</span>,</span><br><span class="line">        <span class="attr">href</span>:<span class="string">&#x27;https:baidu.com&#x27;</span>,</span><br><span class="line">        <span class="attr">isActive</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">objStyle</span>:&#123;<span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,<span class="attr">fontSize</span>:<span class="string">&#x27;30px&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;title,imgUrl,href,isActive,objStyle&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">      <span class="comment">//1.class绑定写法一:字符串的拼接</span></span><br><span class="line">      <span class="keyword">const</span> className = <span class="string">`abc cba <span class="subst">$&#123;isActive?<span class="string">&#x27;active&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;</span>`</span></span><br><span class="line">      <span class="comment">//2. class绑定的写法二:将所有的class放入数组中</span></span><br><span class="line">      <span class="keyword">const</span> classList = [<span class="string">&#x27;abc&#x27;</span>,<span class="string">&#x27;bcd&#x27;</span>]</span><br><span class="line">      <span class="keyword">if</span>(isActive)classList.<span class="title function_">push</span>(<span class="string">&#x27;active&#x27;</span>)</span><br><span class="line">        <span class="comment">// 3.class绑定的写法三: 第三方库classnames -&gt; npm install classnames</span></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*1.基础属性的绑定*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">title</span>=<span class="string">&#123;title&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#123;imgUrl&#125;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*2.绑定class属性最好使用className*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;className&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;classList.join(</span>&#x27; &#x27;)&#125;&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  &#123;/*3.绑定style属性：绑定对象类型*/&#125;</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;,<span class="attr">fontSize:</span>&#x27;<span class="attr">30px</span>&#x27;&#125;&#125;&gt;</span>你好呀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;objStyle&#125;</span>&gt;</span>你好呀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#root&#x27;</span>))</span><br><span class="line">  root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>)</span><br></pre></td></tr></table></figure><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h3><h4 id="react事件绑定-推荐传入箭头函数"><a href="#react事件绑定-推荐传入箭头函数" class="headerlink" title="react事件绑定(推荐传入箭头函数)"></a>react事件绑定(推荐传入箭头函数)</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*1.bind绑定*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btn1Click.bind(this)&#125;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*2.this绑定第二种:es6的class file*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btn2Click&#125;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/*3.传入一个箭头函数,这个重要*/&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.btn3Click()&#125;&gt;按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前计数:&#123;this.state.counter&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="事件参数传递"><a href="#事件参数传递" class="headerlink" title="事件参数传递"></a>事件参数传递</h4><ol><li>获取event参数</li><li>获取更多参数<br>有更多参数时，我们最好的方式就是传入一个箭头函数，主动执行的事件函数，并且传入相关的其他参数；<img src="/img.png" alt="img.png"></li></ol><h4 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h4><p>◼ 常见的条件渲染的方式有哪些呢？</p><ol><li>◼ 方式一：条件判断语句<br> 适合逻辑较多的情况</li><li>◼ 方式二：三元运算符<br> 适合逻辑比较简单</li><li>◼ 方式三：与运算符&amp;&amp;<br> 适合如果条件成立，渲染某一个组件；如果条件不成立，什么内容也不渲染<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">super</span>();</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">       <span class="attr">isReady</span>:<span class="literal">false</span>,</span><br><span class="line">       <span class="attr">friend</span>:<span class="literal">undefined</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123;isReady,friend&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">     <span class="keyword">let</span> showElement = <span class="literal">null</span></span><br><span class="line">     <span class="keyword">if</span>(isReady)&#123;</span><br><span class="line">       showElement = <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好呀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">     &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">       showElement = <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>再见<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> (</span><br><span class="line">             <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               /*if渲染*/</span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;showElement&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               &#123;/*三元运算符*/&#125;</span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;isReady?<span class="tag">&lt;<span class="name">h2</span>&gt;</span>你好呀<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>:<span class="tag">&lt;<span class="name">h2</span>&gt;</span>再见<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">               &#123;/*逻辑&amp;&amp;*/&#125;</span></span><br><span class="line"><span class="language-xml">               <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;friend &amp;&amp; <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;friend.name + &quot; &quot; + friend.desc&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">     );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="脚手架开发"><a href="#脚手架开发" class="headerlink" title="脚手架开发"></a>脚手架开发</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>一、第一种方式</p><ol><li>先全局安装脚手架工具包</li></ol><p>命令：pnpm i -g create-react-app</p><ol start="2"><li>用脚手架工具来创建项目</li></ol><p>命令：create-react-app + 项目名称</p><p>二、第二种方式<br>创建方式2<br>直接使用npx来创建项目</p><p>命令：</p><p>npx create-react-app + 项目名称</p><p>解释：</p><p>npx create-react-app 是固定命令，create-react-app 是 React 脚手架的名称</p><h5 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h5><p><img src="/img_3.png" alt="img_3.png"></p><h5 id="脚手架的webpack"><a href="#脚手架的webpack" class="headerlink" title="脚手架的webpack"></a>脚手架的webpack</h5><p>![img_4.png](img_4.</p><h4 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h4><p>如何展示列表呢？<br> 在React中，展示列表最多的方式就是使用数组的map高阶函数；</p><p>◼ 很多时候我们在展示一个数组中的数据之前，需要先对它进行一些处理：</p><p> 比如过滤掉一些内容：filter函数<br> 比如截取数组中的一部分内容：slice函数</p><h4 id="脚手架-1"><a href="#脚手架-1" class="headerlink" title="脚手架"></a>脚手架</h4><p><img src="/img_1.png" alt="img_1.png"><br>前端脚手架<br><img src="/img_2.png" alt="img_2.png"><br>使用前端脚手架创建项目</p><h3 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><blockquote><p>概念和vue一样<br>组件的分类:函数组件，类组件。无状态组件，有状态组件。展示性组件，容器性组件</p></blockquote><p>类组件的要求（怎么定义前面写了）</p><blockquote><ol><li>名称大写字符开头</li><li>继承React.Component</li><li>实现render函数</li></ol></blockquote><p>函数组件<br><img src="/img_7.png" alt="img_7.png"></p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>最常用的<br><img src="/img_8.png" alt="img_8.png"></p><p><code>Constructor</code><br>如果不初始化 state 或不进行方法绑定，则不需要为 React 组件实现构造函数。<br>constructor中通常只做两件事情：</p><ol><li>通过给this.state赋值对象来初始化内部的state；</li><li>为事件绑定实例（this）；</li></ol><p><code>componentDidMount</code><br>componentDidMount()会在组件挂载后（插入 DOM 树中）立即调用。<br>componentDidMount中通常进行哪里操作呢？<br>依赖于DOM的操作可以在这里进行；</p><ol><li>在此处发送网络请求就最好的地方；（官方建议）</li><li>可以在此处添加一些订阅（会在componentWillUnmount取消订阅）；</li></ol><p><code>componentDidUpdate</code><br>componentDidUpdate()会在<code>更新后会被立即调用</code>，首次渲染不会执行此方法。<br>当组件更新后，可以在此处对 DOM 进行操作；</p><ol><li>如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求；（例如，当 props 未发生变化时，则不会执行网络请求）。</li></ol><p><code>componentWillUnmount</code><br>componentWillUnmount()会在组件卸载及销毁之前直接调用。<br>在此方法中执行必要的清理操作；</p><ol><li>例如，清除 timer，取消网络请求或清除在componentDidMount() 中创建的订阅等；</li></ol><p>不常用的插槽<br><img src="/img_9.png" alt="img_9.png"></p><h4 id="组件之间的通信"><a href="#组件之间的通信" class="headerlink" title="组件之间的通信"></a>组件之间的通信</h4><h5 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> (</span><br><span class="line">           <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">Header</span> <span class="attr">title</span>=<span class="string">&quot;我是头部呀&quot;</span> <span class="attr">age</span>=<span class="string">&#123;18&#125;</span> <span class="attr">height</span>=<span class="string">&#123;1.8&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">Main</span>&gt;</span><span class="tag">&lt;/<span class="name">Main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Header</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span> = props;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;title, age, height&#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line"></span><br><span class="line">              <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">h2</span>&gt;</span>展示父组件<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;title&#125;&#123;age&#125;&#123;height&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传递来的参数默认值</span></span><br><span class="line"><span class="title class_">Header</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">   <span class="attr">title</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>:<span class="number">19</span>,</span><br><span class="line">   <span class="attr">height</span>:<span class="number">1.9</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Header</span>;</span><br></pre></td></tr></table></figure><p>类型验证（ts&#x2F;prop-types）’</p><p>需要的时候查文档<br><a href="https://zh-hans.reactjs.org/docs/typechecking-with-proptypes.html">https://zh-hans.reactjs.org/docs/typechecking-with-proptypes.html</a></p><p>当没有传递的时候希望有默认值的时候:defaultProps</p><h5 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h5><p>在React中同样是通过props传递消息，只是让父组件给子组件传递一个回调函数，在子组件中调用这个函数即可；</p><p>父亲给儿子传递一个函数，儿子进行调用就可以了</p><p>计时器的案例(自己去看源码)</p><h5 id="组件通信案例（tab栏切换）"><a href="#组件通信案例（tab栏切换）" class="headerlink" title="组件通信案例（tab栏切换）"></a>组件通信案例（tab栏切换）</h5><p>自行查看</p><h5 id="React中的插槽"><a href="#React中的插槽" class="headerlink" title="React中的插槽"></a>React中的插槽</h5><ol><li>组件的children元素</li><li>props属性传递React元素</li></ol><h6 id="组件的children"><a href="#组件的children" class="headerlink" title="组件的children"></a>组件的children</h6><p>每个组件都可以获取到props.children:包含组件的开始标签和结束标签</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Nav</span> <span class="keyword">from</span> <span class="string">&quot;./nav&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Nav</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.module.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Nav</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;children&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;nav-bar&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children[0]&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children[1]&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;right&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;children[2]&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Nav</span>;</span><br></pre></td></tr></table></figure><h6 id="props来实现"><a href="#props来实现" class="headerlink" title="props来实现"></a>props来实现</h6><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./NavBar.css&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NavBar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;left,center,right&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;nav-bar&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;left&#x27;</span>&gt;</span>&#123;left&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;center&#x27;</span>&gt;</span>&#123;center&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;right&#x27;</span>&gt;</span>&#123;right&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">NavBar</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NavBar</span> <span class="keyword">from</span> <span class="string">&quot;./NavBar&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> left = <span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">const</span> center = <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">const</span> right =  <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">NavBar</span> <span class="attr">left</span>=<span class="string">&#123;left&#125;</span> <span class="attr">center</span>=<span class="string">&#123;center&#125;</span> <span class="attr">right</span>=<span class="string">&#123;right&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">NavBar</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App2</span>;</span><br></pre></td></tr></table></figure><h5 id="非父子间的通信"><a href="#非父子间的通信" class="headerlink" title="非父子间的通信"></a>非父子间的通信</h5><h6 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h6><blockquote><p>数据共享</p></blockquote><p>相关API</p><ol><li>React.createContext<br>创建一个需要共享的Context对象</li><li>Context.Provider<ol><li>每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化：</li><li>Provider 接收一个value属性，传递给消费组件；</li><li>一个 Provider 可以和多个消费组件有对应关系；</li><li>多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据；</li><li>当 Provider 的value值发生变化时，它内部的所有消费组件都会重新渲染；</li></ol></li><li>Context.Consumer<br>这里需要 函数作为子元素（function as child）这种做法；</li><li>Class.contextType<br>MyClass.contextType &#x3D; MyContext</li></ol><p>使用步骤</p><ol><li>创建上下文（Context）对象<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//设置上下文，创建Context对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ThemeContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ThemeContext</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="comment">//设置上下文，创建Context对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">UserContext</span></span><br></pre></td></tr></table></figure></li><li>第二步操作: 通过ThemeContext中Provider中value属性为后代提供数据，Context.Provider<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./Home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeBanner</span> <span class="keyword">from</span> <span class="string">&quot;./HomeBanner&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Profile</span> <span class="keyword">from</span> <span class="string">&quot;./Profile&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/user-context&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ThemeContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/theme-context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">info</span>:&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;你好&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">99</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;info&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">UserContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;nickname:</span>&#x27;<span class="attr">kobe</span>&#x27;,<span class="attr">age:19</span>&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ThemeContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;&#123;color:</span>&#x27;<span class="attr">red</span>&#x27;,<span class="attr">size:</span>&#x27;<span class="attr">30</span>&#x27;&#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Home</span> &#123;<span class="attr">...info</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">Home</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ThemeContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">UserContext.Provider</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Profile</span>&gt;</span><span class="tag">&lt;/<span class="name">Profile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App2</span>;</span><br></pre></td></tr></table></figure></li><li>第三步操作: 设置组件的contextType为某一个Context<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">UserContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/user-context&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ThemeContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/theme-context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeInfo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="comment">//第四步：获取数据，使用数据(这个是类组件中的写法)</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">UserContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#123;</span></span><br><span class="line"><span class="language-xml">                        value =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                            return <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Info User:&#123;value.nickname&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#125;</span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">UserContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">HomeInfo</span>.<span class="property">contextType</span> = <span class="title class_">ThemeContext</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HomeInfo</span>;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">函数组件的操作</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ThemeContext</span> <span class="keyword">from</span> <span class="string">&quot;./context/theme-context&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">HomeBanner</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;/*函数式组件使用Context共享数据*/&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    value =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">                        return <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Banner theme:&#123;value.color&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    &#125;</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">ThemeContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HomeBanner</span>;</span><br></pre></td></tr></table></figure></li><li>第四步操作: 获取数据, 并且使用数据</li></ol><h4 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h4><p>渲染机制</p><p>Jsx -&gt; 虚拟Dom -&gt; 真实Dom</p><p>react的更新机制</p><p>props&#x2F;state改变 -&gt; render函数重新执行 -&gt; 产生新的DOM树 -&gt; 新旧DOM树进行diff -&gt; 计算出差异进行更新 -&gt; 更新到真实DOM</p><h5 id="keys优化"><a href="#keys优化" class="headerlink" title="keys优化"></a>keys优化</h5><p>遍历列表，需要加上key</p><p>注意:</p><ol><li>key是唯一的</li><li>不要用随机数</li><li>使用index，不会做优化</li></ol><h5 id="render函数优化"><a href="#render函数优化" class="headerlink" title="render函数优化"></a>render函数优化</h5><p>当更改一个数据，组件就需要render，进行diff算法，性能会很低，所以有了解决方法</p><p>shouldComponentUpdate,接收两个参数:nextProps(修改后的props),nextState(修改后的state),它的<br>主要作用是判断props和state数据是否发生改变，来决定true还是false</p><p>返回true，就会render，返回false，不会render</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">shouldComponentUpdate</span>(<span class="params">nextProps</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">counter</span> !== nextProps.<span class="property">counter</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h4><p>如果要是手动的实现上面的行为，会很繁琐，react已经配置好了，再PureComponent,就是在里面弄就可以了（rpc）</p><h4 id="高阶组件memo"><a href="#高阶组件memo" class="headerlink" title="高阶组件memo"></a>高阶组件memo</h4><p>类可以通过PureComponent来实现，函数组件可以用memo来实现，在想要实现上述的效果的函数组件外面包一层memo</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; memo &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Profile</span> = <span class="title function_">memo</span>(<span class="keyword">function</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;profile render&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Profile: &#123;props.message&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Profile</span></span><br></pre></td></tr></table></figure><h4 id="不可变的数据"><a href="#不可变的数据" class="headerlink" title="不可变的数据"></a>不可变的数据</h4><p>就是说不能直接改变this.setState里面的数据，可以进行拷贝（浅拷贝）</p><h4 id="获取DOM方式refs"><a href="#获取DOM方式refs" class="headerlink" title="获取DOM方式refs"></a>获取DOM方式refs</h4><blockquote><p>通常不需要和不建议直接操作DOM原生</p></blockquote><h3 id="原理类的"><a href="#原理类的" class="headerlink" title="原理类的"></a>原理类的</h3><h4 id="为什么使用setState"><a href="#为什么使用setState" class="headerlink" title="为什么使用setState"></a>为什么使用setState</h4><h4 id="vue3和react中在数据上的区别"><a href="#vue3和react中在数据上的区别" class="headerlink" title="vue3和react中在数据上的区别"></a>vue3和react中在数据上的区别</h4><ol><li>vue3是数据劫持,通过对数据进行劫持来监听数据的变化</li><li>React中没有数据劫持,必须通过setState来告知React数据已经发生了变化；</li></ol><h4 id="React的setState是异步更新的优点"><a href="#React的setState是异步更新的优点" class="headerlink" title="React的setState是异步更新的优点"></a>React的setState是异步更新的优点</h4><p>setState设计为异步，可以显著的提升性能；</p><ol><li>如果每次调用 setState都进行一次更新，那么意味着render函数会被频繁调用，界面重新渲染，这样效率是很低的；</li></ol><p>最好的办法应该是获取到多个更新，之后进行批量更新；<br>2. 如果同步更新了state，但是还没有执行render函数，那么state和props不能保持同步；<br>state和props不能保持一致性，会在开发中产生很多的问题；</p><h4 id="setState的使用"><a href="#setState的使用" class="headerlink" title="setState的使用"></a>setState的使用</h4><p>setState接受两个参数：第二个参数是一个回调函数，这个回调函数会在更新后会执行；<br>格式如下：setState(partialState, callback)</p><h4 id="setState咋18前和后区别"><a href="#setState咋18前和后区别" class="headerlink" title="setState咋18前和后区别"></a>setState咋18前和后区别</h4><ol><li><p>前</p><p>其实分成两种情况：</p><ol><li>在组件生命周期或React合成事件中，setState是异步；</li><li>在setTimeout或者原生dom事件中，setState是同步；</li></ol></li><li><p>后</p></li></ol><p>所有的都为异步的</p><h3 id="在react中写css的方案"><a href="#在react中写css的方案" class="headerlink" title="在react中写css的方案"></a>在react中写css的方案</h3><h4 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h4><ol><li>style 接受一个采用小驼峰命名属性的 JavaScript 对象，，而不是 CSS 字符串；</li><li>并且可以引用state中的状态来设置相关的样式；</li></ol><p>缺点</p><ol><li>写法上都需要使用驼峰标识</li><li>某些样式没有提示</li><li>大量的样式, 代码混乱</li><li>某些样式无法编写(比如伪类&#x2F;伪元素)<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">Component</span>, <span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Index</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            titleSize :<span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addTitleSize</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">titleSize</span>:<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">titleSize</span> +<span class="number">2</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>this.addTitleSize()&#125;&gt;点击我增加字体大小<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&#123;&#123;fontSize:</span>`$&#123;<span class="attr">this.state.titleSize</span>&#125;<span class="attr">px</span>`,<span class="attr">color:</span>&quot;<span class="attr">red</span>&quot;&#125;&#125;&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Index</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="单独的css文件引入"><a href="#单独的css文件引入" class="headerlink" title="单独的css文件引入"></a>单独的css文件引入</h4><p>和以前写css一样</p><p>缺点：</p><ol><li>这个css文件没有作用域，是全局生效的</li><li>样式之间会重叠</li></ol><h4 id="CSS-Module写法"><a href="#CSS-Module写法" class="headerlink" title="CSS Module写法"></a>CSS Module写法</h4><blockquote><p>css modules并不是React特有的解决方案，而是所有使用了类似于webpack配置的环境下都可以使用的。<br> 如果在其他项目中使用它，那么我们需要自己来进行配置，比如配置webpack.config.js中的modules: true等。</p></blockquote><p>好处解决了局部作用域问题</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">index<span class="selector-class">.module</span><span class="selector-class">.css</span></span><br><span class="line"><span class="selector-class">.title</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">使用</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;./index.module.css&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Index</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&#123;home.title&#125;</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&#123;home.content&#125;</span>&gt;</span>哈哈，我是内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Index</span>;</span><br></pre></td></tr></table></figure><h4 id="CSS-in-JS-写法"><a href="#CSS-in-JS-写法" class="headerlink" title="CSS in JS 写法"></a>CSS in JS 写法</h4><h5 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个相当于调用了foo函数，返回的是一个数组 ：[ [ &#x27;my name is &#x27;, &#x27;,age is &#x27;, &#x27;&#x27; ], &#x27;ymj&#x27;, 18 ]</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;ymj&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">...arg</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>,age is <span class="subst">$&#123;age&#125;</span>`</span></span><br></pre></td></tr></table></figure><h5 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">css_jsx</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 基本的使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HomeWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  .top&#123;</span></span><br><span class="line"><span class="string">    .banner&#123;</span></span><br><span class="line"><span class="string">      font-size: 22px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">  .bottom&#123;</span></span><br><span class="line"><span class="string">    .product_list&#123;</span></span><br><span class="line"><span class="string">      .product_item1&#123;</span></span><br><span class="line"><span class="string">        color: red;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      .product_item2&#123;</span></span><br><span class="line"><span class="string">        color: pink;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      .product_item3&#123;</span></span><br><span class="line"><span class="string">        color: #61dafb;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">HomeWrapper</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./homs_css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">HomeWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        我是轮播图</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;product_list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item1&quot;</span>&gt;</span>商品1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item2&quot;</span>&gt;</span>商品2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item3&quot;</span>&gt;</span>商品3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">HomeWrapper</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure><p>还可以进行拆分(子元素单独抽取到一个样式文件里面)</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 基本的使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HomeWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  .top&#123;</span></span><br><span class="line"><span class="string">    .banner&#123;</span></span><br><span class="line"><span class="string">      font-size: 22px;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">BottomWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">    .product_list&#123;</span></span><br><span class="line"><span class="string">      .product_item1&#123;</span></span><br><span class="line"><span class="string">        color: red;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      .product_item2&#123;</span></span><br><span class="line"><span class="string">        color: pink;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      .product_item3&#123;</span></span><br><span class="line"><span class="string">        color: #61dafb;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h5 id="在css中使用js-props的使用"><a href="#在css中使用js-props的使用" class="headerlink" title="在css中使用js(props的使用)"></a>在css中使用js(props的使用)</h5><h6 id="使用props"><a href="#使用props" class="headerlink" title="使用props"></a>使用props</h6><p>非常方便，别的方案会很麻烦<br>外部的组件给样式组件传入值，来进行在css中使用js的变量，使用函数的形式实现</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;styled-components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 基本的使用</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HomeWrapper</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">  .top&#123;</span></span><br><span class="line"><span class="string">    .banner&#123;</span></span><br><span class="line"><span class="string">      font-size: <span class="subst">$&#123;props=&gt;props.size&#125;</span>px;</span></span><br><span class="line"><span class="string">      color:<span class="subst">$&#123;props=&gt;props.color&#125;</span>;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">BottomWrapper</span>, <span class="title class_">HomeWrapper</span>&#125; <span class="keyword">from</span> <span class="string">&quot;./homs_css&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">size</span>:<span class="number">30</span>,</span><br><span class="line">            <span class="attr">color</span>:<span class="string">&quot;yellow&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;color,size&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">HomeWrapper</span> <span class="attr">color</span>=<span class="string">&#123;color&#125;</span> <span class="attr">size</span>=<span class="string">&#123;size&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        我是轮播图</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">BottomWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;product_list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item1&quot;</span>&gt;</span>商品1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item2&quot;</span>&gt;</span>商品2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;product_item3&quot;</span>&gt;</span>商品3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">BottomWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">HomeWrapper</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br></pre></td></tr></table></figure><h6 id="使用attrs给标签字符串提供属性"><a href="#使用attrs给标签字符串提供属性" class="headerlink" title="使用attrs给标签字符串提供属性"></a>使用attrs给标签字符串提供属性</h6><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 基本的使用</span></span><br><span class="line"><span class="comment">//如果没有传递元素的话，可以添加默认值</span></span><br><span class="line"><span class="comment">// 使用styled.div.attrs来实现</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">HomeWrapper</span> = styled.<span class="property">div</span>.<span class="title function_">attrs</span>(<span class="function"><span class="params">props</span>=&gt;</span>(&#123;</span><br><span class="line">    <span class="attr">tcolor</span>:props.<span class="property">color</span>||<span class="string">&quot;blue&quot;</span></span><br><span class="line">&#125;))<span class="string">`</span></span><br><span class="line"><span class="string">  .top&#123;</span></span><br><span class="line"><span class="string">    .banner&#123;</span></span><br><span class="line"><span class="string">      font-size: <span class="subst">$&#123;props=&gt;props.size&#125;</span>px;</span></span><br><span class="line"><span class="string">      color:<span class="subst">$&#123;props=&gt;props.tcolor&#125;</span>;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h5 id="设置全局的样式"><a href="#设置全局的样式" class="headerlink" title="设置全局的样式"></a>设置全局的样式</h5><p>将全局的样式放在一个文件里面，需要什么的时候引入即可</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//variables.js文件中，当使用公共主题色的时候引入即可</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> primaryColor = <span class="string">&quot;#ff8822&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> secondColor = <span class="string">&quot;#ff7788&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> smallSize = <span class="string">&quot;12px&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> middleSize = <span class="string">&quot;14px&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> largeSize = <span class="string">&quot;18px&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>也可以使用主题提供</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">ThemeProvider theme=</span><span class="template-variable">&#123;&#123;<span class="name">color:</span><span class="string">&quot;red&quot;</span>,size:<span class="string">&quot;19px&quot;</span>&#125;&#125;</span><span class="language-xml">&gt;<span class="tag">&lt;/<span class="name">ThemeProvider</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//样式的继承</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HYButton</span> = styled.<span class="property">button</span><span class="string">`</span></span><br><span class="line"><span class="string">  padding: 8px 30px;</span></span><br><span class="line"><span class="string">  border-radius: 5px;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HYWarnButton</span> = styled.<span class="title function_">button</span>(<span class="title class_">HYButton</span>)<span class="string">`</span></span><br><span class="line"><span class="string">  background-color:red ;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><h4 id="动态添加class"><a href="#动态添加class" class="headerlink" title="动态添加class"></a>动态添加class</h4><p>安装一个库 classnames<br><img src="/img_10.png" alt="img_10.png"></p><h2 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h2><h3 id="js的纯函数"><a href="#js的纯函数" class="headerlink" title="js的纯函数"></a>js的纯函数</h3><blockquote><ol><li>确定的输入，一定会产生确定的输出；</li><li>函数在执行过程中，不能产生副作用；</li></ol></blockquote><p>副作用：调用了这个函数，对外部产生了一些影响（1.依赖外部的变量，修改外部的变量，修改参数或者改变外部的存储）</p><p>React中就要求我们无论是函数还是class声明一个组件，这个组件都必须像纯函数一样，<code>保护它们的props不被修改</code></p><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><h3 id="action"><a href="#action" class="headerlink" title="action"></a>action</h3><p>数据的变化是通过action来进行更新，action来描述这次更新的type和content</p><p><img src="C:\Users\mm\AppData\Roaming\Typora\typora-user-images\image-20231004181316074.png" alt="image-20231004181316074"></p><h3 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a>reducer</h3><p>作用：将state和action联系在一起，将传入的state和action返回一个新的state</p><h4 id="创建store"><a href="#创建store" class="headerlink" title="创建store"></a>创建store</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store/index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; createStore &#125; = <span class="built_in">require</span>(<span class="string">&#x27;redux&#x27;</span>)</span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义reducer函数:纯函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = initialState,action</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(action.<span class="property">type</span> === <span class="string">&#x27;change_name&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;...state,<span class="attr">name</span>:action.<span class="property">name</span>&#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(action.<span class="property">type</span> === <span class="string">&#x27;change_age&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;...state,<span class="attr">age</span>:action.<span class="property">age</span> + state.<span class="property">age</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回的是新的数据</span></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建的仓库</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = store</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用redux里面的数据</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="built_in">require</span>(<span class="string">&#x27;./store/index&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>())</span><br><span class="line"><span class="comment">//修改redux里面的数据:使用action</span></span><br><span class="line"><span class="keyword">const</span> nameAction = &#123;<span class="attr">type</span>:<span class="string">&#x27;change_name&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;kobe&#x27;</span>&#125;</span><br><span class="line">store.<span class="title function_">dispatch</span>(nameAction)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>())</span><br><span class="line"><span class="comment">//修改年龄</span></span><br><span class="line"><span class="keyword">const</span> ageAction = &#123;<span class="attr">type</span>:<span class="string">&#x27;change_age&#x27;</span>,<span class="attr">age</span>:<span class="number">10</span>&#125;</span><br><span class="line">store.<span class="title function_">dispatch</span>(ageAction)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(store.<span class="title function_">getState</span>())</span><br></pre></td></tr></table></figure><p>代码优化</p><ol><li><p>将action生成过程放在了函数里面</p></li><li><p>将定义的函数放在了store&#x2F;actionCreators.js</p></li><li><p>actionCreators.js和reducer.js使用的字符串是一样的，所以抽取为了一个store&#x2F;constants.js</p></li><li><p>将reducer函数封装在了一个reducer.js文件中</p></li><li><p>index.js创建仓库</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//actionCreators.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">CHANGE_AGE</span>, <span class="variable constant_">CHANGE_NAME</span>&#125; = <span class="built_in">require</span>(<span class="string">&quot;./constant&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeNameAction</span> = (<span class="params">name</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">CHANGE_NAME</span>,name&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addNumAction</span> = (<span class="params">age</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">type</span>:<span class="variable constant_">CHANGE_AGE</span>,age&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    changeNameAction,</span><br><span class="line">    addNumAction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//constant.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CHANGE_NAME</span> = <span class="string">&#x27;change_name&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CHANGE_AGE</span> = <span class="string">&#x27;change_age&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="variable constant_">CHANGE_AGE</span>,</span><br><span class="line">    <span class="variable constant_">CHANGE_NAME</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;createStore&#125; = <span class="built_in">require</span>(<span class="string">&#x27;redux&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> reducer = <span class="built_in">require</span>(<span class="string">&#x27;./reducer&#x27;</span>)</span><br><span class="line"><span class="comment">//创建的仓库</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = store</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//reducer.js</span></span><br><span class="line"><span class="keyword">const</span> &#123;<span class="variable constant_">CHANGE_NAME</span>, <span class="variable constant_">CHANGE_AGE</span>&#125; = <span class="built_in">require</span>(<span class="string">&quot;./constant&quot;</span>);</span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义reducer函数:纯函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reducer</span>(<span class="params">state = initialState,action</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.<span class="property">type</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">CHANGE_NAME</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state,<span class="attr">name</span>:action.<span class="property">name</span>&#125;</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">CHANGE_AGE</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;...state,<span class="attr">age</span>:action.<span class="property">age</span> + state.<span class="property">age</span>&#125;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = reducer</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用redux</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="built_in">require</span>(<span class="string">&#x27;./store/index&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123;addNumAction,changeNameAction&#125; = <span class="built_in">require</span>(<span class="string">&#x27;./store/actionCreators&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.<span class="title function_">subscribe</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;订阅数据变化&quot;</span>,store.<span class="title function_">getState</span>())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">changeNameAction</span>(<span class="string">&#x27;kobe&#x27;</span>))</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">changeNameAction</span>(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">changeNameAction</span>(<span class="string">&#x27;ymj&#x27;</span>))</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">addNumAction</span>(<span class="number">10</span>))</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">addNumAction</span>(<span class="number">20</span>))</span><br><span class="line">store.<span class="title function_">dispatch</span>(<span class="title function_">addNumAction</span>(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消订阅</span></span><br><span class="line"><span class="title function_">unsubscribe</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="redux三大原则"><a href="#redux三大原则" class="headerlink" title="redux三大原则"></a>redux三大原则</h4><ol><li><p>只有一个store</p></li><li><p>state是只读的，只能通过action来进行修改，便于集中处理</p></li><li><p>使用纯函数修改</p><p>![Screenshot_2023-10-04-19-46-43-84_846b44643ec609f](C:\Users\mm\Documents\Tencent Files\3495314473\FileRecv\MobileFile\Screenshot_2023-10-04-19-46-43-84_846b44643ec609f.jpg)</p></li></ol></li></ol><p><img src="C:\Users\mm\AppData\Roaming\Typora\typora-user-images\image-20231004195245697.png" alt="image-20231004195245697"></p><p><strong>拓展</strong></p><p>node对es6模块化的支持</p><p>在package.json中添加属性:”type”:”module”</p><p><em><strong>导入文件时，要加上js后缀</strong></em></p><h3 id="react-redux的使用"><a href="#react-redux的使用" class="headerlink" title="react-redux的使用"></a>react-redux的使用</h3><blockquote><p>它提供了Provider和connect简化了代码的书写，它封装了许多步骤。</p><p>connect将redux里面的state映射到组件里的props,dispatch也映射到props</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在组件里面的使用redux里面的内容，</span></span><br><span class="line"><span class="comment">//将仓库里的state映射出来</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">state</span>)=&gt;(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">counter</span>:state.<span class="property">counter</span>,</span><br><span class="line">        <span class="attr">banner</span>:state.<span class="property">banner</span>,</span><br><span class="line">        <span class="attr">recommend</span>:state.<span class="property">recommend</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">//将dispatch映射出来</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapDispatchToProps</span> = (<span class="params">dispatch</span>)=&gt;(&#123;</span><br><span class="line">    <span class="title function_">addNumber</span>(<span class="params">num</span>)&#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title function_">addNumberAction</span>(num))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">descNumber</span>(<span class="params">num</span>)&#123;</span><br><span class="line">        <span class="title function_">dispatch</span>(<span class="title function_">subNumberAction</span>(num))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="title class_">About</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js提供是哪个store</span></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol><li>下载npm i react-redux</li><li>如上面的代码书写</li></ol><h4 id="异步操作"><a href="#异步操作" class="headerlink" title="异步操作"></a>异步操作</h4><blockquote><p>网络请求到的数据也属于我们状态管理的一部分，更好的一种方式应该是将其也交给redux来管理</p></blockquote><p><code>npm i redux-thunk</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//actionCreater.js</span></span><br><span class="line"><span class="comment">//请求异步数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fetchHomeMultidataAction</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">dispatch,getState</span>)&#123;</span><br><span class="line">      axios.<span class="title function_">get</span>(<span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> banner = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">banner</span>.<span class="property">list</span></span><br><span class="line">      <span class="keyword">const</span> recommend = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">recommend</span>.<span class="property">list</span></span><br><span class="line">        </span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">changeBannerAction</span>(banner))</span><br><span class="line">      <span class="title function_">dispatch</span>(<span class="title function_">changeRecommendAction</span>(recommend))</span><br><span class="line">    &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中dispatch一般派发的是js对象，但是可以使用react-thunk来派发函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//让dispatch派发函数，一般是派发的是对象</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer,<span class="title function_">composeEnhancers</span>(<span class="title function_">applyMiddleware</span>(thunk)))</span><br></pre></td></tr></table></figure><h3 id="React工具（devtools）"><a href="#React工具（devtools）" class="headerlink" title="React工具（devtools）"></a>React工具（devtools）</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在导出仓库的时候使用redux-devtools</span></span><br><span class="line"><span class="keyword">import</span> &#123;applyMiddleware, compose, createStore&#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="comment">//redux-devtools</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers =  <span class="variable language_">window</span>.<span class="title function_">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span>(&#123;<span class="attr">trace</span>: <span class="literal">true</span>&#125;) || compose;</span><br></pre></td></tr></table></figure><h3 id="Reducer的拆分"><a href="#Reducer的拆分" class="headerlink" title="Reducer的拆分"></a>Reducer的拆分</h3><blockquote><p>为什么拆分</p><p>因为每一个组件可能有自己的逻辑，业务也会很复杂，所以为了区分将他们进行拆分</p></blockquote><ol><li><p>我们先抽取一个对counter处理的reducer；</p></li><li><p>再抽取一个对home处理的reducer；</p></li><li><p>将它们合并起来（使用combineReducers）；</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//counter文件夹里面是原来的store里面的内容</span></span><br><span class="line"><span class="comment">//home文件夹里是原来的store里面的内容</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//store/index.js</span></span><br><span class="line"><span class="comment">//在导出仓库的时候使用redux-devtools</span></span><br><span class="line"><span class="keyword">import</span> &#123;applyMiddleware, compose, createStore&#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"><span class="comment">//让dispatch派发函数，一般是派发的是对象</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span></span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span><span class="string">&#x27;./counter/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> homeReducer <span class="keyword">from</span> <span class="string">&#x27;./home/index&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">&quot;redux&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> reducer = <span class="title function_">combineReducers</span>(&#123;</span><br><span class="line">    <span class="attr">home</span>:homeReducer,</span><br><span class="line">    <span class="attr">count</span>:counterReducer</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//redux-devtools</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers =  <span class="variable language_">window</span>.<span class="title function_">__REDUX_DEVTOOLS_EXTENSION_COMPOSE__</span>(&#123;<span class="attr">trace</span>: <span class="literal">true</span>&#125;) || compose;</span><br><span class="line"><span class="comment">//让dispatch派发函数，一般是派发的是对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer,<span class="title function_">composeEnhancers</span>(<span class="title function_">applyMiddleware</span>(thunk)))</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h2 id="ReduxToolkit-的使用（也是以前redux的简化"><a href="#ReduxToolkit-的使用（也是以前redux的简化" class="headerlink" title="ReduxToolkit 的使用（也是以前redux的简化)"></a><strong>ReduxToolkit</strong> 的使用（也是以前redux的简化)</h2><h3 id="基本使用-2"><a href="#基本使用-2" class="headerlink" title="基本使用"></a>基本使用</h3><blockquote><p>其中核心的api为：configureStore，createSlice，createAsyncThunk</p></blockquote><h5 id="configureStore"><a href="#configureStore" class="headerlink" title="configureStore"></a>configureStore</h5><p>作用：包装createStore以提供简化的配置选项和良好的默认值。它可以自动<code>组合你的 slice reducer</code>，添加你提供</p><p>的<code>任何 Redux 中间件</code>，<code>redux-thunk</code>默认包含，并启用<code> Redux DevTools Extension</code>。</p><h5 id="createSlice-如下面的代码"><a href="#createSlice-如下面的代码" class="headerlink" title="createSlice(如下面的代码)"></a>createSlice(如下面的代码)</h5><p>作用：接受reducer函数的对象、切片名称和初始状态值，并自动生成<code>切片reducer</code>，并带有相应的<code>actions</code>。</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="createAsyncThunk（进行异步操作）"><a href="#createAsyncThunk（进行异步操作）" class="headerlink" title="createAsyncThunk（进行异步操作）"></a>createAsyncThunk（进行异步操作）</h5><h3 id="redux里面代码"><a href="#redux里面代码" class="headerlink" title="redux里面代码"></a>redux里面代码</h3><h4 id="创建切片"><a href="#创建切片" class="headerlink" title="创建切片"></a>创建切片</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//count.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;createSlice&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="keyword">const</span> createCounterSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;counter&quot;</span>,</span><br><span class="line">    <span class="attr">initialState</span>:&#123;</span><br><span class="line">        <span class="attr">counter</span>:<span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reducers</span>:&#123;</span><br><span class="line">        <span class="title function_">addNumberAction</span>(<span class="params">state,&#123;payload&#125;</span>)&#123;</span><br><span class="line">            state.<span class="property">counter</span> += payload</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">subNumberAction</span>(<span class="params">state,&#123;payload&#125;</span>)&#123;</span><br><span class="line">            state.<span class="property">counter</span> -= payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123;addNumberAction,subNumberAction&#125; = createCounterSlice.<span class="property">actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createCounterSlice.<span class="property">reducer</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//home.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;createSlice&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="keyword">const</span> createHomeSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;counter&quot;</span>,</span><br><span class="line">    <span class="attr">initialState</span>:&#123;</span><br><span class="line">        <span class="attr">banner</span>:[],</span><br><span class="line">        <span class="attr">recommend</span>:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reducers</span>:&#123;</span><br><span class="line">        <span class="title function_">changeBannerAction</span>(<span class="params">state,&#123;payload&#125;</span>)&#123;</span><br><span class="line">            state.<span class="property">counter</span> += payload</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">changeRecoomendAction</span>(<span class="params">state,&#123;payload&#125;</span>)&#123;</span><br><span class="line">            state.<span class="property">counter</span> -= payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123;changeBannerAction,changeRecoomendAction&#125; = createHomeSlice.<span class="property">actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createHomeSlice.<span class="property">reducer</span></span><br></pre></td></tr></table></figure><h4 id="创建store-1"><a href="#创建store-1" class="headerlink" title="创建store"></a>创建store</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;configureStore&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="keyword">import</span> homeReducer <span class="keyword">from</span> <span class="string">&#x27;./features/home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> counterReducer <span class="keyword">from</span> <span class="string">&#x27;./features/counter&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">configureStore</span>(&#123;</span><br><span class="line">    <span class="attr">reducer</span>:&#123;</span><br><span class="line">        <span class="attr">home</span>:homeReducer,</span><br><span class="line">        <span class="attr">count</span>:counterReducer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><h4 id="extraReducer"><a href="#extraReducer" class="headerlink" title="extraReducer"></a><strong>extraReducer</strong></h4><blockquote><p>被创建的extraReducer中含有三个状态:pending,fulfilled,rejected</p><p>监听请求的过程</p></blockquote><h5 id="第一种写法"><a href="#第一种写法" class="headerlink" title="第一种写法"></a>第一种写法</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createSlice,createAsyncThunk&#125; <span class="keyword">from</span> <span class="string">&#x27;@reduxjs/toolkit&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">//异步请求 </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchHomeMultidataAction = <span class="title function_">createAsyncThunk</span>(<span class="string">&quot;fetch/homemultidata&quot;</span>,<span class="title function_">async</span>(extraInfo,&#123;dispatch,getState&#125;)=&gt;&#123;</span><br><span class="line">    <span class="comment">//1.发起请求</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> banners = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">banner</span>.<span class="property">list</span></span><br><span class="line">    <span class="keyword">const</span> recommends = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">recommend</span>.<span class="property">list</span></span><br><span class="line">    <span class="comment">//2.派发数据，进行修改数据</span></span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">changeBannerAction</span>(banners))</span><br><span class="line">    <span class="title function_">dispatch</span>(<span class="title function_">changeRecomendAction</span>(recommends))</span><br><span class="line">    <span class="comment">// 3.返回结果, 那么action状态会变成fulfilled状态</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> createHomeSlice = <span class="title function_">createSlice</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;counter&quot;</span>,</span><br><span class="line">    <span class="attr">initialState</span>:&#123;</span><br><span class="line">        <span class="attr">banner</span>:[],</span><br><span class="line">        <span class="attr">recommend</span>:[]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reducers</span>:&#123;</span><br><span class="line">        <span class="title function_">changeBannerAction</span>(<span class="params">state,&#123;payload&#125;</span>)&#123;</span><br><span class="line">            state.<span class="property">banner</span> = payload</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">changeRecomendAction</span>(<span class="params">state,&#123;payload&#125;</span>)&#123;</span><br><span class="line">            state.<span class="property">recommend</span> = payload</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//进行监听,在createSlice的entraReducer中监听这些结果</span></span><br><span class="line">     <span class="attr">extraReducers</span>:&#123;</span><br><span class="line">        [fetchHomeMultidataAction.<span class="property">pending</span>](state,action)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;程序进行中&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        [fetchHomeMultidataAction.<span class="property">fulfilled</span>](state,&#123;payload&#125;)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取到了数据&quot;</span>,payload);</span><br><span class="line">            state.<span class="property">banner</span> = payload.<span class="property">data</span>.<span class="property">banner</span>.<span class="property">list</span></span><br><span class="line">            state.<span class="property">recommend</span> = payload.<span class="property">data</span>.<span class="property">recommend</span>.<span class="property">list</span></span><br><span class="line">        &#125;,</span><br><span class="line">        [fetchHomeMultidataAction.<span class="property">rejected</span>](state,action)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> &#123;changeBannerAction,changeRecomendAction&#125; = createHomeSlice.<span class="property">actions</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createHomeSlice.<span class="property">reducer</span></span><br></pre></td></tr></table></figure><h2 id="State状态管理"><a href="#State状态管理" class="headerlink" title="State状态管理"></a>State状态管理</h2><blockquote><p> 方式一：组件中自己的state管理；</p><p> 方式二：Context数据的共享状态；</p><p> 方式三：Redux管理应用状态；</p></blockquote><p>状态管理方式</p><ol><li>ui类的在自己组件进行管理</li><li>大部分需要共享的状态，都交给redux来管理和维护；</li><li>网络请求的，交给redux来维护和管理</li></ol><h2 id="React-Router使用"><a href="#React-Router使用" class="headerlink" title="React Router使用"></a>React Router使用</h2><h3 id="基本使用-3"><a href="#基本使用-3" class="headerlink" title="基本使用"></a>基本使用</h3><p>路由的配置，嵌套路由</p><ol><li><code>npm install react-router-dom</code>   (千万不要下载错，不要下载为react-router)</li><li></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;./pages/home&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>, <span class="title class_">Navigate</span>, <span class="title class_">Route</span>, <span class="title class_">Routes</span>,<span class="title class_">NavLink</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;./pages/about&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&quot;./pages/login&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./App.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&quot;./pages/NotFound&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Homerecommend</span> <span class="keyword">from</span> <span class="string">&quot;./pages/homerecommend&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Homeranking</span> <span class="keyword">from</span> <span class="string">&quot;./pages/homeranking&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="comment">// getClassNameActive(&#123;isActive&#125;)&#123;</span></span><br><span class="line">    <span class="comment">//     return classNames(&#123;&#x27;link-active&#x27;:isActive&#125;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">return</span>(</span><br><span class="line">         <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;App&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;navigator&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                     <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>(&#123;color:isActive?&#x27;red&#x27;:&#x27;&#x27;&#125;)&#125;&gt;首页<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                     <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>(&#123;color:isActive?&#x27;red&#x27;:&#x27;&#x27;&#125;)&#125;&gt;关于<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                     <span class="tag">&lt;<span class="name">NavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/login&#x27;</span> <span class="attr">style</span>=<span class="string">&#123;(&#123;isActive&#125;)</span>=&gt;</span>(&#123;color:isActive?&#x27;red&#x27;:&#x27;&#x27;&#125;)&#125;&gt;登录<span class="tag">&lt;/<span class="name">NavLink</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;content&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                   <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&#x27;/home&#x27;</span>/&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                       //嵌套路由</span></span><br><span class="line"><span class="language-xml">                   <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Home</span>/&gt;</span>&#125; &gt;</span></span><br><span class="line"><span class="language-xml">                       <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home/recommend&quot;</span>/&gt;</span>&#125;/&gt;</span></span><br><span class="line"><span class="language-xml">                       <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/recommend&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Homerecommend</span>/&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                       <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/ranking&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Homeranking</span>/&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                   <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                   <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/about&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">About</span>/&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                   <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/login&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">Login</span>/&gt;</span>&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">                     <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;*&#x27;</span> <span class="attr">element</span>=<span class="string">&#123;</span>&lt;<span class="attr">NotFound</span>/&gt;</span>&#125;&gt;<span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                 我是底部</span></span><br><span class="line"><span class="language-xml">             <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">     )</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在这个里面添加<code>&lt;Outlet/&gt;</code>来进行占位</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//home.jsx</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是home页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>歌曲推荐页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/home/recommend&#x27;</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/home/ranking&#x27;</span>&gt;</span>排行榜<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">Outlet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Home</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="手动实现路由跳转"><a href="#手动实现路由跳转" class="headerlink" title="手动实现路由跳转"></a>手动实现路由跳转</h3><p>使用useNavigate()来进行路由跳转</p><p>这个分为两种情况</p><ol><li><p>函数式组件</p><p>可以直接使用useNavigate()来进行路由跳转</p></li><li><p>类组件</p><p>在类组件里面不能使用hooks，所以可以使用高阶组件来进行对<code>组件的拦截</code>,给它添加一些hooks上面的对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//高阶组件的一个封装</span></span><br><span class="line"><span class="keyword">import</span> &#123;useNavigate&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">widthRouter</span>(<span class="params">WrapperComponent</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="comment">//1.导航</span></span><br><span class="line">        <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">        <span class="keyword">const</span> router = &#123;navigate&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrapperComponent</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">router</span>=<span class="string">&#123;router&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">WrapperComponent</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> widthRouter;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//button的路由跳转</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> widthRouter <span class="keyword">from</span> <span class="string">&quot;../hoc/with_router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">navigateTo</span>(<span class="params">path</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;navigate&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">router</span></span><br><span class="line">        <span class="title function_">navigate</span>(path)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是home页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>歌曲推荐页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/home/recommend&#x27;</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/home/ranking&#x27;</span>&gt;</span>排行榜<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>this.navigateTo(&quot;/home/songmenu&quot;)&#125;&gt;跳到歌单页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">Outlet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">widthRouter</span>(<span class="title class_">Home</span>);</span><br></pre></td></tr></table></figure><h3 id="路由参数传递"><a href="#路由参数传递" class="headerlink" title="路由参数传递"></a>路由参数传递</h3><ol><li><p>动态路由</p><p>&#x2F;detail&#x2F;:id，那么 &#x2F;detail&#x2F;abc、&#x2F;detail&#x2F;123都可以匹配到该Route，并且进行显示，这就是动态路由</p></li><li><p>search传递参数</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;<span class="title class_">PureComponent</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Outlet</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Link</span>&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> widthRouter <span class="keyword">from</span> <span class="string">&quot;../hoc/with_router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Home</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span> &#123;</span><br><span class="line">    <span class="title function_">navigateTo</span>(<span class="params">path</span>)&#123;</span><br><span class="line">       <span class="keyword">const</span> &#123;navigate&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">router</span></span><br><span class="line">        <span class="title function_">navigate</span>(path)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;param,query&#125; = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">router</span></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是home页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>歌曲推荐页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/home/recommend&#x27;</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#x27;/home/ranking&#x27;</span>&gt;</span>排行榜<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            //路由传递参数和查询字符串</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home/123?name=&#x27;小明&#x27;&amp;age=18&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是&#123;param.id&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>查询的字符串为&#123;query.name&#125;&#123;query.age&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>this.navigateTo(&quot;/home/songmenu&quot;)&#125;&gt;跳到歌单页面<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">Outlet</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">widthRouter</span>(<span class="title class_">Home</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//高阶组件的封装</span></span><br><span class="line"><span class="keyword">import</span> &#123;useNavigate, useSearchParams&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useParams&#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">widthRouter</span>(<span class="params">WrapperComponent</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="comment">//1.导航</span></span><br><span class="line">        <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">        <span class="comment">//2.动态路由的参数</span></span><br><span class="line">        <span class="keyword">const</span> param = <span class="title function_">useParams</span>()</span><br><span class="line">        <span class="comment">//3.查询字符串</span></span><br><span class="line">        <span class="keyword">const</span> [searchParams] = <span class="title function_">useSearchParams</span>()</span><br><span class="line">        <span class="keyword">const</span> query = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(searchParams)</span><br><span class="line">        <span class="keyword">const</span> router = &#123;navigate,param,query&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrapperComponent</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">router</span>=<span class="string">&#123;router&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">WrapperComponent</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> widthRouter;</span><br></pre></td></tr></table></figure><h3 id="对router配置文件的优化"><a href="#对router配置文件的优化" class="headerlink" title="对router配置文件的优化"></a>对router配置文件的优化</h3><p>useRoutes API可以完成相关的配置，要配置路由的懒加载需要配合Suspense进行包裹。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//router/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeRecommend</span> <span class="keyword">from</span> <span class="string">&quot;../pages/HomeRecommend&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeRanking</span> <span class="keyword">from</span> <span class="string">&quot;../pages/HomeRanking&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HomeSongMenu</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/HomeSongMenu&#x27;</span></span><br><span class="line"><span class="comment">// import About from &quot;../pages/About&quot;</span></span><br><span class="line"><span class="comment">// import Login from &quot;../pages/Login&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Category</span> <span class="keyword">from</span> <span class="string">&quot;../pages/Category&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Order</span> <span class="keyword">from</span> <span class="string">&quot;../pages/Order&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NotFound</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/NotFound&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">User</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/User&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Navigate</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../pages/About&quot;</span>))</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Login</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../pages/Login&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>/&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Home</span>/&gt;</span></span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Navigate</span> <span class="attr">to</span>=<span class="string">&quot;/home/recommend&quot;</span>/&gt;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/home/recommend&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">HomeRecommend</span>/&gt;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/home/ranking&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">HomeRanking</span>/&gt;</span></span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/home/songmenu&quot;</span>,</span><br><span class="line">        <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">HomeSongMenu</span>/&gt;</span></span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/about&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">About</span>/&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Login</span>/&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/category&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Category</span>/&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/order&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Order</span>/&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/detail/:id&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">Detail</span>/&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/user&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">User</span>/&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="attr">element</span>: <span class="language-xml"><span class="tag">&lt;<span class="name">NotFound</span>/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在APP页面使用&#123;useRoutes(routes)&#125;，将路由映射出来</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Link</span>, <span class="title class_">Navigate</span>, <span class="title class_">Route</span>, <span class="title class_">Routes</span>, useNavigate, useRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;react-router-dom&#x27;</span></span><br><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./style.css&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> navigate = <span class="title function_">useNavigate</span>()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">navigateTo</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="title function_">navigate</span>(path)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;header&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>header<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;nav&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/login&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> navigateTo(&quot;/category&quot;)&#125;&gt;分类<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span> =&gt;</span> navigateTo(&quot;/order&quot;)&#125;&gt;订单<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&quot;/user?name=why&amp;age=18&quot;</span>&gt;</span>用户<span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;content&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;useRoutes(routes)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#x27;footer&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        Footer</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="comment">// import &#123; StrictMode &#125; from &quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&quot;react-dom/client&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">HashRouter</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-router-dom&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>))</span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="comment">// &lt;StrictMode&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">h3</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">HashRouter</span>&gt;</span></span></span><br><span class="line">  <span class="comment">// &lt;/StrictMode&gt;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h1><p>（这些性质可以看课件）</p><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><blockquote><p>使用hooks可以在不使用class组件的前提下，使用hooks里面的state，和class特有的性质（例如生命周期）。</p><p>总体来说就是函数式组件可以使用class组件里面的一些特性</p></blockquote><p>class组件相较于函数式组件的优势</p><ol><li><p>可定义自己的state</p><ol><li>函数组件没有state（无状态）</li></ol></li><li><p>有生命周期</p><p>1.函数式组件在学习hooks之前，如果在函数中发送网络请求，意味着每次重新渲染都会重新发送一次网络请求</p></li><li><p>class组件可以在状态改变时只会<code>重新执行render函数</code>以及我们希望<code>重新调用的生命周期函数componentDidUpdate</code>等；</p><ol><li>但函数组件如果状态改变的话就会重新执行这整个函数</li></ol></li></ol><p>class组件的缺点</p><ol><li>拆分很难</li><li>this指向问题</li><li>组件复用很难</li></ol><h2 id="做一个计数器的案例"><a href="#做一个计数器的案例" class="headerlink" title="做一个计数器的案例"></a>做一个计数器的案例</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;memo, useState&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">CounterHook</span> () &#123;</span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>计时器<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前计数:&#123;count&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>setCount(count + 1)&#125;&gt;+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>setCount(count-1)&#125;&gt;-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">CounterHook</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>记住最核心的两个hook：useState，useEffect</p><h2 id="useState的使用"><a href="#useState的使用" class="headerlink" title="useState的使用"></a>useState的使用</h2><p>参数：初始化值</p><p>返回值：1. 当前状态的值 2. 设置状态值的函数。返回的是一个数组，可以通过解构来完成赋值。</p><p>规则：</p><ol><li>只能在函数最外层调用Hook，不要在循环、条件判断或者子函数里面调用。</li><li>只能在react的函数组件中调用Hook，不能在其他的js函数中调用</li></ol><h2 id="Effect-Hook使用"><a href="#Effect-Hook使用" class="headerlink" title="Effect Hook使用"></a>Effect Hook使用</h2><p>目前可以当做类组件里面的生命周期来使用。</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><blockquote><p>完成一些class里面的生命周期，一些产生副作用的函数也可以写在里面</p></blockquote><p>useEffect是在<code>react需要渲染</code>后执行的某些操作</p><ol><li>传入一个<code>回调函数</code>，React执行完更新之后会回调</li><li>第一次渲染完成，之后更新还会渲染</li></ol><h3 id="清除Effect"><a href="#清除Effect" class="headerlink" title="清除Effect"></a>清除Effect</h3><p>在useEffect中清除Effect：在useEffect里面<code>传入一个回调</code>的同时它的<code>返回值是另一个回调</code>。</p><h3 id="使用多个Effect"><a href="#使用多个Effect" class="headerlink" title="使用多个Effect"></a>使用多个Effect</h3><p>因为useEffect的特性，每一次渲染的时候都会调用回调函数，但是对于一些副作用函数来说不需要每一次都调用，不然会降低性能。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>useEffect实际上有两个参数：</p><p>参数一：执行的回调函数；</p><p>参数二：该useEffect在哪些state发生变化时，才重新执行；（受谁的影响，依赖于谁的变化）</p><p><strong>注意</strong>：<strong>如果一个函数我们不希望依赖任何的内容时，也可以传入一个空的数组 []。</strong></p><h2 id="自定义Hook"><a href="#自定义Hook" class="headerlink" title="自定义Hook"></a>自定义Hook</h2><p>很像vue中的函数逻辑抽离，进行复用。</p><p>需求一:所有的组件在创建和销毁时都进行打印</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;memo, useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useLogLife</span>(<span class="params">cName</span>)&#123;</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(cName+<span class="string">&quot;组件被创建了&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(cName+<span class="string">&quot;组件被销毁了&quot;</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;, [cName]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">useLogLife</span>(<span class="string">&quot;home&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">About</span> = <span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">useLogLife</span>(<span class="string">&quot;about&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>About Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App1</span> = <span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [isShow, setIsShow] = <span class="title function_">useState</span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="title function_">useLogLife</span>(<span class="string">&quot;app&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App Root Component<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;e</span>=&gt;</span>setIsShow(!isShow)&#125;&gt;切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;isShow &amp;&amp; <span class="tag">&lt;<span class="name">Home</span>&gt;</span><span class="tag">&lt;/<span class="name">Home</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;isShow &amp;&amp; <span class="tag">&lt;<span class="name">About</span>&gt;</span><span class="tag">&lt;/<span class="name">About</span>&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">App1</span></span><br></pre></td></tr></table></figure><p>需求二:Context的共享</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//context/index.js</span></span><br><span class="line"><span class="comment">//创建上下文</span></span><br><span class="line"><span class="keyword">import</span> &#123;createContext&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">UserContext</span> = <span class="title function_">createContext</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TokenContext</span> = <span class="title function_">createContext</span>()</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    <span class="title class_">UserContext</span>,</span><br><span class="line">    <span class="title class_">TokenContext</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//useUserToken hook</span></span><br><span class="line">使用用户和token的hook</span><br><span class="line"><span class="keyword">import</span> &#123;useContext&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">TokenContext</span>, <span class="title class_">UserContext</span>&#125; <span class="keyword">from</span> <span class="string">&quot;../context&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useUserToken</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//用户上下文</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="title function_">useContext</span>(<span class="title class_">UserContext</span>);</span><br><span class="line">    <span class="comment">//token上下文</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="title function_">useContext</span>(<span class="title class_">TokenContext</span>);</span><br><span class="line">    <span class="keyword">return</span> [user,token]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useUserToken;</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实际的应用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useUserToken&#125; <span class="keyword">from</span> <span class="string">&quot;../hooks&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Home</span> = <span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [user,token] = <span class="title function_">useUserToken</span>()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户的信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                用户的姓名:&#123;user.name&#125;,用户年龄:&#123;user.age&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                用户token:&#123;token.name&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Profile</span> = <span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [user,token] = <span class="title function_">useUserToken</span>()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>用户的信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                用户的姓名:&#123;user.name&#125;,用户年龄:&#123;user.age&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                用户token:&#123;token.name&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title function_">memo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [user,token] = <span class="title function_">useUserToken</span>()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Home</span>&gt;</span><span class="tag">&lt;/<span class="name">Home</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Profile</span>&gt;</span><span class="tag">&lt;/<span class="name">Profile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Context</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个上下文可以通过以前的内容来获得</p><p>需求三:获取滚动位置</p><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//useScrollPosition的hook</span></span><br><span class="line"><span class="keyword">import</span> &#123;useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useScrollPosition</span> ()&#123;</span><br><span class="line">    <span class="keyword">const</span> [ scrollX, setScrollX ] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> [ scrollY, setScrollY ] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//获得y</span></span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">handleScroll</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">                <span class="title function_">setScrollY</span>(<span class="variable language_">window</span>.<span class="property">scrollY</span>)</span><br><span class="line">                <span class="title function_">setScrollX</span>(<span class="variable language_">window</span>.<span class="property">scrollX</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//监听鼠标滑动</span></span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,handleScroll)</span><br><span class="line">            <span class="comment">//取消监听</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,handleScroll)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;, []);</span><br><span class="line">    <span class="keyword">return</span> [scrollX,scrollY]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useScrollPosition</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useScrollPosition&#125; <span class="keyword">from</span> <span class="string">&quot;../hooks&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">GetScroll</span> = <span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [scrollX,scrollY] = <span class="title function_">useScrollPosition</span>()</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>获取屏幕位置:&#123;scrollX&#125;,&#123;scrollY&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyComponent</span> = <span class="title function_">memo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">GetScroll</span>&gt;</span><span class="tag">&lt;/<span class="name">GetScroll</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MyComponent</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">需求四：localStorge数据存储</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>jsx</span><br><span class="line"><span class="comment">//useLocalStorage hook</span></span><br><span class="line"><span class="keyword">import</span> &#123;useEffect, useState&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useLocalStorage</span> (key)&#123;</span><br><span class="line">    <span class="comment">//获取本地存储的信息</span></span><br><span class="line">    <span class="keyword">const</span> [data, setData] = <span class="title function_">useState</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> item = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br><span class="line">        <span class="keyword">if</span>(!item)<span class="keyword">return</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(item)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//存储信息</span></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">    &#125;, [data]);</span><br><span class="line">    <span class="keyword">return</span> [data,setData]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useLocalStorage</span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;memo&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;useLocalStorage&#125; <span class="keyword">from</span> <span class="string">&quot;../hooks&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> token = <span class="title function_">memo</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            我的token为:&#123;token&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">LocalStorageData</span> = <span class="title function_">memo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [token,setToken] = <span class="title function_">useLocalStorage</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setTokenMessage</span> ()&#123;</span><br><span class="line">        <span class="title function_">setToken</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;setTokenMessage&#125;</span>&gt;</span>设置token<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span>我的token为:&#123;token&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">LocalStorageData</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端框架 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 和 Github的使用</title>
      <link href="/2023/10/01/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%8C%96/Git/"/>
      <url>/2023/10/01/%E5%89%8D%E7%AB%AF%E7%9A%84%E5%B7%A5%E7%A8%8B%E5%8C%96/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-和-Github的使用"><a href="#Git-和-Github的使用" class="headerlink" title="Git 和 Github的使用"></a>Git 和 Github的使用</h1><p>可以参考<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰Git</a><br>提示:下面有的命令用()来包裹的，应该为&lt;&gt;</p><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">版本控制工具，进行备份</span><br><span class="line">用来记录文件的变化，用于版本更新，并且记录以前的版本。</span><br><span class="line">git是分布式版本控制系统</span><br></pre></td></tr></table></figure><p><img src="/image/img.png" alt="img.png"></p><h2 id="Git的基本概念"><a href="#Git的基本概念" class="headerlink" title="Git的基本概念"></a>Git的基本概念</h2><h3 id="三个仓库"><a href="#三个仓库" class="headerlink" title="三个仓库"></a>三个仓库</h3><ol><li>工作区(就是编写代码的地方)</li><li>暂存区(把已经完成的文件放进这里)</li><li>Git仓库(当这个文件全部完成之后，放进Git仓库进行管理)</li></ol><h3 id="一些状态"><a href="#一些状态" class="headerlink" title="一些状态"></a>一些状态</h3><p><strong>U:未跟踪,M:已修改,S:已暂存,A:新添加,’’:未修改</strong></p><h4 id="基本工作流程"><a href="#基本工作流程" class="headerlink" title="基本工作流程"></a>基本工作流程</h4><p>基本的 Git 工作流程如下：</p><ol><li>在工作区中修改文件</li><li>将你想要下次提交的更改进行暂存</li><li>提交更新，找到暂存区的文件，将快照永久性存储到 Git 仓库</li></ol><h2 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h2><p>首先先下载，安装</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><img src="/image/GitConfig.png" alt="img.png"></p><h3 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h3><p><img src="/image/Commond01.png" alt="img.png"><br><img src="/image/Commond2.png" alt="img.png"></p><h4 id="修改和回退历史"><a href="#修改和回退历史" class="headerlink" title="修改和回退历史"></a>修改和回退历史</h4><p>版本回退<br><img src="/image/reset.png" alt="img.png"></p><ol><li>未add但修改了(在工作区)</li><li>add了，但未commit</li><li>add和commit了<br>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git restore (file)</li></ol><p>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p><p>结果：工作区文件回退。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git restore –staged (file)，就回到了场景1，第二步按场景1操作。</p><p>结果：暂存区文件回退，工作区文件未回退，如需继续回退，操按情况1操作。</p><p>场景3： 假设你不但改错了东西，还从暂存区提交到了版本库，怎么办呢？还记得版本回退一节吗？<br>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset –hard (id)</p><p>结果：工作区文件、暂存区文件、本地仓库都回退</p><p><strong>我的推荐是：尽量不要直接commit</strong></p><p>修改的时候，不要直接进行commit，要先add例子：<br><code>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git add -&gt; git commit</code></p><p>可以将两次的文件进行合并，最后进行提交</p><p><code>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git commit</code></p><p>这种只会提交第一次的</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>先手动删除文件，然后使用git add (file) 和git rm(file)效果是一样的。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">当你误删的话只能回退以前的版本，来进行恢复</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><img src="/image/branch1.png" alt="img.png"><br>上面有分支的指令（知道：增，删，合并，切换分支就可以了）</p><p>注意：合并主分支的时候要在主分支进行合并</p><h3 id="推送失败"><a href="#推送失败" class="headerlink" title="推送失败"></a>推送失败</h3><ol><li><code>git pull</code>，再推送</li><li>如果<code>git pull</code>，再推送失败，按照报错的操作进行推送</li></ol><h3 id="分支合并遇到冲突"><a href="#分支合并遇到冲突" class="headerlink" title="分支合并遇到冲突"></a>分支合并遇到冲突</h3><p>手动解决冲突，再进行合并<br><img src="/image/confict.png" alt="img.png"></p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tailwindcss</title>
      <link href="/2023/10/01/%E6%9C%AA%E6%9D%A5%E5%85%88%E9%A9%B1%EF%BC%8C%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/tailwindcss/"/>
      <url>/2023/10/01/%E6%9C%AA%E6%9D%A5%E5%85%88%E9%A9%B1%EF%BC%8C%E5%89%8D%E6%B2%BF%E6%8A%80%E6%9C%AF/tailwindcss/</url>
      
        <content type="html"><![CDATA[<h1 id="原子化css"><a href="#原子化css" class="headerlink" title="原子化css"></a>原子化css</h1>]]></content>
      
      
      <categories>
          
          <category> 未来先驱，前沿技术 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS进阶</title>
      <link href="/2023/02/06/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JavaScript%E8%BF%9B%E9%98%B6/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2023/02/06/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JavaScript%E8%BF%9B%E9%98%B6/%E5%8E%9F%E5%9E%8B%E5%92%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1>]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> JS </category>
          
          <category> JavaScript进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS进阶</title>
      <link href="/2023/01/31/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JavaScript%E8%BF%9B%E9%98%B6/JS%E8%BF%9B%E9%98%B6/"/>
      <url>/2023/01/31/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JavaScript%E8%BF%9B%E9%98%B6/JS%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域和作用域链"><a href="#作用域和作用域链" class="headerlink" title="作用域和作用域链"></a>作用域和作用域链</h1><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><ol><li>词法作用域(静态作用域)</li><li>动态作用域<blockquote><p>因为 JavaScript 采用的是词法作用域，函数的作用域在函数定义的时候就决定了。<br>而与词法作用域相对的是动态作用域，函数的作用域是在函数调用的时候才决定的。</p></blockquote></li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">    <span class="title function_">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果是 ???</span></span><br></pre></td></tr></table></figure><ol><li>全局作用域</li><li>函数作用域</li><li>块级作用域</li></ol><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><blockquote><p>当所需要的变量在所在的作用域中查找不到的时候，它会一层一层向上查找，直到找到全局作用域还没有找到的时候，就会放弃查找。这种一层一层的关系，就是作用域链。</p></blockquote><ol><li>函数作用域和全局作用域在执行上下文创建时就已经确定了</li><li>函数执行</li></ol><h1 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h1><blockquote><p>闭包是有权访问另一个函数作用域链中变量的函数</p></blockquote><p>闭包的用途:</p><ol><li>让我们在函数外部能访问到函数内部的变量。</li><li>时已经运行结束的函数上下文中的变量对象继续留在内存里面，因为闭包函数保留了对这个变量对象的引用的，所以这个变量对象不会被回收。</li></ol><p>危害:<br>内存泄漏</p><p>内存泄漏就是一个对象在你不需要它的时候仍然存在。所以不能滥用闭包。当我们使用完闭包后，应该将引用变量置为null。</p><ol><li>内存消耗。闭包产生的变量无法被销毁。</li><li>性能问题。由于闭包内部变量优先级高于外部变量，所以需要多查找作用域链的一个层次，一定程度影响查找速度。</li></ol><h1 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h1><blockquote><p>柯里化（Currying）是把接受多个参数的函数转变为单一参数的函数，并且返回接受余下的参数且返回结果的新函数的技术。</p></blockquote><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol><li>参数复用</li><li>提前确认</li><li>延迟运行</li></ol><blockquote><p>参数复用<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验数字</span></span><br><span class="line"><span class="keyword">let</span> numberReg = <span class="regexp">/[0-9]+/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验小写字母</span></span><br><span class="line"><span class="keyword">let</span> stringReg = <span class="regexp">/[a-z]+/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// currying 后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">curryingCheck</span>(<span class="params">reg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">txt</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> reg.<span class="title function_">test</span>(txt);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验数字</span></span><br><span class="line"><span class="keyword">let</span> checkNumber = <span class="title function_">curryingCheck</span>(numberReg);</span><br><span class="line"><span class="keyword">let</span> checkString = <span class="title function_">curryingCheck</span>(stringReg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkNumber</span>(<span class="string">&#x27;13888888888&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">checkString</span>(<span class="string">&#x27;jsliang&#x27;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><br>提前确定</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> on = <span class="keyword">function</span>(<span class="params">element, event, handler</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class="line">            element.<span class="title function_">addEventListener</span>(event, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class="line">            element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + event, handler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> on = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">element, event, handler</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class="line">                element.<span class="title function_">addEventListener</span>(event, handler, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">element, event, handler</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (element &amp;&amp; event &amp;&amp; handler) &#123;</span><br><span class="line">                element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + event, handler);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//换一种写法可能比较好理解一点，上面就是把isSupport这个参数给先确定下来了</span></span><br><span class="line"><span class="keyword">var</span> on = <span class="keyword">function</span>(<span class="params">isSupport, element, event, handler</span>) &#123;</span><br><span class="line">    isSupport = isSupport || <span class="variable language_">document</span>.<span class="property">addEventListener</span>;</span><br><span class="line">    <span class="keyword">if</span> (isSupport) &#123;</span><br><span class="line">        <span class="keyword">return</span> element.<span class="title function_">addEventListener</span>(event, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + event, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装柯里化函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 支持多参数传递</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">progressCurrying</span>(<span class="params">fn, args</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">var</span> len = fn.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">var</span> args = args || [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> _args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">apply</span>(args, _args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果参数个数小于最初的fn.length，则递归调用，继续收集参数</span></span><br><span class="line">        <span class="keyword">if</span> (_args.<span class="property">length</span> &lt; len) &#123;</span><br><span class="line">            <span class="keyword">return</span> progressCurrying.<span class="title function_">call</span>(_this, fn, _args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数收集完毕，则执行fn</span></span><br><span class="line">        <span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, _args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><blockquote><p>在浏览器或者node环境中解决JavaScript单线程不堵塞的一种方法。</p></blockquote><h2 id="单线程和多线程"><a href="#单线程和多线程" class="headerlink" title="单线程和多线程"></a>单线程和多线程</h2><blockquote><p>JavaScript是单线程语言,线程和进程的区别,线程可以包含多个进程。以 Chrome 浏览器中为例，当你打开一个 Tab 页时，其实就是创建了一个进程。<br>一个进程中可以有多个线程，比如渲染线程、JS 引擎线程、HTTP 请求线程等等。</p></blockquote><h3 id="浏览器内核是什么线程"><a href="#浏览器内核是什么线程" class="headerlink" title="浏览器内核是什么线程"></a>浏览器内核是什么线程</h3><p>浏览器内核是多线程。</p><ol><li>渲染线程</li><li>JavaScript线程</li><li>事件触发线程</li><li>定时器线程</li><li>异步请求线程</li></ol><h3 id="为什么要单线程"><a href="#为什么要单线程" class="headerlink" title="为什么要单线程"></a>为什么要单线程</h3><p>因为如果设置为多线程,当操作dom的时候,事件A像删除dom,事件B想修改dom发生了冲突</p><h3 id="为什么要异步"><a href="#为什么要异步" class="headerlink" title="为什么要异步"></a>为什么要异步</h3><h2 id="事件循环-1"><a href="#事件循环-1" class="headerlink" title="事件循环"></a>事件循环</h2><h3 id="什么是事件循环"><a href="#什么是事件循环" class="headerlink" title="什么是事件循环"></a>什么是事件循环</h3><p>JavaScript 从 script 开始读取，然后不断循环，从 “任务队列” 中读取执行事件的过程，就是 事件循环（Event Loop）。</p><h3 id="为什么要事件循环"><a href="#为什么要事件循环" class="headerlink" title="为什么要事件循环"></a>为什么要事件循环</h3><p>JavaScript 为了协调事件、用户交互、脚本、渲染、网络等，就搞出来一个 事件循环（Event Loop）</p><p>事件循环过程</p><ol><li>一开始整个脚本 script 作为一个宏任务执行</li><li>执行过程中，同步代码 直接执行，宏任务 进入宏任务队列，微任务 进入微任务队列。</li><li>当前宏任务执行完出队，检查微任务列表，有则依次执行，直到全部执行完毕。</li><li>执行浏览器 UI 线程的渲染工作。</li><li>检查是否有 Web Worker 任务，有则执行。</li><li>执行完本轮的宏任务，回到步骤 2，依次循环，直到宏任务和微任务队列为空。</li></ol><p>宏任务</p><ul><li>script</li><li>setTimeout</li><li>setInterval</li><li>setImmediate</li><li>I&#x2F;O</li><li>UI rendering<br>微任务</li><li>MutationObserver</li><li>Promise.then()&#x2F;catch()</li><li>以 Promise 为基础开发的其他技术，例如 fetch API</li><li>V8 的垃圾回收过程 </li><li>Node 独有的 process.nextTick</li></ul><h2 id="web-Worker"><a href="#web-Worker" class="headerlink" title="web Worker"></a>web Worker</h2><blockquote><p>Web Worker 为 Web 内容在后台线程中运行脚本提供了一种简单的方法。</p></blockquote><p>但是试想一下，如果我们可以同时运行两个（或者多个）JavaScript 脚本，一个来处理 UI 界面（一直以来的用法），一个来处理一些复杂计算，那么性能就会更好。</p><p>在 HTML5 的新规范中，实现了 Web Worker 来引入 JavaScript 的 “多线程” 技术，他的能力让我们可以在页面主运行的 JavaScript 线程中加载运行另外单独的一个或者多个 JavaScript 线程。</p><p><em>注意</em>:JavaScript 本质上还是单线程的，Web Worker 只是浏览器（宿主环境）提供的一个得力 API。</p><h3 id="数据通信"><a href="#数据通信" class="headerlink" title="数据通信"></a>数据通信</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line">onmessage = <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Worker 接收数据</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Worker 收到数据：&#x27;</span>, res);</span><br><span class="line">  <span class="comment">// Worker 收到数据：</span></span><br><span class="line">  <span class="comment">// MessageEvent &#123;isTrusted: true, data: &quot;查房，这里是 index.html！&quot;, origin: &quot;&quot;, lastEventId: &quot;&quot;, source: null, …&#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Worker 发送数据</span></span><br><span class="line">  <span class="title function_">postMessage</span>(<span class="string">&#x27;开门！这里是 index.js&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//index.html</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 实例化 Worker</span></span><br><span class="line">    <span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;./index.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index.html 接收数据</span></span><br><span class="line">    worker.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;index.html 收到数据：&#x27;</span>, res);</span><br><span class="line">    <span class="comment">// index.html 收到数据：</span></span><br><span class="line">    <span class="comment">// MessageEvent &#123;isTrusted: true, data: &quot;开门！这里是 index.js&quot;, origin: &quot;&quot;, lastEventId: &quot;&quot;, source: null, …&#125;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// index.html 发送数据</span></span><br><span class="line">    worker.<span class="title function_">postMessage</span>(<span class="string">&#x27;查房，这里是 index.html！&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//  终止 Worker</span></span><br><span class="line">    worker.<span class="title function_">terminate</span>();</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="可以操作的api"><a href="#可以操作的api" class="headerlink" title="可以操作的api"></a>可以操作的api</h3><h2 id="node和浏览器的事件循环"><a href="#node和浏览器的事件循环" class="headerlink" title="node和浏览器的事件循环"></a>node和浏览器的事件循环</h2><ul><li>Node.js：Node.js 的 Event Loop 是基于 libuv。libuv 已经对 Node.js 的 Event Loop 作出了实现。</li><li>浏览器：浏览器的 Event Loop 是基于 HTML5 规范 的。而 HTML5 规范中只是定义了浏览器中的 Event Loop 的模型，具体实现留给了浏览器厂商。</li></ul><p>浏览器环境下，microtask 的任务队列是每个 macrotask 执行完之后执行。</p><p>而在 Node.js 中，microtask 会在事件循环的各个阶段之间执行，也就是一个阶段执行完毕，就会去执行 microtask 队列的任务。</p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><p>1. </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timeout1&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise3&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timeout2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line"><span class="comment">// start</span></span><br><span class="line"><span class="comment">// done</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// timeout2</span></span><br><span class="line"><span class="comment">// promise3</span></span><br><span class="line"><span class="comment">// timeout1</span></span><br></pre></td></tr></table></figure><p>2. </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout---0&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout---200&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inner-setTimeout---0&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise5&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise3&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br><span class="line"><span class="comment">// script start</span></span><br><span class="line"><span class="comment">// script end</span></span><br><span class="line"><span class="comment">// promise1</span></span><br><span class="line"><span class="comment">// promise3</span></span><br><span class="line"><span class="comment">// promise2</span></span><br><span class="line"><span class="comment">// setTimeout---0</span></span><br><span class="line"><span class="comment">// setTimeout---200</span></span><br><span class="line"><span class="comment">// promise5</span></span><br><span class="line"><span class="comment">// inner-setTimeout---0</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">9</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">10</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">12</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">13</span>);</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 5</span></span><br><span class="line"><span class="comment">// 11</span></span><br><span class="line"><span class="comment">// 13</span></span><br><span class="line"><span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 12</span></span><br><span class="line"><span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 8</span></span><br><span class="line"><span class="comment">// 9</span></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>记住:this永远指向最后调用它的对象。</p><p>this 是和执行上下文绑定的，也就是说每个执行上下文中都有一个 this。</p><p>执行上下文分为 3 种:</p><ul><li>全局执行上下文</li><li>函数执行上下文</li><li>eval 执行上下文</li></ul><h2 id="let-const-里的this"><a href="#let-const-里的this" class="headerlink" title="let&#x2F;const 里的this"></a>let&#x2F;const 里的this</h2><p>：如果把 var 改成了 let 或者 const，变量是不会被绑定到 window 上的</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">b</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> JS </category>
          
          <category> JavaScript进阶 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Promise、async、await的面试题</title>
      <link href="/2023/01/31/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/ES6/Promise%E3%80%81async%E3%80%81await/"/>
      <url>/2023/01/31/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/ES6/Promise%E3%80%81async%E3%80%81await/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><ol><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; (<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和解析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * &#x27;start&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;success&#x27;</span></span><br><span class="line"><span class="comment">  解析：</span></span><br><span class="line"><span class="comment">    1. fn 是一个立即执行函数，所以会先执行 new Promise，所以输出 1</span></span><br><span class="line"><span class="comment">    2. 碰到 resolve，将 Promise 状态改变</span></span><br><span class="line"><span class="comment">    3. 碰到 .then()，因为前面改变了状态，所以会将其放进微任务</span></span><br><span class="line"><span class="comment">    4. 输出 &#x27;start&#x27;</span></span><br><span class="line"><span class="comment">    5. 宏任务走完，执行微任务，输出 &#x27;success&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和解析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;start&#x27;</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * &#x27;success&#x27;</span></span><br><span class="line"><span class="comment">  解析：</span></span><br><span class="line"><span class="comment">    上一道题是立即执行函数，这道题不是</span></span><br><span class="line"><span class="comment">    所以会在 fn() 调用的时候，才会执行 new Promise</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timerStart&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timerEnd&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * 2</span></span><br><span class="line"><span class="comment">    * 4</span></span><br><span class="line"><span class="comment">    * &#x27;timerStart&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;timerEnd&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;success&#x27;</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. 记住 script 和 setTimeout 是宏任务</span></span><br><span class="line"><span class="comment">    2. 首先执行 script 这个宏任务</span></span><br><span class="line"><span class="comment">    3. 碰到 new Promise，输出 1</span></span><br><span class="line"><span class="comment">    4. 碰到 setTimeout，放进宏任务队列</span></span><br><span class="line"><span class="comment">    5. 输出 2</span></span><br><span class="line"><span class="comment">    6. 碰到 .then()，但是没有钥匙（resolve），跳过</span></span><br><span class="line"><span class="comment">    7. 输出 4</span></span><br><span class="line"><span class="comment">    8. 当前没有微任务，执行下一个宏任务 setTimeout</span></span><br><span class="line"><span class="comment">    9. 输出 &#x27;timerStart&#x27;</span></span><br><span class="line"><span class="comment">    10. Promise 碰到 resolve，改变状态，表明 .then() 可以放进微任务了</span></span><br><span class="line"><span class="comment">    11. 输出 &#x27;timerEnd&#x27;</span></span><br><span class="line"><span class="comment">    12. 执行宏任务 setTimeout 下的微任务，即 Promise.then()</span></span><br><span class="line"><span class="comment">    13. 输出 &#x27;success&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error!&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then: &#x27;</span>, res);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch: &#x27;</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;then:  Error: error!&#x27;</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    return new Error(&#x27;error!&#x27;) 会被包裹成 return Promise.resolve(new Error(&#x27;error!&#x27;)) 返回到 .then()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="title class_">Date</span>.<span class="title function_">now</span>() - start);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res, <span class="title class_">Date</span>.<span class="title function_">now</span>() - start);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;timer&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;success 4&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;success 4&#x27;</span></span><br><span class="line"><span class="comment">  注释：也有 3/4 或者 4/5 的情况</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. new Promise 将 setTimeout 添加进宏任务</span></span><br><span class="line"><span class="comment">    2. 执行完宏任务 script，然后就执行 setTimeout</span></span><br><span class="line"><span class="comment">    3. 输出 &#x27;timer&#x27;</span></span><br><span class="line"><span class="comment">    4. 标记 Promise 状态为 resolve</span></span><br><span class="line"><span class="comment">    5. 将第一个 .then() 放进微任务</span></span><br><span class="line"><span class="comment">    6. 将第二个 .then() 放进微任务</span></span><br><span class="line"><span class="comment">    7. 因为步骤 5 和步骤 6 的时候，这两者都是相同 resolve 值，所以都是 &#x27;success&#x27;</span></span><br><span class="line"><span class="comment">    8. 输出 success 4</span></span><br><span class="line"><span class="comment">    9. 输出 success 4</span></span><br><span class="line"><span class="comment">    10. 如果执行比较慢，那么这两个输出的值会不一致。例如 3、4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> promise;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * TypeError: Chaining cycle detected for promise #&lt;Promise&gt;</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    不能返回 promise 本身，会造成死循环</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="number">2</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>))</span><br><span class="line">.<span class="title function_">then</span>(<span class="variable language_">console</span>.<span class="property">log</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. .then 和 .catch 的参数希望是函数，传入非函数会发生值透传</span></span><br><span class="line"><span class="comment">    2. 值透传导致第 1 个 then 和第 2 个 then 传入的都不是函数，导致它传到最后的 1 个 then 里面</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">resolve</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error!&#x27;</span>);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error: &#x27;</span>, err);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch: &#x27;</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * catch:  Error: error!</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    因为是 .resolve()，所以会执行 .then 第 1 个参数，然后 return 的值到 .catch 中</span></span><br><span class="line"><span class="comment">    而不是返回第 2 个参数上</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">resolve</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">resolve</span>(<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally2&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;这里是 finally2&#x27;</span>;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally2 后面的 then 函数&#x27;</span>, res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * &#x27;finally2&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;finally1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;finally2 后面的 then 函数 2&#x27;</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">promise2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">promise1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally1&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">promise2</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally2&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;promise1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;error&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;finally1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;finally2&#x27;</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. 执行 promise1()，进入里面代码</span></span><br><span class="line"><span class="comment">    2. 碰到 p，将 p 内容执行一遍，打印 &#x27;promise1&#x27;，同时将其状态改为 resolve</span></span><br><span class="line"><span class="comment">    3. 此时 promise1() 将 .then() 这个微任务推进微任务队列，我们记为微 1</span></span><br><span class="line"><span class="comment">    4. 步骤 1 到 3，promise1() 执行完毕</span></span><br><span class="line"><span class="comment">    5. 开始执行 promise2()，碰到 return new Promise，将其状态改为 reject</span></span><br><span class="line"><span class="comment">    6. 碰到 promise2() 中的 .then()，将其推进微任务队列，记为微 2</span></span><br><span class="line"><span class="comment">    7. script 这个宏任务执行完毕，开始执行微任务队列</span></span><br><span class="line"><span class="comment">    8. 推出微 1，打印 &#x27;1&#x27;，因为上面我们传的 p 是 resolve(&#x27;1&#x27;)</span></span><br><span class="line"><span class="comment">    9. 将 promise1() 里面的 finally1 推入微任务队列，记为微 3</span></span><br><span class="line"><span class="comment">    10. 推出微 2，因为前面标记的时候，传的值是 &#x27;error&#x27;，所以我们输出 &#x27;error&#x27;</span></span><br><span class="line"><span class="comment">    11. 推出微 3，输出 &#x27;finally1&#x27;</span></span><br><span class="line"><span class="comment">    12. 推出微 4，输出 &#x27;finally2&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><p>Promise.all() 和 Promise.race() 用法：</p><p>.all() 作用是接收一组异步任务，然后并行执行异步任务，并且在所有异步操作执行完后才执行回调。<br>.race() 作用也是接收一组异步任务，然后并行执行异步任务，只保留取第一个执行完成的异步操作的结果，其他的方法仍在执行，不过执行结果会被抛弃。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsync</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolved, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">        <span class="title function_">resolved</span>(x);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">      <span class="title function_">resolved</span>(x);  </span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">2</span>),</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">3</span>)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * 3</span></span><br><span class="line"><span class="comment">    * 2</span></span><br><span class="line"><span class="comment">    * [1, 2, 3]</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. Promise.all 将 3 个 runAsync 按顺序添加进方法中</span></span><br><span class="line"><span class="comment">    2. 在 script 这个宏任务中，依次添加 3 个 setTimeout</span></span><br><span class="line"><span class="comment">    3. 根据时间对宏任务队列中的 setTimeout 进行重新排序</span></span><br><span class="line"><span class="comment">    4. 1、2、3 对应的秒数为 1s、2s、1s，所以排序为 1 -&gt; 3 -&gt; 2</span></span><br><span class="line"><span class="comment">    5. 等待一秒后，分别输出 1、3</span></span><br><span class="line"><span class="comment">    6. 等待两秒后，输出 2</span></span><br><span class="line"><span class="comment">    7. 执行 .then()，依照 .all() 中数组的排序输出对应的数组结果（怎么进来怎么出去）</span></span><br><span class="line"><span class="comment">  适用场景：</span></span><br><span class="line"><span class="comment">    需要预先加载多种图片、静态文件等，可以通过 Promise.all() 进行处理</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol start="11"><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsync</span> (x) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x === <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">rej</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="title function_">res</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x)); </span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runReject</span> (x) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">rej</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line">    &#125;, <span class="number">1000</span> * x);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="title function_">runReject</span>(<span class="number">4</span>),</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">3</span>),</span><br><span class="line">  <span class="title function_">runReject</span>(<span class="number">2</span>),</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then: &#x27;</span>, res);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err: &#x27;</span>, err);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch: &#x27;</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * 3</span></span><br><span class="line"><span class="comment">    * err: 3</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * 2</span></span><br><span class="line"><span class="comment">    * 4</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. 首先，我们当 .all() 是一个队列，先进先出</span></span><br><span class="line"><span class="comment">    2. 此时宏任务依次添加 setTimeout(1)、setTimeout(4)、setTimeout(3)、setTimeout(2)</span></span><br><span class="line"><span class="comment">    3. OK，我们在前面说过，相同 setTimeout 会被排序，所以顺序变为 3 -&gt; 1 -&gt; 2 -&gt; 4</span></span><br><span class="line"><span class="comment">    4. 这时候的 setTimeout 对应的时间为 500ms、1s、2s、4s</span></span><br><span class="line"><span class="comment">    5. 然后，需要记住一点新特性：.catch 只能捕获 .all 里面最先的那个异常，并且只执行一次</span></span><br><span class="line"><span class="comment">    6. 所以，先执行 3 的时候，会依次输出 3 -&gt; err: 3</span></span><br><span class="line"><span class="comment">    7. 后面的 2 和 4 的异常不再抛出，依次输出 1 -&gt; 2 -&gt; 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsync</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolved, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">        <span class="title function_">resolved</span>(x);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">      <span class="title function_">resolved</span>(x);  </span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">2</span>),</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">3</span>)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res: &#x27;</span>, res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * &#x27;res: 1&#x27;</span></span><br><span class="line"><span class="comment">    * 3</span></span><br><span class="line"><span class="comment">    * 2</span></span><br><span class="line"><span class="comment">  注意：</span></span><br><span class="line"><span class="comment">    Node v10.16.0 的答案略有不同</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. Promise.race() 将 3 个 runAsync 按顺序添加进方法中</span></span><br><span class="line"><span class="comment">    2. 在 script 这个宏任务中，依次添加 3 个 setTimeout 宏任务：2 -&gt; 1 -&gt; 3</span></span><br><span class="line"><span class="comment">    3. 根据时间对宏任务队列中的 setTimeout 进行重新排序</span></span><br><span class="line"><span class="comment">    4. 1、2、3 对应的秒数为 1s、2s、1s，所以排序为 1 -&gt; 3 -&gt; 2</span></span><br><span class="line"><span class="comment">    5. 等待一秒后，输出 1</span></span><br><span class="line"><span class="comment">    6. 此时 .race() 迫不及待得想告诉你结果，跟着输出 res: 1</span></span><br><span class="line"><span class="comment">    7. 紧接着输出 3</span></span><br><span class="line"><span class="comment">    8. 等待两秒后，输出 2</span></span><br><span class="line"><span class="comment">  适用场景：</span></span><br><span class="line"><span class="comment">    用 race 给某个异步请求设置超时时间，并且在超时后执行相应的操作</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runAsync</span> (x) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (x === <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">rej</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line">      &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="title function_">res</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x)); </span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runReject</span> (x) &#123;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">res, rej</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">rej</span>(x, <span class="variable language_">console</span>.<span class="title function_">log</span>(x));</span><br><span class="line">    &#125;, <span class="number">1000</span> * x);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="title function_">runReject</span>(<span class="number">4</span>),</span><br><span class="line">  <span class="title function_">runAsync</span>(<span class="number">3</span>),</span><br><span class="line">  <span class="title function_">runReject</span>(<span class="number">2</span>),</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then: &#x27;</span>, res);</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err: &#x27;</span>, err);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;catch: &#x27;</span>, err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * 3</span></span><br><span class="line"><span class="comment">    * err: 3</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * 2</span></span><br><span class="line"><span class="comment">    * 4</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. 首先，我们当 .race() 是一个队列，先进先出</span></span><br><span class="line"><span class="comment">    2. 此时宏任务依次添加 setTimeout(1)、setTimeout(4)、setTimeout(3)、setTimeout(2)</span></span><br><span class="line"><span class="comment">    3. OK，我们在前面说过，相同 setTimeout 会被排序，所以顺序变为 3 -&gt; 1 -&gt; 2 -&gt; 4</span></span><br><span class="line"><span class="comment">    4. 这时候的 setTimeout 对应的时间为 500ms、1s、2s、4s</span></span><br><span class="line"><span class="comment">    5. 然后，需要记住一点：.race() 只会跑最先的那个</span></span><br><span class="line"><span class="comment">    6. 所以，先执行 3 的时候，会依次输出 3 -&gt; err: 3</span></span><br><span class="line"><span class="comment">    7. 后面的 2 和 4 的异常不再抛出，依次输出 1 -&gt; 2 -&gt; 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * 1</span></span><br><span class="line"><span class="comment">    * 3</span></span><br><span class="line"><span class="comment">    * 4</span></span><br><span class="line"><span class="comment">    * 2</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. 首先，我们执行 script 这个宏任务</span></span><br><span class="line"><span class="comment">    2. 碰到 async1()，执行里面代码，输出 1</span></span><br><span class="line"><span class="comment">    3. 碰到 await async2()，阻塞了，所以需要先执行 async2()</span></span><br><span class="line"><span class="comment">    4. 执行 async2()，输出 3</span></span><br><span class="line"><span class="comment">    5. 碰到 console.log(4)，输出 4</span></span><br><span class="line"><span class="comment">    6. 阻塞部分走完了，script 这个宏任务也走完了，接着走 async1() 后面的</span></span><br><span class="line"><span class="comment">    7. 输出 2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer1 start&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer1 end&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer2&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;async1 start&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;async2&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;start&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;promise1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;promise2&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;async1 end&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;timer1 start&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;timer2&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;timer1 end&#x27;</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. 首先，我们理顺一个事实：在 await 后面的，会等当前宏任务里面所有微任务执行完毕，方且执行</span></span><br><span class="line"><span class="comment">    2. 碰到 async1()，开始执行里面内容</span></span><br><span class="line"><span class="comment">    3. 输出 &#x27;async1 start&#x27;</span></span><br><span class="line"><span class="comment">    4. 将 &#x27;timer1 start&#x27; 丢进宏任务队列，标记为宏 1</span></span><br><span class="line"><span class="comment">    5. 将 &#x27;promise1&#x27; 丢进微任务队列，标记为微 1</span></span><br><span class="line"><span class="comment">    6. 碰到 await async2()，先执行 async2，阻塞下面的代码，标记后面代码为马后炮 1</span></span><br><span class="line"><span class="comment">    7. 执行 async2，碰到 &#x27;timer2&#x27;，将其丢进宏任务队列，标记为宏 2</span></span><br><span class="line"><span class="comment">    8. 碰到 &#x27;promise2&#x27;，将其丢进微任务队列，标记为微 2</span></span><br><span class="line"><span class="comment">    9. 输出 &#x27;async2&#x27;</span></span><br><span class="line"><span class="comment">    10. async2 走完，继续往下走，输出 start</span></span><br><span class="line"><span class="comment">    11. 当前有 3 个部分我们没走，分别是微 1、微 2 和马后炮 1</span></span><br><span class="line"><span class="comment">    12. 【死记】，碰到不走 11 这种情况，我们需要记住先执行当前微任务，再马后炮</span></span><br><span class="line"><span class="comment">    13. 执行微任务，输出 &#x27;promise1&#x27;、&#x27;promise2&#x27;</span></span><br><span class="line"><span class="comment">    14. 执行马后炮，将 &#x27;timer1 end&#x27; 丢进宏任务队列，即为宏 3</span></span><br><span class="line"><span class="comment">    15. 输出 &#x27;async1 end&#x27;</span></span><br><span class="line"><span class="comment">    16. 依次执行宏 1、宏 2 和 宏 3，输出 &#x27;timer1 start&#x27; -&gt; &#x27;timer2&#x27; -&gt; &#x27;timer1 end&#x27;</span></span><br><span class="line"><span class="comment">  灵魂提升：</span></span><br><span class="line"><span class="comment">    如果 &#x27;timer1 start&#x27; -&gt; &#x27;timer2&#x27; -&gt; &#x27;timer1 end&#x27; 对应的时间分别为 500ms、1000ms、500ms，请问输出啥？</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 success&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;async1 end&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res: &#x27;</span>, res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;script start&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;async1 start&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;promise1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;script end&#x27;</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. 特殊题</span></span><br><span class="line"><span class="comment">    2. 在 await 后面的 Promise 是没有返回值的，所以 await 会一直等待</span></span><br><span class="line"><span class="comment">    3. 这样子的话，async1 success 这些后面的内容都不会执行了</span></span><br><span class="line"><span class="comment">  思考：</span></span><br><span class="line"><span class="comment">    如果在 &#x27;promise1&#x27; 后面添加一行 resolve(&#x27;123&#x27;); 结果会怎样？</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise resolve&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 success&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;async1 end&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res: &#x27;</span>, res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promsie2&#x27;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;script start&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;async1 start&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;promise1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;promsie2&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;async1 success&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;res: async1 end&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;timer&#x27;</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    1. 紧跟上一题的分析，Promise 必须 resolve 了，await 后面的代码才会继续执行</span></span><br><span class="line"><span class="comment">    2. 先走整体 script 宏任务，输出 &#x27;script start&#x27;</span></span><br><span class="line"><span class="comment">    3. 碰到 async1() 的执行，走里面去看看</span></span><br><span class="line"><span class="comment">    4. 输出 &#x27;async1 start&#x27;</span></span><br><span class="line"><span class="comment">    5. 碰到 await new Prmise</span></span><br><span class="line"><span class="comment">    6. 输出 &#x27;promise1&#x27;</span></span><br><span class="line"><span class="comment">    7. 看到 resolve，改变 Promise 状态，告知 await 有等待对象，将后面的内容丢进微任务 1</span></span><br><span class="line"><span class="comment">    8. 往下执行后面的 new Promsie</span></span><br><span class="line"><span class="comment">    9. 输出 &#x27;promsie2&#x27;</span></span><br><span class="line"><span class="comment">    10. 将 setTimeout 丢进宏任务 1</span></span><br><span class="line"><span class="comment">    11. 现在有一个微任务 1 和一个宏任务 1</span></span><br><span class="line"><span class="comment">    12. 先走微任务 1</span></span><br><span class="line"><span class="comment">    13. 输出 &#x27;async1 success&#x27;</span></span><br><span class="line"><span class="comment">    14. 碰到 return，告知后面添加一个微任务 2</span></span><br><span class="line"><span class="comment">    15. 继续执行微任务 2，输出 &#x27;res: async1 end&#x27;</span></span><br><span class="line"><span class="comment">    16. 没有其他微任务了，输出宏任务队列，输出 &#x27;timer1&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;async1 success&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res: &#x27;</span>, res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序和分析：</span></span><br><span class="line"><span class="comment">  顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;async2&#x27;</span></span><br><span class="line"><span class="comment">    * Promise &#123;&lt;rejected&gt;: &quot;error&quot;&#125;</span></span><br><span class="line"><span class="comment">  分析：</span></span><br><span class="line"><span class="comment">    如果在 async 函数中抛出了错误，则终止错误结果，不会继续向下执行。throw new Error 也是如此。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">first</span> = (<span class="params"></span>) =&gt; (<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve1, reject1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve2, reject2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>);</span><br><span class="line">      <span class="title function_">resolve1</span>(<span class="number">6</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">resolve2</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">resolve1</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  p.<span class="title function_">then</span>(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res1: &#x27;</span>, res1);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="title function_">first</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res2: &#x27;</span>, res2);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序：</span></span><br><span class="line"><span class="comment">    * 3</span></span><br><span class="line"><span class="comment">    * 7</span></span><br><span class="line"><span class="comment">    * 4</span></span><br><span class="line"><span class="comment">    * res: 1</span></span><br><span class="line"><span class="comment">    * res: 2</span></span><br><span class="line"><span class="comment">    * 5</span></span><br><span class="line"><span class="comment">    * Promise&#123; &lt;resolve&gt; 1 &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">async1</span> = <span class="keyword">async</span>(<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer1&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;async1 success&#x27;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">async1</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res1: &#x27;</span>, res1);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span></span><br><span class="line">.<span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="number">2</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">3</span>))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="number">4</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res2: &#x27;</span>, res2);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer2&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;script start&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;async1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;promise1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;script end&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;res2: 1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;timer2&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;timer1&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//和上面一道题类似</span></span><br></pre></td></tr></table></figure>21.(这道题有疑惑)<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;resolve3&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;timer1&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;resolve1&#x27;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;resolve2&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;).<span class="title function_">finally</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;finally: &#x27;</span>, res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  执行顺序：</span></span><br><span class="line"><span class="comment">    * &#x27;resolve1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;finally: undefined&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;timer1&#x27;</span></span><br><span class="line"><span class="comment">    * &#x27;Promise &#123; &lt;resolved&gt; undefined &#125;&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="大厂题"><a href="#大厂题" class="headerlink" title="大厂题"></a>大厂题</h1><h2 id="实现红绿灯交互亮"><a href="#实现红绿灯交互亮" class="headerlink" title="实现红绿灯交互亮"></a>实现红绿灯交互亮</h2><p>红灯 3 秒亮一次，黄灯 2 秒亮一次，绿灯 1 秒亮一次，用 Promise 实现 3 个灯交替重复亮。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">red</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">yellow</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">green</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;green&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现定时器</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">light</span> = (<span class="params">timer,cb</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">cb</span>()</span><br><span class="line">        &#125;,timer)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">light</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//返回一个promise对象</span></span><br><span class="line">       <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">3000</span>,red)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">2000</span>,<span class="title function_">yellow</span>())</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">light</span>(<span class="number">1000</span>,<span class="title function_">green</span>())</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="22"><li>使用 Promise 实现每隔一秒输出 1、2、3<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">onToThree</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">    arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,next</span>)=&gt;</span>&#123;</span><br><span class="line">        prev.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(next)</span><br><span class="line">                    <span class="title function_">resolve</span>()</span><br><span class="line">                &#125;,<span class="number">1000</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,<span class="title class_">Promise</span>.<span class="title function_">resolve</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>实现 mergePromise 函数，将传进去的数组按先后顺序执行，并且把返回的值先后放在数组 data 中。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">time</span> = (<span class="params">timer</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;, timer)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax1</span> = (<span class="params"></span>) =&gt; <span class="title function_">time</span>(<span class="number">2000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax2</span> = (<span class="params"></span>) =&gt; <span class="title function_">time</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax3</span> = (<span class="params"></span>) =&gt; <span class="title function_">time</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergePromise</span> () &#123;</span><br><span class="line">  <span class="comment">// 在这里写代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mergePromise</span>([ajax1, ajax2, ajax3]).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// data 为 [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求分别输出</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// done</span></span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>实现<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">time</span> = (<span class="params">timer</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;, timer)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax1</span> = (<span class="params"></span>) =&gt; <span class="title function_">time</span>(<span class="number">2000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax2</span> = (<span class="params"></span>) =&gt; <span class="title function_">time</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ajax3</span> = (<span class="params"></span>) =&gt; <span class="title function_">time</span>(<span class="number">1000</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mergePromise</span> (arrayList) &#123;</span><br><span class="line">  <span class="comment">// 在这里写代码</span></span><br><span class="line">    <span class="keyword">const</span> data = []</span><br><span class="line">    <span class="keyword">const</span> promise =  <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">    </span><br><span class="line">    arrayList.<span class="title function_">forEach</span>(<span class="function"><span class="params">ajax</span>=&gt;</span>&#123;</span><br><span class="line">        promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">ajax</span>()</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            data.<span class="title function_">push</span>(res)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mergePromise</span>([ajax1, ajax2, ajax3]).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;done&quot;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data); <span class="comment">// data 为 [1, 2, 3]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要求分别输出</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">// done</span></span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure></li><li>封装一个异步加载图片的方法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="comment">// ...实现代码</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">      img.<span class="property">onload</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;异步加载图片&quot;</span>)</span><br><span class="line">          <span class="title function_">resolve</span>(img)</span><br><span class="line">      &#125;</span><br><span class="line">      img.<span class="property">onerror</span> = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加载失败了&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      img.<span class="property">src</span> = url</span><br><span class="line">  &#125;)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>限制异步操作并发数并尽可能快地完成<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> urls = [</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting1.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting2.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting3.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting4.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/AboutMe-painting5.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn6.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn7.png&quot;</span>,</span><br><span class="line">  <span class="string">&quot;https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/bpmn8.png&quot;</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadImg</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">        img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;一张图片加载完成&quot;</span>);</span><br><span class="line">            <span class="title function_">resolve</span>(img);</span><br><span class="line">        &#125;;</span><br><span class="line">        img.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Could not load image at&#x27;</span> + url));</span><br><span class="line">        &#125;;</span><br><span class="line">        img.<span class="property">src</span> = url;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">limitLoad</span>(<span class="params">urls, handler, limit</span>) &#123;</span><br><span class="line">    <span class="comment">// ...实现代码</span></span><br><span class="line">    <span class="keyword">const</span> sequene = [].<span class="title function_">concat</span>(urls)</span><br><span class="line">    <span class="comment">//进行初始化容器</span></span><br><span class="line">    <span class="keyword">const</span> promises = sequene.<span class="title function_">slice</span>(<span class="number">0</span>,limit).<span class="title function_">map</span>(<span class="function">(<span class="params">url,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">handler</span>(url).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> index</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//进行将这三个异步加载图片先让三个图片进行加载，最后放在一块加载</span></span><br><span class="line">    <span class="keyword">return</span> promises.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pCollect,url</span>)=&gt;</span>&#123;</span><br><span class="line">        pCollect.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">race</span>(promises)</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">fastIndex</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//获取道最快完成的index</span></span><br><span class="line">            promises[fastIndex] = <span class="title function_">handler</span>(url).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fastIndex</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error:&quot;</span>,error)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,<span class="title class_">Promise</span>.<span class="title function_">resolve</span>()).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">limitLoad</span>(urls, loadImg, <span class="number">3</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图片全部加载完毕&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></li><li>JS 实现异步调度器<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 题目：JS 实现异步调度器</span></span><br><span class="line"><span class="comment"> * 要求：</span></span><br><span class="line"><span class="comment"> *  JS 实现一个带并发限制的异步调度器 Scheduler，保证同时运行的任务最多有 2 个</span></span><br><span class="line"><span class="comment"> *  完善下面代码中的 Scheduler 类，使程序能正确输出</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Scheduler</span> &#123;</span><br><span class="line">  <span class="title function_">add</span>(<span class="params">promiseCreator</span>) &#123;</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">timeout</span> = (<span class="params">time</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;, time);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> scheduler = <span class="keyword">new</span> <span class="title class_">Scheduler</span>();</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addTack</span> = (<span class="params">time, order</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> scheduler</span><br><span class="line">    .<span class="title function_">add</span>(<span class="function">() =&gt;</span> <span class="title function_">timeout</span>(time))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(order));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">addTack</span>(<span class="number">1000</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="title function_">addTack</span>(<span class="number">500</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="title function_">addTack</span>(<span class="number">300</span>, <span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="title function_">addTack</span>(<span class="number">400</span>, <span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：2 3 1 4</span></span><br><span class="line"><span class="comment">// 一开始，1、2 两个任务进入队列</span></span><br><span class="line"><span class="comment">// 500ms 时，完成 2，输出 2，任务 3 进队</span></span><br><span class="line"><span class="comment">// 800ms 时，完成 3，输出 3，任务 4 进队</span></span><br><span class="line"><span class="comment">// 1000ms 时，完成 1，输出 1，没有下一个进队的</span></span><br><span class="line"><span class="comment">// 1200ms 时，完成 4，输出 4，没有下一个进队的</span></span><br><span class="line"><span class="comment">// 进队完成，输出 2 3 1 4</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> JS </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基础</title>
      <link href="/2023/01/29/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JS%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97/bind,apply,call/"/>
      <url>/2023/01/29/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JS%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97/bind,apply,call/</url>
      
        <content type="html"><![CDATA[<h1 id="确认this"><a href="#确认this" class="headerlink" title="确认this"></a>确认this</h1><p>如何指定this的值</p><ol><li>调用时指定<br>（1）call方法:func.call(thisArg,参数1,参数2…)<br>(2)apply方法func.apply(thisArg,[参数1,参数2…])</li><li>创建时指定<br>(1)bind:func.call(thisArg,参数1,参数2…)<br>(2)箭头函数</li></ol><h1 id="call"><a href="#call" class="headerlink" title="call"></a>call</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手写call方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 步骤</span></span><br><span class="line"><span class="comment"> * 1. 定义myCall函数</span></span><br><span class="line"><span class="comment"> * 2. 设置this并且调用原函数</span></span><br><span class="line"><span class="comment"> * 3. 接收剩余参数并返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myCall</span> = <span class="keyword">function</span>(<span class="params">context=<span class="variable language_">window</span>,...args</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">    context[key] = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> res = context[key](...args)</span><br><span class="line">    <span class="keyword">delete</span> context[key]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1.定义myApply方法</span></span><br><span class="line"><span class="comment"> * 2.设置this并调用原函数</span></span><br><span class="line"><span class="comment"> * 3.接收参数并返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义实现方法</span></span><br><span class="line"><span class="comment">//3.接收参数并返回结果</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myApply</span> = <span class="keyword">function</span>(<span class="params">thisArg,args</span>)&#123;</span><br><span class="line">    <span class="comment">//2.设置this并调用原函数</span></span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>)</span><br><span class="line">    thisArg[key] = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">const</span> res = thisArg[key](...args)</span><br><span class="line">    <span class="keyword">delete</span> thisArg[key]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//手写call方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 步骤</span></span><br><span class="line"><span class="comment"> * 1. 定义myCall函数</span></span><br><span class="line"><span class="comment"> * 2. 设置this并且调用原函数</span></span><br><span class="line"><span class="comment"> * 3. 接收剩余参数并返回结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myBind</span> = <span class="keyword">function</span> (<span class="params">content,...args</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">...thisArgs</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">call</span>(content,...args,...thisArgs)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> JS </category>
          
          <category> JS手写系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基础</title>
      <link href="/2023/01/29/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JS%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/"/>
      <url>/2023/01/29/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JS%E6%89%8B%E5%86%99%E7%B3%BB%E5%88%97/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h1 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h1><p>概念:当执行一个任务的过程中,在规定的时间段中,当触发一次就从这次来进行计时</p><p>通俗来说就是当你调用这个函数的时候,每次进入的时候,都要清除上一次的定时器,重新进行计时</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">fn</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> timeId</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">        timeId = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">        &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;input&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> func = <span class="keyword">function</span> (<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e&quot;</span>,e)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自己实现debounce方法</span></span><br><span class="line"><span class="comment"> * 1. 返回防抖动的新函数</span></span><br><span class="line"><span class="comment"> * 2. 原函数的this可以正常使用</span></span><br><span class="line"><span class="comment"> * 3. 原函数的参数可以正常使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func,wait = <span class="number">0</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timeId</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeId)</span><br><span class="line">        timeId = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(_this,args)</span><br><span class="line">        &#125;,wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deFunc = <span class="title function_">debounce</span>(func,<span class="number">500</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>,deFunc)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h1><p>概念:当一个任务执行的过程中,在规定的时间段中,不断触发的时候,只会执行第一次的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当没有定时器的时候就进入任务执行，触发定时器任务</span></span><br><span class="line"><span class="comment">//当有定时器的时候，说明此时还没有完成任务，那么就返回</span></span><br><span class="line"><span class="comment">//最后定时器执行完毕了。</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">throttle</span> = (<span class="params">fn,wait</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">let</span> timeId</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> arg = <span class="variable language_">arguments</span></span><br><span class="line">        <span class="keyword">const</span> _this = <span class="variable language_">this</span></span><br><span class="line">        <span class="keyword">if</span>(timeId!==<span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        timeId = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">fn</span>()</span><br><span class="line">            fn.<span class="title function_">apply</span>(_this,arg)</span><br><span class="line">            timeId = <span class="literal">undefined</span></span><br><span class="line">        &#125;,wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.video&#x27;</span>)</span><br><span class="line"></span><br><span class="line">video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadeddata&#x27;</span>,<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//视频加载完成时，读取并设置播放时间</span></span><br><span class="line">    video.<span class="property">currentTime</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;currentTime&#x27;</span>) || <span class="number">0</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> func = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;currentTime&#x27;</span>,video.<span class="property">currentTime</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> throttle = <span class="keyword">function</span> (<span class="params">func,wait=<span class="number">0</span></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timeId</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> _this = <span class="variable language_">this</span></span><br><span class="line">        <span class="comment">//开启了定时器，定时器没有结束的话，就拦住他来返回出去</span></span><br><span class="line">        <span class="keyword">if</span>(timeId !== <span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        timeId = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">func</span>()</span><br><span class="line">            func.<span class="title function_">apply</span>(_this,args)</span><br><span class="line">            timeId = <span class="literal">undefined</span></span><br><span class="line">        &#125;,wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> throttleFn = _.<span class="title function_">throttle</span>(func,<span class="number">1000</span>,&#123;<span class="attr">leading</span>:<span class="literal">false</span>&#125;)</span><br><span class="line"></span><br><span class="line">video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;timeupdate&#x27;</span>,throttleFn)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> JS </category>
          
          <category> S手写系列 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2023/01/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/01/27/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/%E6%AD%A3%E5%88%99%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="正则基础知识"><a href="#正则基础知识" class="headerlink" title="正则基础知识"></a>正则基础知识</h2><h3 id="第一章-基本概念"><a href="#第一章-基本概念" class="headerlink" title="第一章:基本概念"></a>第一章:基本概念</h3><p><strong>概念:</strong></p><p> 正则表达式(regular expression)是一个描述字符模式的对象，ECMAScript的RegExp 类表示正则表达式，</p><p> 而String和RegExp都定义了使用正则表达式进行强大的模式匹配和文本检索与替换的函数。</p><p> 正则表达式用于对字符串模式匹配及检索替换，是对字符串执行模式匹配的强大工具。</p><p><strong>作用:</strong></p><ol><li>提高用户体验</li><li>减轻服务器的压力</li></ol><h3 id="第二章-创建正则表达式"><a href="#第二章-创建正则表达式" class="headerlink" title="第二章:创建正则表达式"></a>第二章:创建正则表达式</h3><h4 id="1-使用new来创建"><a href="#1-使用new来创建" class="headerlink" title="1.使用new来创建"></a>1.使用new来创建</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;box&#x27;</span> , <span class="string">&#x27;gi&#x27;</span> );</span><br></pre></td></tr></table></figure><p>第一个参数是字符串；</p><p>第二个参数可选模式修饰符</p><table><thead><tr><th align="center">参数</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">g</td><td align="center">全局匹配</td></tr><tr><td align="center">i</td><td align="center">忽略大小写</td></tr><tr><td align="center">m</td><td align="center">多行匹配</td></tr></tbody></table><h4 id="2-使用字面量"><a href="#2-使用字面量" class="headerlink" title="2.使用字面量"></a>2.使用字面量</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/box/gi</span>;</span><br></pre></td></tr></table></figure><p>直接用2个 &#x2F;  ;</p><p>在俩个斜杠后加上模式修饰符；</p><p><strong>俩种创建方式比较:</strong></p><p>1.使用字面量方式创建用的更加广泛;</p><p>2.当要匹配的内容是变量时,只能使用new来创建.</p><h3 id="第三章-正则表达式的测试"><a href="#第三章-正则表达式的测试" class="headerlink" title="第三章:正则表达式的测试"></a>第三章:正则表达式的测试</h3><h4 id="1-test"><a href="#1-test" class="headerlink" title="1.test( )"></a>1.test( )</h4><blockquote><p>正则表达式对象.test(字符串)</p></blockquote><ul><li>参数：要匹配的字符串</li><li>返回值：匹配成功返回true，失败返回false</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>:</span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/Box/i</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;box&#x27;</span> ;</span><br><span class="line"><span class="title function_">alert</span>(exp.<span class="title function_">test</span>(str));</span><br><span class="line"><span class="comment">// =&gt;   true     //忽略大小写 ；</span></span><br></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">例<span class="symbol">2:</span></span><br><span class="line"><span class="built_in">var</span> <span class="built_in">exp</span> = /abc/g;</span><br><span class="line"><span class="built_in">var</span> str = &#x27;abcab&#x27;;</span><br><span class="line"><span class="built_in">var</span> res = exp.test(str);</span><br><span class="line">console.log(res);</span><br><span class="line">console.log(exp.test(str));</span><br><span class="line">console.log(exp.test(str));</span><br><span class="line">=&gt; <span class="built_in">true</span>//从第一个开始匹配,匹配到了abc 返回<span class="built_in">true</span>; </span><br><span class="line">=&gt; <span class="built_in">false</span>//由于开启了全局匹配,所以从上次匹配之后的位置开始匹配(也就是从第二个a开始);若没有g 则每次都会从头开始匹配</span><br><span class="line">=&gt; <span class="built_in">true</span>//由于上次匹配是<span class="built_in">false</span>并且已经将字符串str查找完了,所以又从头开始匹配</span><br></pre></td></tr></table></figure><p><strong>注:</strong></p><pre><code>开启了全局匹配g后,正则表达式内部有一个lastIndex的属性,用以记录下次开始查找的下标,保证其每次从lastIndex的位置开始查找</code></pre><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例<span class="number">3</span>:</span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/abc/g</span>;<span class="comment">//同一正则表达式匹配不同字符串</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;abcab&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str1));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str2));</span><br><span class="line"><span class="comment">// =&gt;  true;//从str1的0位开始匹配,匹配到了abc,返回true,此时lastIndex为3</span></span><br><span class="line"><span class="comment">// =&gt; false;//从str2中lastIndex的位置开始匹配,也就是从第二个a开始</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例<span class="number">4</span>:</span><br><span class="line"><span class="keyword">var</span> exp1 = <span class="regexp">/abc/g</span>;<span class="comment">//不同正则表达式匹配同一字符串</span></span><br><span class="line"><span class="keyword">var</span> exp2 = <span class="regexp">/abc/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp1.<span class="title function_">test</span>(str));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp2.<span class="title function_">test</span>(str));</span><br><span class="line"><span class="comment">// =&gt;  true;//从str1的0位开始匹配,匹配到了abc,返回true</span></span><br><span class="line"><span class="comment">// =&gt; true;//从str1的0位开始匹配,返回true</span></span><br></pre></td></tr></table></figure><h4 id="2-exec"><a href="#2-exec" class="headerlink" title="2.exec( )"></a>2.exec( )</h4><blockquote><p>exec(字符串)：该方法为专门为捕获组而设计的</p></blockquote><ul><li>参数：要匹配的字符串</li><li>返回值：返回的是一个数组。如果不匹配则返回null</li></ul><p><strong>关于返回值数组的说明：</strong></p><ul><li>它确实是Array的实例。</li><li>但是这个数组有两个额外的属性：index和 input</li><li>index：表示匹配的字符串在源字符串中的索引</li><li>input：表示匹配的源字符串。</li><li>数组的第一项是与整个模式匹配的字符串，其他项是与模式中捕获组匹配的字符串</li><li>如果没有捕获组，则数组中只有第一项。关于捕获组的概念以后再说</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例<span class="number">1</span>:</span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/abc/gi</span>;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&quot;aaabcccdabcAbcAdaBc&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> strNew = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (strNew=exp.<span class="title function_">exec</span>(str))&#123;<span class="comment">//使用while循环,将所有匹配到字符串输出来</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(strNew[<span class="number">0</span>])<span class="comment">//由于返回的是一个带有很多属性的数组,所以我们只要数组中的字符串,也就是索引为0.</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="第四章-正则表达式的规则"><a href="#第四章-正则表达式的规则" class="headerlink" title="第四章:正则表达式的规则"></a>第四章:正则表达式的规则</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">字符类:单个字母数字下划线<span class="comment">//匹配除换行符外的任意字符(当点放在[]中是，没有特殊意义)</span></span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/\d/g</span>;<span class="comment">// [0-9]</span></span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/\D/g</span>;<span class="comment">//[^0-9]</span></span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/\w/g</span>;<span class="comment">//[a-zA-Z0-9_];</span></span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/\W/g</span>;<span class="comment">//[^a-zA-Z0-9_];</span></span><br></pre></td></tr></table></figure><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">字符类:空白字符</span><br><span class="line"><span class="string">\0</span>                             匹配<span class="literal">null</span> 字符</span><br><span class="line"><span class="string">\b</span>                             匹配退格字符</span><br><span class="line"><span class="string">\n</span>                             匹配换行符</span><br><span class="line"><span class="string">\r</span>                             匹配回车字符</span><br><span class="line"><span class="string">\t</span>                             匹配制表符</span><br><span class="line"><span class="string">\s</span>                             匹配空白字符、空格、制表符和换行符</span><br><span class="line"><span class="string">\S</span>                             匹配非空白字符</span><br></pre></td></tr></table></figure><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">元字符/元符号                    匹配情况</span><br><span class="line">^                             行首匹配</span><br><span class="line"><span class="variable">$ </span>                            行尾匹配</span><br></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">字符类：重复字符</span><br><span class="line">元字符/元符号                                匹配情况</span><br><span class="line">?  例如（x?）                            匹配<span class="number">0</span>个或<span class="number">1</span> 个x</span><br><span class="line">*  例如（x*）                            匹配<span class="number">0</span>个或任意多个x</span><br><span class="line">+  例如（x+）                            匹配至少一个x</span><br><span class="line">(xyz)+                                     匹配至少一个(xyz)</span><br><span class="line">&#123;m,<span class="built_in">n</span>&#125; 例如x&#123;m,<span class="built_in">n</span>&#125;  <span class="built_in">n</span>&gt;=次数&gt;=m            匹配最少m个、最多<span class="built_in">n</span>个x</span><br><span class="line">&#123;<span class="built_in">n</span>&#125;                                        匹配前一项<span class="built_in">n</span>次     </span><br><span class="line">&#123;<span class="built_in">n</span>,&#125;                                    匹配前一项<span class="built_in">n</span>次，或者多次</span><br></pre></td></tr></table></figure><h4 id="1"><a href="#1" class="headerlink" title="1.[ ]"></a>1.[ ]</h4><blockquote><p>匹配[ ]内的任意一个字符</p></blockquote><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">exp</span> = <span class="regexp">/[abc]/gi</span>;<span class="comment">// []内代表匹配其中的一个字符: a 或 b 或 c</span></span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">exp</span> = <span class="regexp">/[a-zA-Z0-9_$]/g</span>;<span class="comment">//匹配26个大小写字母,0-9数字,下划线_  美元符$ 中的任意一个;</span></span><br></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">exp</span> = <span class="regexp">/[^a-zA-Z]/g</span><span class="comment">//匹配任意不在括号中的字符集中的字符;</span></span><br></pre></td></tr></table></figure><p>[ ]也可以配合?  *  +  {} 来使用;  如[a-z]+ 匹配至少一个[a-z]范围内的任意一个;</p><h4 id="2"><a href="#2" class="headerlink" title="2. ^"></a>2. ^</h4><p><strong>俩种用法:</strong></p><blockquote><p>1.放在[ ] 内 表示非</p></blockquote><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">exp</span> = <span class="regexp">/[^a-zA-Z]/g</span><span class="comment">//匹配任意不在括号中的字符集中的字符;</span></span><br></pre></td></tr></table></figure><blockquote><p>2.放在[ ] 外,表示行首匹配</p></blockquote><figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">exp</span> = <span class="regexp">/^\d/g</span>;<span class="comment">//规定行首必须是数字</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123qq&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">exp</span>.test(str));<span class="comment">//行首为数字1,返回true;  </span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">exp</span>.lastIndex);<span class="comment">//此时lastIndex 为1</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="built_in">exp</span>.test(str));<span class="comment">//从下标为1的位置开始匹配,虽然下标为1的位置是数字,但却不是行首,返回false;</span></span><br></pre></td></tr></table></figure><h4 id="3"><a href="#3" class="headerlink" title="3. $"></a>3. $</h4><blockquote><p>表示行尾匹配,用法与^ 相近</p></blockquote><p>^ 和 $ 合用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/^\d\d$/g</span>;<span class="comment">//规定行首和行尾必须是数字</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;12&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));<span class="comment">// true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="property">lastIndex</span>);<span class="comment">// 2</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));<span class="comment">//false</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="property">lastIndex</span>);<span class="comment">//0</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));<span class="comment">//true</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str2));<span class="comment">//false//exp中规定了行首行尾为数字,中间无内容</span></span><br></pre></td></tr></table></figure><h4 id="4"><a href="#4" class="headerlink" title="4. ."></a>4. .</h4><blockquote><p>匹配除换行符外的任意字符(当点放在[ ]中是，没有特殊意义)</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/./g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));</span><br><span class="line"><span class="comment">// =&gt;    true</span></span><br></pre></td></tr></table></figure><p>若想匹配它本身.</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/\./g</span>;</span><br></pre></td></tr></table></figure><h4 id="5"><a href="#5" class="headerlink" title="5. |"></a>5. |</h4><blockquote><p>择一匹配(管道符号)  表示或</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/a|b/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));</span><br><span class="line"><span class="comment">// =&gt;    true</span></span><br></pre></td></tr></table></figure><p><strong>数量词的匹配:默认都是贪婪匹配</strong></p><h4 id="6"><a href="#6" class="headerlink" title="6. ?"></a>6. ?</h4><blockquote><p>匹配0个或者1个</p></blockquote><h4 id="7"><a href="#7" class="headerlink" title="7. *"></a>7. *</h4><blockquote><p>匹配0个或者多个</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/a*/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aaaaa&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h4 id="8"><a href="#8" class="headerlink" title="8. +"></a>8. +</h4><blockquote><p>匹配1个或多个</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/a+/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;aaaaa&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h4 id="9-n"><a href="#9-n" class="headerlink" title="9. {n}"></a>9. {n}</h4><blockquote><p>匹配n个,只能是n个</p></blockquote><h4 id="10-n"><a href="#10-n" class="headerlink" title="10. {n,}"></a>10. {n,}</h4><blockquote><p>匹配至少n个</p></blockquote><h4 id="11-n-m"><a href="#11-n-m" class="headerlink" title="11. {n,m}"></a>11. {n,m}</h4><blockquote><p>匹配至少n个,最多m个</p></blockquote><h4 id="第五章-基本的正则表达式验证"><a href="#第五章-基本的正则表达式验证" class="headerlink" title="第五章:基本的正则表达式验证"></a>第五章:基本的正则表达式验证</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">写一个正在表达式,判断手机号是否合法</span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/1[34578]\d&#123;9&#125;$/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;13979318939&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">test</span>(str));</span><br><span class="line"><span class="comment">// =&gt; true</span></span><br><span class="line">写一个正在表达式,判断邮箱是否合法</span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/^\w&#123;3,15&#125;@[\w-]+\.(com|cn|net|org|edu|com\.cn)$/gi</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;133_d@cn.com.cn&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">exec</span>(str)[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// =&gt;  133_d@cn.com.cn   </span></span><br><span class="line">写一个正则表达式,判断图片的地址是否合法</span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/^(http|https):\/\/.+\.(jpg|jpeg|gif|png)$/gi</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;http://3323498dsfledf.png&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(exp.<span class="title function_">exec</span>(str)[<span class="number">0</span>]);</span><br><span class="line"><span class="comment">// =&gt;  http://3323498dsfledf.png</span></span><br><span class="line">写一个正则表达式,爬取一堆字符串中的所有图片地址</span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/http:\/\/[^:]+\.(jpg|jpeg|gif|png)/gi</span>;</span><br><span class="line">写一个正则表达式,将字符串中的重复去掉</span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/(.)\1+/gi</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aabbccdd&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(exp,<span class="string">&#x27;$1&#x27;</span>));</span><br><span class="line"><span class="comment">// =&gt;  abc  </span></span><br></pre></td></tr></table></figure><h4 id="第六章-方法"><a href="#第六章-方法" class="headerlink" title="第六章:方法"></a>第六章:方法</h4><h5 id="1-search"><a href="#1-search" class="headerlink" title="1.search( )"></a>1.search( )</h5><blockquote><p>str.search(exp);</p><p>检索与正则表达式相匹配的第一个匹配项的索引。</p><p>返回值: 索引 ,没有返回-1;</p></blockquote><p><strong>注:search( )不支持全局,每次调用总是从0开始查找.加不加g都一样</strong></p><h5 id="2-match"><a href="#2-match" class="headerlink" title="2.match( )"></a>2.match( )</h5><blockquote><p>str.match(exp);</p><p>把满足正则表达式的所有字符串一起返回</p><p>返回值: 数组 ,没有返回null;</p></blockquote><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> str = <span class="string">&quot;abc134ABC244co9&quot;</span>;</span><br><span class="line">console.log(str.match(/\d+/gi));//获取str中的所有数字的数组</span><br><span class="line">=&gt;  [<span class="string">&quot;134&quot;</span>,<span class="string">&quot;244&quot;</span>,<span class="string">&quot;9&quot;</span>]</span><br></pre></td></tr></table></figure><p><strong>注:如果想获取所有的满足的,应该使用全局g,使用全局的时候,分组的信息则拿不到</strong></p><h5 id="3-replace"><a href="#3-replace" class="headerlink" title="3.replace( )"></a>3.replace( )</h5><blockquote><p>str.replace(exp,newStr);</p><p>将正则表达式替换</p><p>返回值: 替换之后的字符串</p></blockquote><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> str = <span class="string">&quot;123aaa244&quot;</span>;</span><br><span class="line">console.log(str.replace(/\d/gi,<span class="string">&quot;&quot;</span>));//将str中的数字全部去掉</span><br><span class="line">=&gt;  aaa</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">写一个正则表达式,将字符串中的重复去掉</span><br><span class="line"><span class="keyword">var</span> exp = <span class="regexp">/(.)\1+/gi</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;aabbccdd&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">replace</span>(exp,<span class="string">&#x27;$1&#x27;</span>));</span><br><span class="line"><span class="comment">// =&gt;  abc  </span></span><br></pre></td></tr></table></figure><h5 id="4-split"><a href="#4-split" class="headerlink" title="4.split( )"></a>4.split( )</h5><blockquote><p>str.split(exp,length);</p><p>length:可选参,切出来的数组的最大长度</p><p>使用split 拆分成字符串数组</p><p>返回替换之后的字符串</p></blockquote><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">var</span> str = <span class="string">&quot;102dsfe00dfefsf55&quot;</span>;</span><br><span class="line"><span class="built_in">var</span> <span class="built_in">exp</span> = /\D+/gi;//用所有非数字来切割</span><br><span class="line">console.log(str.split(<span class="built_in">exp</span>));</span><br><span class="line">=&gt;[<span class="string">&quot;102&quot;</span>,<span class="string">&quot;00&quot;</span>,<span class="string">&quot;55&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="正则分组"><a href="#正则分组" class="headerlink" title="正则分组"></a>正则分组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正则捕获到的结果会被储存起来,每一个分组捕获的内容会从1开始被编号储存</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span>;</span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">&#x27;2018-04-18&#x27;</span>;</span><br><span class="line">reg.<span class="title function_">test</span>(dateStr);  <span class="comment">//true  //这一步是需要有的,下面的代码才会有效</span></span><br><span class="line"><span class="title class_">RegExp</span>.<span class="property">$1</span>   <span class="comment">//2018</span></span><br><span class="line"><span class="title class_">RegExp</span>.<span class="property">$2</span>   <span class="comment">//04</span></span><br><span class="line"><span class="title class_">RegExp</span>.<span class="property">$3</span>  <span class="comment">//18</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个简单例子:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面的这种处理日期格式的还是比较实用的</span></span><br><span class="line"><span class="keyword">var</span> dateStr = <span class="string">&#x27;2018/04/18&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\d&#123;4&#125;)\/(\d&#123;2&#125;)\/(\d&#123;2&#125;)/</span>;</span><br><span class="line">dateStr = dateStr.<span class="title function_">replace</span>(reg, <span class="string">&#x27;$1-$2-$3&#x27;</span>) <span class="comment">//&quot;2018-04-18&quot;</span></span><br><span class="line"><span class="comment">// 虽然dateStr.replace(/\//g,&#x27;-&#x27;)这句代码也可以实现相同的结果,还比较简单,但是</span></span><br><span class="line"><span class="comment">// 就觉得上面的正则方式的代码很帅;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络.md</title>
      <link href="/2023/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一单元"><a href="#第一单元" class="headerlink" title="第一单元"></a>第一单元</h1><h2 id="因特网概述"><a href="#因特网概述" class="headerlink" title="因特网概述"></a>因特网概述</h2><h3 id="网络、互联网、因特网"><a href="#网络、互联网、因特网" class="headerlink" title="网络、互联网、因特网"></a>网络、互联网、因特网</h3><p>网络:由若干节点和链接这些节点的链路构成的</p><p>互联网(internet):网络的集合，多个网络可以通过路由器互相连接</p><p>因特网(Internet):全球最大的、开放的、由众多网络组成的国际性网络</p><h3 id="因特网的组成"><a href="#因特网的组成" class="headerlink" title="因特网的组成"></a>因特网的组成</h3><p><strong>边缘部分</strong><br>有所有连接在因特网上的主机组成。这部分用户可以直接使用</p><p><strong>核心部分</strong><br>由大量网络和大量连接在这些网络上的路由器组成，这部分为边缘部分提供服务(提供联通和交换)。</p><h2 id="三种交换模式"><a href="#三种交换模式" class="headerlink" title="三种交换模式"></a>三种交换模式</h2><p>电路交换网络：在源节点和目的节点之间建立一条专用通道，将整个报文的比特流传送。最典型的是传统电话网络。</p><ul><li>建立连接（分配通信资源）</li><li>通话（一直占用通信资源，其余的不能进行）</li><li>释放连接（归还通信资源）</li></ul><p>报文交换网络：用户数据与源地址、目的地址、校验码等一同封装成报文，由相邻节点存储转发，直到到达目的节点。也叫”存储-转发网络”。</p><p>分组交换网络：将数据分成固定长度的块，每块加上源地址、目的地址等辅助信息组成分组，由相邻节点存储转发，也叫”包交换网络”。</p><ul><li>发送方:构造分组，发送分组</li><li>路由器:缓存分组，转发分组</li><li>接收方:接受分组，还原报文</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img.png" alt="image"></p><h2 id="计算机网络分类"><a href="#计算机网络分类" class="headerlink" title="计算机网络分类"></a>计算机网络分类</h2><p><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_1.png" alt="image_1"></p><h2 id="计算机网络性能指标"><a href="#计算机网络性能指标" class="headerlink" title="计算机网络性能指标"></a>计算机网络性能指标</h2><blockquote><p>前提知识:比特。计算机中数据量的单位。</p><p>常见的数据量单位:</p><p>8bit &#x3D; 1Byte</p><p>KB &#x3D; 2^10Byte</p><p>MB &#x3D; 2^20Byte</p><p>GB &#x3D; 2^30Byte</p><p>TB &#x3D; 2^40Byte</p></blockquote><p>速率：连接到计算机网络上的主机在数字信道上传送数据的速率，也称数据率或者比特率，单位是 b&#x2F;s (比特&#x2F;秒)。<br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_2.png" alt="image_2"></p><p>带宽：最高数据率,发送速率，单位是 b&#x2F;s (比特&#x2F;秒)。注意与通信线路的带宽区分，后者表示允许通过的信号频带范围，单位为赫兹。</p><p>吞吐量：单位时间内通过某网络的数据量，受网络带宽或网络额定速率的限制。</p><p>时延，分为四部分：</p><ul><li><p>发送时延：从发送分组的第一个比特到最后一个比特所用的时间，也叫传输时延。</p><p>发送时延&#x3D;分组长度&#x2F;信道宽度（带宽）</p></li><li><p>传播时延：电磁波在信道中传播一定的距离所需的时间。</p><p>传播时延&#x3D;信道长度&#x2F;光速:3*10^8m&#x2F;s</p></li><li><p>处理时延：主机收到分组后，为处理分组所需的时间。</p></li><li><p>排队时延：分组在路由器的输入队列和输出队列</p><p>时延&#x3D;发送时延+传播时延+处理时延+排队时延</p></li></ul><p>例题:<br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_3.png" alt="image_3"><br>往返时间</p><p>时延带宽积</p><p>丢包率</p><p>利用率</p><h1 id="网络体系"><a href="#网络体系" class="headerlink" title="网络体系"></a>网络体系</h1><h2 id="网络体系分层"><a href="#网络体系分层" class="headerlink" title="网络体系分层"></a>网络体系分层</h2><p><a href="https://pic.leetcode-cn.com/1612150605-NindRH-image.png">https://pic.leetcode-cn.com/1612150605-NindRH-image.png</a><br>Ip是最核心的部分</p><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><p>主要任务：在物理媒介上实现比特流的透明传输。</p><p>🌸 注意：透明传输指的是不管所传数据是什么样的比特流组合，都能够在链路上传送，不会引起接收端误会。因为如果有某段比特组合恰好和某控制信息完全一样时，接收端会造成误会，以为它是某控制信息，此时就需要采取某种措施消除误会，保证透明传输。</p><blockquote><p>注意：物理媒介不属于物理层协议内部，有些人把物理媒体当作第0层，包括双绞线、同轴电缆、无线信道等等。</p></blockquote><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><p>主要任务：把网络层传来的 IP 数据报组装成帧。传输单位：帧；</p><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><p>主要任务：为分组交换网上的不同主机提供通信服务。路由器生成转发表，一句转发表转发分组至下一个路由表。传输单位：数据报；</p><p>典型协议:IP，IPX，ICMP，IGMP，ARP，RARP，OSPF等</p><h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><p>主要任务：提供端到端的通信，负责向两台主机中进程之间的通信提供通用的数据传输服务，传输单位：报文段。TCP:面向连接的、可靠的数据传输服务，UDP:提供无连接的尽最大努力的数据传输服务。传输单位为用户数据报<br>典型协议:TCP，UDP等</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>主要任务：为应用程序提供网络服务，与用户的应用界面。通过特定的应用进程交互来实现特定的网络应用。</p><p>典型协议:HTTP，FTP（文件传输），DNS（域名解析），SMTP（传邮件）等</p><p>谐音记忆法，“物联（链）网淑（输）惠（会）试（示）用”，淑慧小姐姐在试用物联网。</p><h2 id="网络体系分层的必要性"><a href="#网络体系分层的必要性" class="headerlink" title="网络体系分层的必要性"></a>网络体系分层的必要性</h2><p>就是通过将多个问题拆分为多个子问题来进行解决。<br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_4.png" alt="imag_4"></p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_5.png" alt="image_5"><br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_10.png" alt="image_10"></p><h2 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h2><p>实体,协议,服务</p><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><p>实体:任何可发送或者接受信息的硬件或者软件进程。</p><p>对等实体:收发双方相同的实体。<br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_6.png" alt="image_6"></p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>概念:控制两个对等实体进行逻辑对话的规则的集合。<br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_7.png" alt="image_7"><br>这种通信是我们假设出来的通信</p><p>协议三要素:语法、语义、同步</p><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><p>概念：在协议的控制下，两个对等实体间的逻辑通信使得本层能够向上一层提供服务。</p><p>协议是水平的，服务是垂直的。</p><p>实体能够看得到相邻下层所提供的服务，但并不知道实现该服务的具体协议。(就相当于你享受使用手机提供的服务，但不必知道手机的工作原理)<br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_8.png" alt="image_8"></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>服务访问点︰在同一系统中相邻两层的实体交换信息的逻辑接口，用于区分不同的服务类型。</p><ul><li>数据链路层的服务访问点为帧的“类型”字段。</li><li>数据链路层的服务访问点为帧的“类型”字段。</li><li>数据链路层的服务访问点为帧的“类型”字段。数据链路层的服务访问点为帧的“类型”字段。</li></ul><p>服务原语:上层与下层交换一些信息必须与下层交换一些命令。</p><p><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/img_9.png" alt="image_9"></p><h1 id="第二单元物理层"><a href="#第二单元物理层" class="headerlink" title="第二单元物理层"></a>第二单元物理层</h1><blockquote><p>物理层就是在各种传输媒体中传输比特0和1，进行透明传输。特别注意，物理层中不包含物理媒介，而是确定与传输媒体的接口特性：</p><p>什么是透明传输:不管传输的数据是什么样的比特组合，都能够在链路上传输，尽可能屏蔽掉不同的传输媒体和通信手段的差异。</p></blockquote><h2 id="物理层的功能"><a href="#物理层的功能" class="headerlink" title="物理层的功能"></a>物理层的功能</h2><p>接口特性:</p><ol><li>机械特性:接口所用接线器的一些物理属性如接口形状、接口尺寸</li><li>电气特性:接口电缆的各条线上出现的电压范围 </li><li>功能特性:某条线上出现的某一电平的电压的意义</li><li>过程特性:不同功能的各种可能时间的出现顺序</li></ol><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><p>数据通信系统:</p><p>一个数据通信系统包括三部分:数据源、传输系统和目的系统。</p><p>三种通信方式:</p><ol><li>单工通信:数据源发送数据，接收系统不发送数据。(电视机)</li><li>半双工通信:数据源发送数据，接收系统可以发送数据。(对讲机)</li><li>全双工通信:数据源和接收系统可以同时发送和接收数据。(电话)</li></ol><p>基带信号</p><ul><li>信源发出的没有经过调制的原始信号</li><li>因为里面有较多的低频成分，因此必须对基带信号进行调制</li><li>有模拟信号源产生的信号为模拟基带信号</li><li>计算机产生的二进制信号为数字基带信号</li></ul><p>基带传输</p><ul><li>将基带信号(0和1用两种不同的电压表示:编码)直接送到数字信道上传输方式：</li><li>传输的是基带信号:近距离传输</li></ul><p>宽带传输</p><ul><li>将基带信号经过调制后送到模拟信道上传输方式,也成为频道传输</li><li>传输的宽带信号:远距离传输</li><li>带通调制，把基带信号的频率范围搬移到较高的频段上，并转化为模拟信号</li></ul><p>非归零编码:正电平代表1,负电平代表0</p><p>归零编码:正脉冲代表1,负脉冲代表0</p><p><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/20240202181311.png" alt="曼彻斯特编码和差分曼彻斯特编码"></p><p>基本的带通调制方法:<br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/20240202181616.png" alt="基本的带通调制方法"></p><h2 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h2><p><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/20240202182152.png" alt="码元基本概念"></p><h2 id="信道复用技术"><a href="#信道复用技术" class="headerlink" title="信道复用技术"></a>信道复用技术</h2><p>多路复用技术:多个信号组合在一条物理信道上进行传输，使得多个计算机或终端设备共享信道资源，提高信道利用率。</p><p>它允许用户使用一个共享信道进行通信，降低成本，提高利用率。</p><p>分为</p><ul><li>频分多路复用</li><li>时分多路复用</li></ul><ol><li><p>频分多路复用</p><blockquote><p>将整个带宽分为多份,用户在分配到一定的频带后,在通信过程中自始至终地占用这个频带。频分复用地所有用户在同样的时间占用不同的带宽资源。</p></blockquote></li><li><p>时分多路复用</p><blockquote><p>将时间划分为一段段登场的时分复用帧,每一个用户在每一个TDM帧中占用固定序号的时隙。(例如阶梯教室根据时间表划分上课的班级)</p></blockquote></li></ol><p>时间利用率不高<br>3. 统计时分复用<br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/20240205204529.png" alt="统计时分复用"><br>数据发往复用器，复用器顺序扫描，把复用器中的数据放入帧中，一个STDM(动态分配时隙)帧满了就发出。<br>4. 波分多路复用<br><img src="https://cdn.jsdelivr.net/gh/Charlotte-n/image@main/blog/jw/20240205204645.png" alt="波分多路复用"></p><p>将两种或多种不同波长的光载信号，在发送端经复用器把这些光载信号聚合在一起，并耦合道光线路中进行传输。</p><p>接收端分用器将各种波长的光波进行分离<br>5. 码分多址复用<br>用户使用经过特殊挑选的不同码型,彼此不会受到干扰。(当使用同一带宽的时候)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>面试01-三件套篇</title>
      <link href="/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/HTML+CSS/html%E5%92%8Ccss/"/>
      <url>/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/HTML+CSS/html%E5%92%8Ccss/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1>]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> HTML+CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>单独启动安卓模拟机</title>
      <link href="/2023/01/26/%E8%B7%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/react-native%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/%E5%90%AF%E5%8A%A8%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
      <url>/2023/01/26/%E8%B7%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/react-native%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/%E5%90%AF%E5%8A%A8%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<ol><li>找到<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">D:</span>\Android\Sdk</span><br></pre></td></tr></table></figure></li><li>进入:<figure class="highlight moonscript"><table><tr><td class="code"><pre><span class="line">cd <span class="name">D</span>:\Ymjweb\android\sdk\emulator</span><br></pre></td></tr></table></figure></li><li>列出安卓模拟器: <figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line">.\<span class="string">emulator</span>.<span class="string">exe</span> -<span class="built_in">list-avds\emulator.exe</span> -<span class="built_in">list-avds</span></span><br></pre></td></tr></table></figure></li><li>启动指定安卓模拟器:<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">.<span class="string">\emulator.exe</span> -avd Pixel_3_API_30</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 跨端学习 </category>
          
          <category> react-native踩坑日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络.md</title>
      <link href="/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/"/>
      <url>/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%9D%A2%E7%BB%8F%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> 计算机网络.md </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>react native踩坑日结</title>
      <link href="/2023/01/26/%E8%B7%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/react-native%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/"/>
      <url>/2023/01/26/%E8%B7%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0/react-native%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/%E8%B8%A9%E5%9D%91%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="出现了版本错误"><a href="#出现了版本错误" class="headerlink" title="出现了版本错误"></a>出现了版本错误</h1><p>不知道怎么回事,突然expo版本升级了:50.0.5,然后react-native没有升级，导致了版本不适配，还好有一个习惯就是把代码推到仓库,然后进行把expo改为了:50.0.0之后,重新下载依赖就可以正常使用了</p><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><h2 id="生成keytools"><a href="#生成keytools" class="headerlink" title="生成keytools"></a>生成keytools</h2><p>注意:powershell要开管理员模式，才能生成keytools</p><h2 id="开起一个rn项目时出现的错误"><a href="#开起一个rn项目时出现的错误" class="headerlink" title="开起一个rn项目时出现的错误"></a>开起一个rn项目时出现的错误</h2><p>每次开启一个项目的时候，可能时rn升级的原因，每次要下载依赖，下载gradlew的时候总是因为网络问题下载不成功</p><p>解决办法:<br>在官方下载相应的包，放在</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> 跨端学习 </category>
          
          <category> react-native踩坑日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6</title>
      <link href="/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/ES6/ES6/"/>
      <url>/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/ES6/ES6/</url>
      
        <content type="html"><![CDATA[<h1 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h1><ol><li>块级作用域</li><li>暂时性死局<br>在let命令声明变量tmp之前，都属于变量tmp的“死区”。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> x; <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line"><span class="comment">//一个变量没有被声明,那么就不会报错</span></span><br><span class="line"><span class="keyword">typeof</span> undeclared_variable <span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure>这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。<br><code>使用let声明变量时，只要变量在还没有声明完成前使用，就会报错。</code></li><li>不存在变量提升</li><li>不允许重复声明</li><li>块级作用域</li></ol><p>const</p><p>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><ol><li>总体的形式就是说左边的形式和右边的形式一样的话，就能给左边的变量进行上赋值。</li><li>支持默认值</li><li>支持数组也支持对象</li><li>当没有该变量的时候，会返回undefined</li><li>对象的话还可以给他们起别名<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">foo <span class="comment">// error: foo is not defined</span></span><br><span class="line"><span class="comment">//复杂的解构例子</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">p</span>: [</span><br><span class="line">        <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">        &#123; <span class="attr">y</span>: <span class="string">&#x27;World&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; p, <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line">y <span class="comment">// &quot;World&quot;</span></span><br><span class="line">p <span class="comment">// [&quot;Hello&quot;, &#123;y: &quot;World&quot;&#125;]</span></span><br></pre></td></tr></table></figure></li><li>解构还可以解构继承的属性<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj1, obj2);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; foo &#125; = obj1;</span><br><span class="line">foo <span class="comment">// &quot;bar&quot;</span></span><br></pre></td></tr></table></figure></li><li>字符串也能解构</li><li>数值和布尔值要解构的话需要先转化为对象，null和undefined不能解构。</li><li>函数参数的解构</li><li>应用场景<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.交换变量的值</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br><span class="line"><span class="comment">//2.函数参数的默认值</span></span><br><span class="line"><span class="comment">//3.遍历 Map 结构</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;first&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;second&#x27;</span>, <span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&quot; is &quot;</span> + value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// first is hello</span></span><br><span class="line"><span class="comment">// second is world</span></span><br><span class="line"><span class="comment">// 获取键名</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取键值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [,value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="字符串拓展"><a href="#字符串拓展" class="headerlink" title="字符串拓展"></a>字符串拓展</h1><ol><li>模板字符串</li><li>标签模板<br>标签模板其实不是模板，而是函数调用的一种特殊形式。“标签”指的就是函数，紧跟在后面的模板字符串就是它的参数<br>但是，如果模板字符里面有变量，就不是简单的调用了，而是会将模板字符串先处理成多个参数，再调用函数。   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">tag<span class="string">`Hello <span class="subst">$&#123; a + b &#125;</span> world <span class="subst">$&#123; a * b &#125;</span>`</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="title function_">tag</span>([<span class="string">&#x27;Hello &#x27;</span>, <span class="string">&#x27; world &#x27;</span>, <span class="string">&#x27;&#x27;</span>], <span class="number">15</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tag</span>(<span class="params">stringArr, value1, value2</span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tag</span>(<span class="params">stringArr, ...values</span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>应用场景<br>多语言、敏感词过滤、国际化的i18n实现<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">i18n<span class="string">`Welcome to <span class="subst">$&#123;siteName&#125;</span>, you are visitor number <span class="subst">$&#123;visitorNumber&#125;</span>!`</span></span><br><span class="line"><span class="comment">// &quot;欢迎访问xxx，您是第xxxx位访问者！&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="字符串新增方法"><a href="#字符串新增方法" class="headerlink" title="字符串新增方法"></a>字符串新增方法</h1><ol><li>String.raw()</li><li>includes(), startsWith(), endsWith()</li><li>repeat()</li><li>replaceAll() </li><li>at() <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">str.<span class="title function_">at</span>(<span class="number">1</span>) <span class="comment">// &quot;e&quot;</span></span><br><span class="line">str.<span class="title function_">at</span>(-<span class="number">1</span>) <span class="comment">// &quot;o&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="函数的拓展"><a href="#函数的拓展" class="headerlink" title="函数的拓展"></a>函数的拓展</h1><ol><li>函数参数的默认值<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">   <span class="comment">//默认值为惰性的，每次都重新计算表达式的值。</span></span><br><span class="line">   <span class="keyword">let</span> x = <span class="number">99</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">p = x + <span class="number">1</span></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">100</span>;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a, b = <span class="string">&#x27;world&#x27;</span> &#125; = &#123; a: <span class="string">&#x27;hello&#x27;</span> &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">// world</span></span><br><span class="line"><span class="comment">//2。如果传入undefined，将触发该参数等于默认值，null则没有这个效果。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x = <span class="number">5</span>, y = <span class="number">6</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">undefined</span>, <span class="literal">null</span>)</span><br><span class="line"><span class="comment">// 5 null</span></span><br></pre></td></tr></table></figure></li><li>函数的length属性<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定了默认值以后，函数的length属性，将返回没有指定默认值的参数个数。也就是说，指定了默认值后，length属性将失真。</span></span><br><span class="line">(<span class="keyword">function</span> (<span class="params">a</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 1</span></span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 0</span></span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">a, b, c = <span class="number">5</span></span>) &#123;&#125;).<span class="property">length</span> <span class="comment">// 2</span></span><br><span class="line"><span class="comment">//不包括rest长度</span></span><br></pre></td></tr></table></figure></li><li>作用域<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x, y = <span class="keyword">function</span>() &#123; x = <span class="number">2</span>; &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">3</span>;</span><br><span class="line">  <span class="title function_">y</span>();</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 3</span></span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// -------------------------------------------------------------</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x, y = <span class="keyword">function</span>() &#123; x = <span class="number">2</span>; &#125;</span>) &#123;</span><br><span class="line">    x = <span class="number">3</span>;</span><br><span class="line">    <span class="title function_">y</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">// 2</span></span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li>rest参数取代arguments参数</li><li>name属性<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">// &quot;f&quot;</span></span><br><span class="line"><span class="comment">// Function构造函数返回的函数实例，name属性的值为anonymous</span></span><br><span class="line"><span class="comment">//bind返回的函数，name属性值会加上bound前缀</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line">foo.<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">// &quot;bound foo&quot;</span></span><br><span class="line">    (<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;).<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">// &quot;bound &quot;</span></span><br></pre></td></tr></table></figure></li><li>箭头函数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// （1）箭头函数没有自己的this对象（详见下文）。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// （2）不可以当作构造函数，也就是说，不可以对箭头函数使用new命令，否则会抛出一个错误。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// （3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</span></span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">init</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,</span><br><span class="line">            <span class="function"><span class="params">event</span> =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">doSomething</span>(event.<span class="property">type</span>), <span class="literal">false</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">doSomething</span>: <span class="keyword">function</span>(<span class="params">type</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Handling &#x27;</span> + type  + <span class="string">&#x27; for &#x27;</span> + <span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不适合的场景</span></span><br><span class="line"><span class="comment">//第一个场合是定义对象的方法，且该方法内部包括this。</span></span><br><span class="line">globalThis.<span class="property">s</span> = <span class="number">21</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">s</span>: <span class="number">42</span>,</span><br><span class="line">    <span class="attr">m</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">s</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">m</span>() <span class="comment">// 21</span></span><br><span class="line"><span class="comment">//2. 第二个场合是需要动态this的时候，也不应使用箭头函数。</span></span><br><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;press&#x27;</span>);</span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h1 id="数组拓展"><a href="#数组拓展" class="headerlink" title="数组拓展"></a>数组拓展</h1><ol><li>…<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//应用场景</span></span><br><span class="line"><span class="comment">//1. 复制数组</span></span><br><span class="line"><span class="comment">//2.  合并数组</span></span><br><span class="line"><span class="comment">//3. 只要是实现了Iterator接口的对象，都可以用扩展运算符转为真正的数组</span></span><br><span class="line"><span class="comment">//4. set和map</span></span><br></pre></td></tr></table></figure></li><li>Array.form<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Array.from()方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</span></span><br><span class="line"><span class="comment">// 只要是实现了Iterator接口的对象，都可以用它</span></span><br><span class="line"><span class="comment">//set 和map</span></span><br></pre></td></tr></table></figure></li><li>Array.of<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Array.of()方法用于将一组值，转换为数组。</span></span><br></pre></td></tr></table></figure></li><li>剩余的方法看我的js基础的链接</li></ol><h1 id="对象的拓展"><a href="#对象的拓展" class="headerlink" title="对象的拓展"></a>对象的拓展</h1><ol><li>属性的简洁表示方法，方法也可以简写</li><li>其余的方法可以自行查看mdn</li></ol><h1 id="运算符的拓展"><a href="#运算符的拓展" class="headerlink" title="运算符的拓展"></a>运算符的拓展</h1><ol><li>新增**指数运算符</li><li>链判断运算符,?.</li><li>Null判断运算符<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为了避免这种情况，ES2020 引入了一个新的 Null 判断运算符??。它的行为类似||，但是只有运算符左侧的值为null或undefined时，才会返回右侧的值。/这个运算符的一个目的，就是跟链判断运算符?.配合使用，为null或undefined的值设置默认值</span></span><br><span class="line"><span class="comment">// 这个运算符的一个目的，就是跟链判断运算符?.配合使用，为null或undefined的值设置默认值。</span></span><br><span class="line"><span class="keyword">const</span> headerText = response.<span class="property">settings</span>.<span class="property">headerText</span> ?? <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> animationDuration = response.<span class="property">settings</span>.<span class="property">animationDuration</span> ?? <span class="number">300</span>;</span><br><span class="line"><span class="keyword">const</span> showSplashScreen = response.<span class="property">settings</span>.<span class="property">showSplashScreen</span> ?? <span class="literal">true</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><blockquote><p>比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是 ES6 引入Symbol的原因。</p></blockquote><p>Symbol可以转化为字符串，布尔，不能转化为数值</p><h1 id="Set和Map数据结构"><a href="#Set和Map数据结构" class="headerlink" title="Set和Map数据结构"></a>Set和Map数据结构</h1><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><blockquote><p>Set函数可以接受一个数组（或者具有 iterable 接口的其他数据结构）作为参数，用来初始化。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>]);</span><br><span class="line">[...set]</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">const</span> items = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]);</span><br><span class="line">items.<span class="property">size</span> <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例三</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>));</span><br><span class="line">set.<span class="property">size</span> <span class="comment">// 56</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类似于</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="variable language_">document</span></span><br><span class="line"> .<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line"> .<span class="title function_">forEach</span>(<span class="function"><span class="params">div</span> =&gt;</span> set.<span class="title function_">add</span>(div));</span><br><span class="line">set.<span class="property">size</span> <span class="comment">// 56</span></span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">set.<span class="title function_">add</span>()</span><br><span class="line">set.<span class="title function_">delete</span>()</span><br><span class="line">set.<span class="title function_">has</span>()</span><br><span class="line">set.<span class="title function_">size</span>()</span><br><span class="line">set.<span class="title function_">clear</span>()</span><br><span class="line">set.<span class="title function_">keys</span>()</span><br><span class="line">set.<span class="title function_">values</span>()</span><br><span class="line">set.<span class="title function_">entries</span>()</span><br><span class="line">set.<span class="title function_">forEach</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="set应用场景"><a href="#set应用场景" class="headerlink" title="set应用场景"></a>set应用场景</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 去重（和...配合使用来进行去重）</span></span><br><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(array)]</span><br><span class="line"><span class="comment">//2. 实现交并差集</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = <span class="keyword">new</span> <span class="title class_">Set</span>([...a, ...b]);</span><br><span class="line"><span class="comment">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersect = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// set &#123;2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// （a 相对于 b 的）差集</span></span><br><span class="line"><span class="keyword">let</span> difference = <span class="keyword">new</span> <span class="title class_">Set</span>([...a].<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> !b.<span class="title function_">has</span>(x)));</span><br><span class="line"><span class="comment">// Set &#123;1&#125;</span></span><br><span class="line"><span class="comment">// 3. 遍历操作中改变原来的set</span></span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>([...set].<span class="title function_">map</span>(<span class="function"><span class="params">val</span> =&gt;</span> val * <span class="number">2</span>));</span><br><span class="line"><span class="comment">// set的值是2, 4, 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">set = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(set, <span class="function"><span class="params">val</span> =&gt;</span> val * <span class="number">2</span>));</span><br><span class="line"><span class="comment">// set的值是2, 4, 6</span></span><br></pre></td></tr></table></figure><h2 id="weakSet"><a href="#weakSet" class="headerlink" title="weakSet"></a>weakSet</h2><blockquote><p>WeakSet 的成员只能是对象和 Symbol 值，而不能是其他类型的值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// WeakSet 中的对象都是弱引用，即垃圾回收机制不考虑 WeakSet 对该对象的引用，也就是说，如果其他对象都不再引用该对象，那么垃圾回收机制会自动回收该对象所占用的内存，不考虑该对象还存在于 WeakSet 之中。</span></span><br><span class="line"><span class="comment">//WeakSet 里面的引用，都不计入垃圾回收机制，所以就不存在这个问题。因此，WeakSet 适合临时存放一组对象，以及存放跟对象绑定的信息。只要这些对象在外部消失，它在 WeakSet 里面的引用就会自动消失。</span></span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><blockquote><p>JavaScript 的对象（Object），本质上是键值对的集合（Hash 结构），但是传统上只能用字符串当作键。这给它的使用带来了很大的限制。为了解决这个问题，ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。如果你需要“键值对”的数据结构，Map 比 Object 更合适。</p></blockquote><h3 id="Map实例的属性和操作方法"><a href="#Map实例的属性和操作方法" class="headerlink" title="Map实例的属性和操作方法"></a>Map实例的属性和操作方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title function_">map</span>()</span><br><span class="line">map.<span class="title function_">size</span>()</span><br><span class="line">map.<span class="title function_">get</span>(key)</span><br><span class="line">map.<span class="title function_">set</span>(key,value)</span><br><span class="line">map.<span class="title function_">delete</span>()</span><br><span class="line">map.<span class="title function_">clear</span>()</span><br><span class="line">map.<span class="title function_">keys</span>()</span><br><span class="line">map.<span class="title function_">values</span>()</span><br><span class="line">map.<span class="title function_">entries</span>()</span><br><span class="line">map.<span class="title function_">forEach</span>()</span><br><span class="line"><span class="comment">//map与其他数据类型互换</span></span><br><span class="line"><span class="comment">//1.转化为数组</span></span><br><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">        .<span class="title function_">set</span>(<span class="literal">true</span>, <span class="number">7</span>)</span><br><span class="line">        .<span class="title function_">set</span>(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">&#x27;abc&#x27;</span>]);</span><br><span class="line">[...myMap]</span><br><span class="line"><span class="comment">// [ [ true, 7 ], [ &#123; foo: 3 &#125;, [ &#x27;abc&#x27; ] ] ]</span></span><br><span class="line"><span class="comment">//2.转化为对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strMapToObj</span>(<span class="params">strMap</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> [k,v] <span class="keyword">of</span> strMap) &#123;</span><br><span class="line">      obj[k] = v;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">        .<span class="title function_">set</span>(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">        .<span class="title function_">set</span>(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">strMapToObj</span>(myMap)</span><br><span class="line"><span class="comment">// &#123; yes: true, no: false &#125;</span></span><br><span class="line"><span class="comment">//3.对象转化为map</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="string">&quot;a&quot;</span>:<span class="number">1</span>, <span class="string">&quot;b&quot;</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(obj));</span><br><span class="line"><span class="comment">//自己实现的</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">objToStrMap</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> strMap = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">      strMap.<span class="title function_">set</span>(k, obj[k]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> strMap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">objToStrMap</span>(&#123;<span class="attr">yes</span>: <span class="literal">true</span>, <span class="attr">no</span>: <span class="literal">false</span>&#125;)</span><br><span class="line"><span class="comment">// Map &#123;&quot;yes&quot; =&gt; true, &quot;no&quot; =&gt; false&#125;</span></span><br><span class="line"><span class="comment">//4.map转化为json</span></span><br><span class="line"><span class="comment">// （1）以字符串为键值对</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">strMapToJson</span>(<span class="params">strMap</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">strMapToObj</span>(strMap));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">&#x27;yes&#x27;</span>, <span class="literal">true</span>).<span class="title function_">set</span>(<span class="string">&#x27;no&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="title function_">strMapToJson</span>(myMap)</span><br><span class="line"><span class="comment">// &#x27;&#123;&quot;yes&quot;:true,&quot;no&quot;:false&#125;&#x27;</span></span><br><span class="line"><span class="comment">//(2)Map 的键名有非字符串，这时可以选择转为数组 JSON。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapToArrayJson</span>(<span class="params">map</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...map]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="literal">true</span>, <span class="number">7</span>).<span class="title function_">set</span>(&#123;<span class="attr">foo</span>: <span class="number">3</span>&#125;, [<span class="string">&#x27;abc&#x27;</span>]);</span><br><span class="line"><span class="title function_">mapToArrayJson</span>(myMap)</span><br><span class="line"><span class="comment">// &#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span></span><br><span class="line"><span class="comment">//5.json转化为map</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jsonToStrMap</span>(<span class="params">jsonStr</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title function_">objToStrMap</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonToStrMap</span>(<span class="string">&#x27;&#123;&quot;yes&quot;: true, &quot;no&quot;: false&#125;&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;&#x27;yes&#x27; =&gt; true, &#x27;no&#x27; =&gt; false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">jsonToMap</span>(<span class="params">jsonStr</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">jsonToMap</span>(<span class="string">&#x27;[[true,7],[&#123;&quot;foo&quot;:3&#125;,[&quot;abc&quot;]]]&#x27;</span>)</span><br><span class="line"><span class="comment">// Map &#123;true =&gt; 7, Object &#123;foo: 3&#125; =&gt; [&#x27;abc&#x27;]&#125;</span></span><br></pre></td></tr></table></figure><h1 id="proxy"><a href="#proxy" class="headerlink" title="proxy"></a>proxy</h1><h1 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h1><blockquote><p>Reflect对象与Proxy对象一样，也是 ES6 为了操作对象而提供的新 API。Reflect对象的设计目的有这样几个。<br><a href="https://es6.ruanyifeng.com/#docs/reflect">Proxy详细讲解</a></p></blockquote><h2 id="设计目的"><a href="#设计目的" class="headerlink" title="设计目的"></a>设计目的</h2><p>（1） 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。</p><p>（2） 修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。</p><p>（3） 让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。</p><p>（4）Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。也就是说，不管Proxy怎么修改默认行为，你总可以在Reflect上获取默认行为。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> loggedObj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span>, target, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, name);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;delete&#x27;</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, name);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">has</span>(<span class="params">target, name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;has&#x27;</span> + name);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">has</span>(target, name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>有了Reflect对象以后，很多操作会更易读。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 老写法</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">apply</span>.<span class="title function_">call</span>(<span class="title class_">Math</span>.<span class="property">floor</span>, <span class="literal">undefined</span>, [<span class="number">1.75</span>]) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>.<span class="property">floor</span>, <span class="literal">undefined</span>, [<span class="number">1.75</span>]) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h2 id="一些静态方法"><a href="#一些静态方法" class="headerlink" title="一些静态方法"></a>一些静态方法</h2><p>get</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果name属性部署了读取函数（getter），则读取函数的this绑定receiver</span></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">   <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">   <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="keyword">get</span> <span class="title function_">baz</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span> + <span class="variable language_">this</span>.<span class="property">bar</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myReceiverObject = &#123;</span><br><span class="line">   <span class="attr">foo</span>: <span class="number">4</span>,</span><br><span class="line">   <span class="attr">bar</span>: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(myObject, <span class="string">&#x27;baz&#x27;</span>, myReceiverObject) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>set</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 如果name属性设置了赋值函数，则赋值函数的this绑定receiver。</span></span><br><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">   <span class="attr">foo</span>: <span class="number">4</span>,</span><br><span class="line">   <span class="keyword">set</span> <span class="title function_">bar</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span> = value;</span><br><span class="line">   &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myReceiverObject = &#123;</span><br><span class="line">   <span class="attr">foo</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(myObject, <span class="string">&#x27;bar&#x27;</span>, <span class="number">1</span>, myReceiverObject);</span><br><span class="line">myObject.<span class="property">foo</span> <span class="comment">// 4</span></span><br><span class="line">myReceiverObject.<span class="property">foo</span> <span class="comment">// 1</span></span><br><span class="line"><span class="comment">//2.注意，如果 Proxy对象和 Reflect对象联合使用，前者拦截赋值操作，后者完成赋值的默认行为，而且传入了receiver，那么Reflect.set会触发Proxy.defineProperty拦截。</span></span><br><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">   <span class="attr">a</span>: <span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">   <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set&#x27;</span>);</span><br><span class="line">      <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">defineProperty</span>(<span class="params">target, key, attribute</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;defineProperty&#x27;</span>);</span><br><span class="line">      <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(target, key, attribute);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(p, handler);</span><br><span class="line">obj.<span class="property">a</span> = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line"><span class="comment">// set</span></span><br><span class="line"><span class="comment">// defineProperty</span></span><br></pre></td></tr></table></figure><p>总结:Reflect的方法和Proxy方法一一对应。</p><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><blockquote><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。<br>Promise的两个特点:</p></blockquote><ul><li>对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li><li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="then"><a href="#then" class="headerlink" title="then"></a>then</h2><p>采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。<br>它的作用是为 Promise 实例添加状态改变时的回调函数。前面说过，then方法的第一个参数是resolved状态的回调函数，第二个参数是rejected状态的回调函数，它们都是可选的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="catch"><a href="#catch" class="headerlink" title="catch"></a>catch</h2><p>如果该对象状态变为resolved，则会调用then()方法指定的回调函数；如果异步操作抛出错误，状态就会变为rejected，就会调用catch()方法指定的回调函数，处理这个错误。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fulfilled:&#x27;</span>, val))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rejected&#x27;</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fulfilled:&#x27;</span>, val))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rejected:&quot;</span>, err));</span><br></pre></td></tr></table></figure><p>一般来说，不要在then()方法里面定义 Reject 状态的回调函数（即then的第二个参数），总是使用catch方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123; <span class="comment">//cb</span></span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// error</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>注意:跟传统的try&#x2F;catch代码块不同的是，如果没有使用catch()方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，即不会有任何反应。不会出现了报错的时候中断后面的程序。<br>这就是说，Promise 内部的错误不会影响到 Promise 外部的代码，通俗的说法就是“Promise 会吃掉错误”。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> someAsyncThing = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面一行会报错，因为x没有声明</span></span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">someAsyncThing</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;everything is great&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) &#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="comment">// Uncaught (in promise) ReferenceError: x is not defined</span></span><br><span class="line"><span class="comment">// 123</span></span><br></pre></td></tr></table></figure><p>一般总是建议，Promise 对象后面要跟catch()方法，这样可以处理 Promise 内部发生的错误。catch()方法返回的还是一个 Promise 对象，因此后面还可以接着调用then()方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> someAsyncThing = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">// 下面一行会报错，因为x没有声明</span></span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">someAsyncThing</span>()</span><br><span class="line">.<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;oh no&#x27;</span>, error);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;carry on&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// oh no [ReferenceError: x is not defined]</span></span><br><span class="line"><span class="comment">// carry on</span></span><br></pre></td></tr></table></figure><h2 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h2><p>finally()方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> P = <span class="variable language_">this</span>.<span class="property">constructor</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">           <span class="function"><span class="params">value</span>  =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value),</span><br><span class="line">           <span class="function"><span class="params">reason</span> =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="keyword">throw</span> reason &#125;)</span><br><span class="line">   );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h2><blockquote><p>Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例,Promise.all()方法的参数可以不是数组，但必须具有 Iterator 接口，且返回的每个成员都是 Promise 实例。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>p的状态由p1、p2、p3决定，分成两种情况。</p><p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p><p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成一个Promise对象的数组</span></span><br><span class="line"><span class="keyword">const</span> promises = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">getJSON</span>(<span class="string">&#x27;/post/&#x27;</span> + id + <span class="string">&quot;.json&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(promises).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">posts</span>) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">reason</span>)&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h2><blockquote><p>Promise.race()方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p></blockquote><p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p><h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled"></a>Promise.allSettled</h2><p>该方法返回的新的 Promise 实例，一旦发生状态变更，状态总是fulfilled，不会变成rejected。状态变成fulfilled后，它的回调函数会接收到一个数组作为参数，该数组的每个成员对应前面数组的每个 Promise 对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> resolved = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line"><span class="keyword">const</span> rejected = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> allSettledPromise = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([resolved, rejected]);</span><br><span class="line"></span><br><span class="line">allSettledPromise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">results</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//    &#123; status: &#x27;fulfilled&#x27;, value: 42 &#125;,</span></span><br><span class="line"><span class="comment">//    &#123; status: &#x27;rejected&#x27;, reason: -1 &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><h2 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any"></a>Promise.any</h2><p>只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态。</p><p>Promise.any()跟Promise.race()方法很像，只有一点不同，就是Promise.any()不会因为某个 Promise 变成rejected状态而结束，必须等到所有参数 Promise 变成rejected状态才会结束。</p><h2 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h2><blockquote><p>有时需要将现有对象转为 Promise 对象，Promise.resolve()方法就起到这个作用</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure><h2 id="Promise-try"><a href="#Promise-try" class="headerlink" title="Promise.try()"></a>Promise.try()</h2><blockquote><p>实际开发中，经常遇到一种情况：不知道或者不想区分，函数f是同步函数还是异步操作，但是想用 Promise 来处理它。因为这样就可以不管f是否包含异步操作，都用then方法指定下一步流程，用catch方法处理f抛出的错误</p></blockquote><p>缺点:如果f是同步函数，那么它会在本轮事件循环的末尾执行。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line"><span class="comment">// next</span></span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决办法:有没有一种方法，让同步函数同步执行，异步函数异步执行，并且让它们具有统一的 API 呢？回答是可以的，并且还有两种写法。第一种写法是用async函数来写。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; <span class="title function_">f</span>())();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (async () =&gt; f())()</span></span><br><span class="line"><span class="comment">// .then(...)</span></span><br><span class="line"><span class="comment">// .catch(...)</span></span><br></pre></td></tr></table></figure><p>最后提出了Promise.try来进行处理:try是处理同步错误的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;now&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">try</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;next&#x27;</span>);</span><br><span class="line"><span class="comment">// now</span></span><br><span class="line"><span class="comment">// next</span></span><br></pre></td></tr></table></figure><p>由于Promise.try为所有操作提供了统一的处理机制，所以如果想用then方法管理流程，最好都用Promise.try包装一下。这样有许多好处，其中一点就是可以更好地管理异常。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUsername</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> database.<span class="property">users</span>.<span class="title function_">get</span>(&#123;<span class="attr">id</span>: userId&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">user</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> user.<span class="property">name</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面代码中，database.users.get()返回一个 Promise 对象，如果抛出异步错误，可以用catch方法捕获，就像下面这样写。</span></span><br><span class="line"><span class="comment">// database.users.get(&#123;id: userId&#125;)</span></span><br><span class="line"><span class="comment">//         .then(...)</span></span><br><span class="line"><span class="comment">//         .catch(...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是database.users.get()可能还会抛出同步错误（比如数据库连接错误，具体要看实现方法），这时你就不得不用try...catch去捕获。</span></span><br><span class="line"><span class="comment">// try &#123;</span></span><br><span class="line"><span class="comment">//    database.users.get(&#123;id: userId&#125;)</span></span><br><span class="line"><span class="comment">//            .then(...)</span></span><br><span class="line"><span class="comment">//            .catch(...)</span></span><br><span class="line"><span class="comment">// &#125; catch (e) &#123;</span></span><br><span class="line"><span class="comment">//    // ...</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//最终写法</span></span><br><span class="line"><span class="comment">// Promise.try(() =&gt; database.users.get(&#123;id: userId&#125;))</span></span><br><span class="line"><span class="comment">//         .then(...)</span></span><br><span class="line"><span class="comment">//         .catch(...)</span></span><br></pre></td></tr></table></figure><h1 id="Generator-了解即可"><a href="#Generator-了解即可" class="headerlink" title="Generator(了解即可)"></a>Generator(了解即可)</h1><blockquote><p>ES6提供的另外一种异步编程解决方案</p></blockquote><p>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。</p><p>Generator特征:</p><ul><li>function关键字与函数名之间有一个星号</li><li>函数体内部使用yield表达式，定义不同的内部状态（yield在英语里的意思就是“产出”）。</li></ul><p>调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象。<br>下一步，必须调用遍历器对象的next方法，使得指针移向下一个状态。也就是说，每次调用next方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个yield表达式（或return语句）为止。<strong>换言之，Generator 函数是分段执行的，yield表达式是暂停执行的标记，而next方法可以恢复执行。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表示方式</span></span><br><span class="line"><span class="comment">// function * foo(x, y) &#123; ··· &#125;</span></span><br><span class="line"><span class="comment">// function *foo(x, y) &#123; ··· &#125;</span></span><br><span class="line"><span class="comment">// function* foo(x, y) &#123; ··· &#125;</span></span><br><span class="line"><span class="comment">// function*foo(x, y) &#123; ··· &#125;</span></span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>yield表达式只能用在 Generator 函数里面，用在其他地方都会报错</li><li>yield表达式如果用在另一个表达式之中，必须放在圆括号里面。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span> + <span class="keyword">yield</span>); <span class="comment">// SyntaxError</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span> + <span class="keyword">yield</span> <span class="number">123</span>); <span class="comment">// SyntaxError</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span> + (<span class="keyword">yield</span>)); <span class="comment">// OK</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span> + (<span class="keyword">yield</span> <span class="number">123</span>)); <span class="comment">// OK</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>yield表达式用作函数参数或放在赋值表达式的右边，可以不加括号。</li></ul><h2 id="与遍历器的关系"><a href="#与遍历器的关系" class="headerlink" title="与遍历器的关系"></a>与遍历器的关系</h2><p>任意一个对象的Symbol.iterator方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。任意一个对象的Symbol.iterator方法，等于该对象的遍历器生成函数，调用该函数会返回该对象的一个遍历器对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myIterable = &#123;&#125;;</span><br><span class="line">myIterable[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">[...myIterable] <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="next"><a href="#next" class="headerlink" title="next"></a>next</h2><p><em>注意</em>:由于next方法的参数表示上一个yield表达式的返回值，所以在第一次使用next方法时，传递参数是无效的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:6, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class="line">a.<span class="title function_">next</span>() <span class="comment">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">foo</span>(<span class="number">5</span>);</span><br><span class="line">b.<span class="title function_">next</span>() <span class="comment">// &#123; value:6, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">12</span>) <span class="comment">// &#123; value:8, done:false &#125;</span></span><br><span class="line">b.<span class="title function_">next</span>(<span class="number">13</span>) <span class="comment">// &#123; value:42, done:true &#125;</span></span><br></pre></td></tr></table></figure><p>如果想要第一次调用next方法时，就能够输入值，可以在 Generator 函数外面再包一层。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">wrapper</span>(<span class="params">generatorFunction</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> generatorObject = <span class="title function_">generatorFunction</span>(...args);</span><br><span class="line">    generatorObject.<span class="title function_">next</span>();</span><br><span class="line">    <span class="keyword">return</span> generatorObject;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> wrapped = <span class="title function_">wrapper</span>(<span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`First input: <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;DONE&#x27;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">wrapped</span>().<span class="title function_">next</span>(<span class="string">&#x27;hello!&#x27;</span>)</span><br><span class="line"><span class="comment">// First input: hello</span></span><br></pre></td></tr></table></figure><h2 id="for-of"><a href="#for-of" class="headerlink" title="for..of"></a>for..of</h2><p>因为这个generator可以自动遍历 Generator 函数运行时生成的Iterator对象，且此时不再需要调用next方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">foo</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure><p>除了for of，还有…,解构赋值都可以获得generators里面的值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* numbers () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br><span class="line">[...<span class="title function_">numbers</span>()] <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.from 方法</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title function_">numbers</span>()) <span class="comment">// [1, 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [x, y] = <span class="title function_">numbers</span>();</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of 循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> <span class="title function_">numbers</span>()) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="Generator-property-throw"><a href="#Generator-property-throw" class="headerlink" title="Generator.property.throw"></a>Generator.property.throw</h2><ol><li>内部错误可以被外部的try..catch捕获</li><li>外部出现的错误,也可以在内部被捕获</li><li>外部抛出的错,不会影响内部的程序</li><li>当内部程序出现了错误,会中断内部程序的进行。</li></ol><h2 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h2><ul><li>返回给定的值，并且终结遍历 Generator 函数。</li><li>如果return()方法调用时，不提供参数，则返回值的value属性为undefined。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>();</span><br><span class="line"></span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.<span class="keyword">return</span>() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure></li><li>如果 Generator 函数内部有try…finally代码块，且正在执行try代码块，那么return()方法会导致立刻进入finally代码块，执行完以后，整个函数才会结束。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* numbers () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">numbers</span>();</span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line">g.<span class="keyword">return</span>(<span class="number">7</span>) <span class="comment">// &#123; value: 4, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#123; value: 5, done: false &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#123; value: 7, done: true &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield*表达式"></a>yield*表达式</h2><blockquote><p>yield*后面的 Generator 函数（没有return语句时），等同于在 Generator 函数内部，部署一个for…of循环。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">concat</span>(<span class="params">iter1, iter2</span>) &#123;</span><br><span class="line">   <span class="keyword">yield</span>* iter1;</span><br><span class="line">   <span class="keyword">yield</span>* iter2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">concat</span>(<span class="params">iter1, iter2</span>) &#123;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter1) &#123;</span><br><span class="line">      <span class="keyword">yield</span> value;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> iter2) &#123;</span><br><span class="line">      <span class="keyword">yield</span> value;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yield命令后面如果不加星号，返回的是整个数组，加了星号就表示返回的是数组的遍历器对象。</p><p>实际上，任何数据结构只要有 Iterator 接口，就可以被yield*遍历。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> read = (<span class="keyword">function</span>* () &#123;</span><br><span class="line">   <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">   <span class="keyword">yield</span>* <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">read.<span class="title function_">next</span>().<span class="property">value</span> <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">read.<span class="title function_">next</span>().<span class="property">value</span> <span class="comment">// &quot;h&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Generator的异步应用"><a href="#Generator的异步应用" class="headerlink" title="Generator的异步应用"></a>Generator的异步应用</h1><h2 id="异步编程解决方案"><a href="#异步编程解决方案" class="headerlink" title="异步编程解决方案"></a>异步编程解决方案</h2><ul><li>回调函数</li><li>事件监听</li><li>发布&#x2F;订阅</li><li>Promise 对象</li><li>Generator</li></ul><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><p>JavaScript 语言对异步编程的实现，就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;/etc/passwd&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>为什么这个第二段的回调函数第一个参数为error:</p><p>原因是执行分成两段，第一段执行完以后，任务所在的上下文环境就已经结束了。在这以后抛出的错误，原来的上下文环境已经无法捕捉，只能当作参数，传入第二段。</p><p>回调函数的缺点:</p><ul><li>因为多个异步操作形成了强耦合，只要有一个操作需要修改，它的上层回调函数和下层回调函数，可能都要跟着修改。这种情况就称为”回调函数地狱”（callback hell）。</li></ul><h3 id="Promise-1"><a href="#Promise-1" class="headerlink" title="Promise"></a>Promise</h3><blockquote><p>为了解决回调地狱，Promise 的写法只是回调函数的改进，使用then方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。</p></blockquote><p>问题:<br>Promise 的最大问题是代码冗余，原来的任务被 Promise 包装了一下，不管什么操作，一眼看去都是一堆then，原来的语义变得很不清楚。</p><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><p>协程有点像函数，又有点像线程。它的运行流程大致如下。</p><p>第一步，协程A开始执行。<br>第二步，协程A执行到一半，进入暂停，执行权转移到协程B。<br>第三步，（一段时间后）协程B交还执行权。<br>第四步，协程A恢复执行。</p><h4 id="异步函数的封装"><a href="#异步函数的封装" class="headerlink" title="异步函数的封装"></a>异步函数的封装</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fetch = <span class="built_in">require</span>(<span class="string">&#x27;node-fetch&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">&#x27;https://api.github.com/users/github&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">bio</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>();</span><br><span class="line"><span class="keyword">var</span> result = g.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line">result.<span class="property">value</span>.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> data.<span class="title function_">json</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">  g.<span class="title function_">next</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="async"><a href="#async" class="headerlink" title="async"></a>async</h1><blockquote><p>Generator 函数的语法糖。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readFile = <span class="keyword">function</span> (<span class="params">fileName</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(fileName, <span class="keyword">function</span>(<span class="params">error, data</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) <span class="keyword">return</span> <span class="title function_">reject</span>(error);</span><br><span class="line">      <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">yield</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> asyncReadFile = <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> f1 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/fstab&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> f2 = <span class="keyword">await</span> <span class="title function_">readFile</span>(<span class="string">&#x27;/etc/shells&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="title function_">toString</span>());</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="async-和-await特点"><a href="#async-和-await特点" class="headerlink" title="async 和 await特点"></a>async 和 await特点</h2><p>（1）内置执行器。</p><p>Generator 函数的执行必须靠执行器，所以才有了co模块，而async函数自带执行器。也就是说，async函数的执行，与普通函数一模一样，只要一行。</p><p>asyncReadFile();<br>上面的代码调用了asyncReadFile函数，然后它就会自动执行，输出最后结果。这完全不像 Generator 函数，需要调用next方法，或者用co模块，才能真正执行，得到最后结果。</p><p>（2）更好的语义。</p><p>async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果。</p><p>（3）更广的适用性。</p><p>co模块约定，yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。</p><p>（4）返回值是 Promise。</p><p>async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator 对象方便多了。你可以用then方法指定下一步的操作。</p><p>进一步说，async函数完全可以看作多个异步操作，包装成的一个 Promise 对象，而await命令就是内部then命令的语法糖。</p><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><blockquote><p>相当于Promise 的then</p></blockquote><p><em>注意</em>:<br>另一种情况是，await命令后面是一个thenable对象（即定义了then方法的对象），那么await会将其等同于 Promise 对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sleep</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">timeout</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">timeout</span> = timeout;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">then</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">      <span class="built_in">setTimeout</span>(</span><br><span class="line">              <span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>() - startTime),</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">timeout</span></span><br><span class="line">      );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> sleepTime = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Sleep</span>(<span class="number">1000</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(sleepTime);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sleep</span>(<span class="params">interval</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, interval);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">one2FiveInAsync</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">sleep</span>(<span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">one2FiveInAsync</span>();</span><br></pre></td></tr></table></figure><p>有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。这时可以将第一个await放在try…catch结构里面，这样不管这个异步操作是否成功，第二个await都会执行。</p><ol><li>try-catch<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure></li><li>在await后面加一个catch<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(v))</span><br><span class="line"><span class="comment">// 出错了</span></span><br><span class="line"><span class="comment">// hello world</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><ol><li>await命令后面的Promise对象，运行结果可能是rejected，所以最好把await命令放在try…catch代码块中。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">somethingThatReturnsAPromise</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">somethingThatReturnsAPromise</span>()</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">耗时的写法</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">await</span> <span class="title function_">getFoo</span>();</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">await</span> <span class="title function_">getBar</span>();</span><br></pre></td></tr></table></figure>同时触发的写法<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="keyword">let</span> [foo, bar] = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="title function_">getFoo</span>(), <span class="title function_">getBar</span>()]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="keyword">let</span> fooPromise = <span class="title function_">getFoo</span>();</span><br><span class="line"><span class="keyword">let</span> barPromise = <span class="title function_">getBar</span>();</span><br><span class="line"><span class="keyword">let</span> foo = <span class="keyword">await</span> fooPromise;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="keyword">await</span> barPromise;</span><br></pre></td></tr></table></figure></li><li>await只能在async里面使用<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dbFuc</span>(<span class="params">db</span>) &#123; <span class="comment">//这里不需要 async</span></span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可能得到错误结果</span></span><br><span class="line">  docs.<span class="title function_">forEach</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">doc</span>) &#123;</span><br><span class="line">    <span class="keyword">await</span> db.<span class="title function_">post</span>(doc);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样也会报错，因为db为并发进行，而不是继发进行，解决方法改为for循环</span></span><br></pre></td></tr></table></figure>如果想让他们并发进行<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">dbFuc</span>(<span class="params">db</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class="line">  <span class="keyword">let</span> promises = docs.<span class="title function_">map</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> db.<span class="title function_">post</span>(doc));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> results = <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promises);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用下面的写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">dbFuc</span>(<span class="params">db</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> docs = [&#123;&#125;, &#123;&#125;, &#123;&#125;];</span><br><span class="line">  <span class="keyword">let</span> promises = docs.<span class="title function_">map</span>(<span class="function">(<span class="params">doc</span>) =&gt;</span> db.<span class="title function_">post</span>(doc));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> results = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> promise <span class="keyword">of</span> promises) &#123;</span><br><span class="line">    results.<span class="title function_">push</span>(<span class="keyword">await</span> promise);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(results);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>async 函数可以保留运行堆栈。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">b</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> <span class="title function_">c</span>());</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>上面代码中，函数a内部运行了一个异步任务b()。当b()运行的时候，函数a()不会中断，而是继续执行。等到b()运行结束，可能a()早就运行结束了，b()所在的上下文环境已经消失了。如果b()或c()报错，错误堆栈将不包括a()。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">a</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">await</span> <span class="title function_">b</span>();</span><br><span class="line">  <span class="title function_">c</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>上面代码中，b()运行的时候，a()是暂停执行，上下文环境都保存着。一旦b()或c()报错，错误堆栈将包括a()。</li></ol><h2 id="async的实现原理"><a href="#async的实现原理" class="headerlink" title="async的实现原理"></a>async的实现原理</h2><h2 id="顶层await"><a href="#顶层await" class="headerlink" title="顶层await"></a>顶层await</h2><blockquote><p>它的主要目的是使用await解决模块异步加载的问题。</p></blockquote><p>我们使用一个工具的话，如果这个工具里面含有异步的任务，当使用这个工具的时候里面的任务没有执行完成那么就返回的是一个undefined为了避免这种情况，可以使用顶层await。它保证只有异步操作完成，模块才会输出值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// awaiting.js</span></span><br><span class="line"><span class="keyword">const</span> dynamic = <span class="keyword">import</span>(someMission);</span><br><span class="line"><span class="keyword">const</span> data = <span class="title function_">fetch</span>(url);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> output = <span class="title function_">someProcess</span>((<span class="keyword">await</span> dynamic).<span class="property">default</span>, <span class="keyword">await</span> data);</span><br></pre></td></tr></table></figure><p>上面代码中，两个异步操作在输出的时候，都加上了await命令。只有等到异步操作完成，这个模块才会输出值。</p><p>没有async和await时，会让工具来返回一个Promise对象，在使用这个工具的时候判断这个结果是否已经异步加载完成。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// awaiting.js</span></span><br><span class="line"><span class="keyword">let</span> output;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dynamic = <span class="keyword">await</span> <span class="keyword">import</span>(someMission);</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(url);</span><br><span class="line">  output = <span class="title function_">someProcess</span>(dynamic.<span class="property">default</span>, data);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">export</span> &#123; output &#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// usage.js</span></span><br><span class="line"><span class="keyword">import</span> promise, &#123; output &#125; <span class="keyword">from</span> <span class="string">&quot;./awaiting.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outputPlusValue</span>(<span class="params">value</span>) &#123; <span class="keyword">return</span> output + value &#125;</span><br><span class="line"></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">outputPlusValue</span>(<span class="number">100</span>));</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">outputPlusValue</span>(<span class="number">100</span>)), <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>有了顶层await的时候</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// usage.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; output &#125; <span class="keyword">from</span> <span class="string">&quot;./awaiting.js&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">outputPlusValue</span>(<span class="params">value</span>) &#123; <span class="keyword">return</span> output + value &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">outputPlusValue</span>(<span class="number">100</span>));</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">outputPlusValue</span>(<span class="number">100</span>)), <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><h2 id="类的基本概念"><a href="#类的基本概念" class="headerlink" title="类的基本概念"></a>类的基本概念</h2><blockquote><p>ES6之前构造对象的传统方法是通过构造函数.ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。 ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。(这个很重要)</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Point</span> <span class="comment">// &quot;function&quot;</span></span><br><span class="line"><span class="title class_">Point</span> === <span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>构造函数的prototype属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的prototype属性上面。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">toValue</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在类的实例上面调用方法，其实就是调用原型上的方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"></span><br><span class="line">b.<span class="property">constructor</span> === B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Object.assign()可以向类里面添加多种方法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">  <span class="title function_">toValue</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意</strong>:类里面自定义的方法都是不可枚举的。</p><h2 id="类的实例"><a href="#类的实例" class="headerlink" title="类的实例"></a>类的实例</h2><p>类的属性和方法，除非显式定义在其本身（即定义在this对象上），否则都是定义在原型上（即定义在class上）(<em>类的实例共享一个原型对象</em>)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">lass <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">x</span> + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">y</span> + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">point.<span class="title function_">toString</span>() <span class="comment">// (2, 3)</span></span><br><span class="line"></span><br><span class="line">point.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;x&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">point.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;y&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">point.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>) <span class="comment">// false</span></span><br><span class="line">point.<span class="property">__proto__</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.<span class="property">__proto__</span> === p2.<span class="property">__proto__</span></span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>因为p1和p2的原型对象都是Point相等,所以__proto__也相等,可以通过实例的__proto__属性为“类”添加方法。</p><blockquote><p>注意:<strong>proto</strong> 并不是语言本身的特性，这是各大厂商具体实现时添加的私有属性，虽然目前很多现代浏览器的 JS 引擎中都提供了这个私有属性，但依旧不建议在生产中使用该属性，避免对环境产生依赖。生产环境中，我们可以使用 Object.getPrototypeOf() 方法来获取实例对象的原型，然后再来为原型添加方法&#x2F;属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">p1.<span class="property">__proto__</span>.<span class="property">printName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="string">&#x27;Oops&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">printName</span>() <span class="comment">// &quot;Oops&quot;</span></span><br><span class="line">p2.<span class="title function_">printName</span>() <span class="comment">// &quot;Oops&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">4</span>,<span class="number">2</span>);</span><br><span class="line">p3.<span class="title function_">printName</span>() <span class="comment">// &quot;Oops&quot;</span></span><br><span class="line"><span class="comment">//使用实例的__proto__属性改写原型，必须相当谨慎，不推荐使用，因为这会改变“类”的原始定义，影响到所有实例。</span></span><br></pre></td></tr></table></figure><h3 id="实例属性的新写法"><a href="#实例属性的新写法" class="headerlink" title="实例属性的新写法"></a>实例属性的新写法</h3><p>在类的顶部添加属性,相当于给实例添加了属性,不会涉及到原型。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IncreasingCounter</span> &#123;</span><br><span class="line">  _count = <span class="number">0</span>;<span class="comment">//实例自身的属性</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Getting the current value!&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_count</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_count</span>++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取值函数（getter）和存值函数（setter）"><a href="#取值函数（getter）和存值函数（setter）" class="headerlink" title="取值函数（getter）和存值函数（setter）"></a>取值函数（getter）和存值函数（setter）</h2><p>和ES5一样,并且存值函数和取值函数是设置在属性的 Descriptor 对象上的。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">prop</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">prop</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter: &#x27;</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"></span><br><span class="line">inst.<span class="property">prop</span> = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// setter: 123</span></span><br><span class="line"></span><br><span class="line">inst.<span class="property">prop</span></span><br><span class="line"><span class="comment">// &#x27;getter&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="属性表达式"><a href="#属性表达式" class="headerlink" title="属性表达式"></a>属性表达式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> methodName = <span class="string">&#x27;getArea&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">length</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [methodName]() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="class表达式"><a href="#class表达式" class="headerlink" title="class表达式"></a>class表达式</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyClass</span> = <span class="keyword">class</span> <span class="title class_">Me</span> &#123;</span><br><span class="line">  <span class="title function_">getClassName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Me</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;<span class="comment">//Me是类的名字，在类的内部可以使用，外部的话使用MyClass</span></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">inst.<span class="title function_">getClassName</span>() <span class="comment">// Me</span></span><br><span class="line"><span class="title class_">Me</span>.<span class="property">name</span> <span class="comment">// ReferenceError: Me is not defined</span></span><br></pre></td></tr></table></figure><p>也可以写成这样(立即执行类)</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="keyword">class</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">// &quot;张三&quot;</span></span><br></pre></td></tr></table></figure><h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><blockquote><p>类就是实例对象的原型,所有在类中定义的方法,实例都会继承,有的并不想让实例继承,可以在类的方法前面加static,这样只能直接通过类来调用，这就称为“静态方法”。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">classMethod</span>() <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">foo.<span class="title function_">classMethod</span>()</span><br><span class="line"><span class="comment">// TypeError: foo.classMethod is not a function</span></span><br></pre></td></tr></table></figure><p>注意点:</p><ol><li>父类的静态方法，可以被子类继承。</li><li>静态方法也是可以从super对象上调用的。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">classMethod</span>() + <span class="string">&#x27;, too&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bar</span>.<span class="title function_">classMethod</span>() <span class="comment">// &quot;hello, too&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><blockquote><p>静态属性指的是 Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 老写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">prop</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//新写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> myStaticProp = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">MyClass</span>.<span class="property">myStaticProp</span>); <span class="comment">// 42</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="私有方法和私有属性"><a href="#私有方法和私有属性" class="headerlink" title="私有方法和私有属性"></a>私有方法和私有属性</h2><p>ES2022正式为class添加了私有属性，方法是在属性名之前使用#表示。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IncreasingCounter</span> &#123;</span><br><span class="line">  #count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Getting the current value!&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#count;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#count++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>私有属性也可以设置 getter 和 setter 方法。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  #xValue = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#x);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get #<span class="title function_">x</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">this</span>.#xValue; &#125;</span><br><span class="line">  set #<span class="title function_">x</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#xValue = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从外部获取私有属性</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  #privateValue = <span class="number">42</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getPrivateValue</span>(<span class="params">foo</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> foo.#privateValue;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">getPrivateValue</span>(<span class="keyword">new</span> <span class="title class_">Foo</span>()); <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><h2 id="in"><a href="#in" class="headerlink" title="in"></a>in</h2><p>直接访问某个类不存在的私有属性会报错，但是访问不存在的公开属性不会报错。这个特性可以用来判断，某个对象是否为类的实例。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  #brand;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">isC</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (#brand <span class="keyword">in</span> obj) &#123;</span><br><span class="line">      <span class="comment">// 私有属性 #brand 存在</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 私有属性 #foo 不存在</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点:</p><ol><li>in只能用在类的内部。</li><li>判断所针对的私有属性，一定要先声明，否则会报错。</li><li>in运算符对于Object.create()、Object.setPrototypeOf形成的继承，是无效的，因为这种继承不会传递私有属性。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  #foo = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">test</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(#foo <span class="keyword">in</span> obj);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(a);</span><br><span class="line">A.<span class="title function_">test</span>(o1) <span class="comment">// false</span></span><br><span class="line">A.<span class="title function_">test</span>(o1.<span class="property">__proto__</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o2 = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(o2, a);</span><br><span class="line">A.<span class="title function_">test</span>(o2) <span class="comment">// false</span></span><br><span class="line">A.<span class="title function_">test</span>(o2.<span class="property">__proto__</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="静态块"><a href="#静态块" class="headerlink" title="静态块"></a>静态块</h2><p>静态属性的一个问题是，如果它有初始化逻辑，这个逻辑要么写在类的外部，要么写在constructor()方法里面。现在可以在静态块里面进行定义了。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> x = ...;</span><br><span class="line">  <span class="keyword">static</span> y;</span><br><span class="line">  <span class="keyword">static</span> z;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> obj = <span class="title function_">doSomethingWith</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> = obj.<span class="property">y</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">z</span> = obj.<span class="property">z</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">y</span> = ...;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">z</span> = ...;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了静态属性的初始化，静态块还有一个作用，就是将私有属性与类的外部代码分享。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getX;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  #x = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    getX = <span class="function"><span class="params">obj</span> =&gt;</span> obj.#x;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getX</span>(<span class="keyword">new</span> <span class="title function_">C</span>())); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>#x是类的私有属性，如果类外部的getX()方法希望获取这个属性，以前是要写在类的constructor()方法里面，这样的话，每次新建实例都会定义一次getX()方法。现在可以写在静态块里面，这样的话，只在类生成时定义一次。</p><h2 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">  <span class="title function_">printName</span>(<span class="params">name = <span class="string">&#x27;there&#x27;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">print</span>(<span class="string">`Hello <span class="subst">$&#123;name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">print</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(text);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> logger = <span class="keyword">new</span> <span class="title class_">Logger</span>();</span><br><span class="line"><span class="keyword">const</span> &#123; printName &#125; = logger;</span><br><span class="line"><span class="title function_">printName</span>(); <span class="comment">// TypeError: Cannot read property &#x27;print&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>单独使用printName而没有使用Logger.printName，this指向会发生改变，在严格模式下this为undefined</p><p>解决办法</p><ol><li>在构造函数里面进行提前绑定<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Logger</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">printName</span> = <span class="variable language_">this</span>.<span class="property">printName</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用箭头函数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">getThis</span> = <span class="function">() =&gt;</span> <span class="variable language_">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myObj = <span class="keyword">new</span> <span class="title class_">Obj</span>();</span><br><span class="line">myObj.<span class="title function_">getThis</span>() === myObj <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Class继承"><a href="#Class继承" class="headerlink" title="Class继承"></a>Class继承</h1>]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> JS </category>
          
          <category> ES6 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS基础</title>
      <link href="/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JavaScript%E5%9F%BA%E7%A1%80/JS%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/JS/JavaScript%E5%9F%BA%E7%A1%80/JS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="let、const和var的区别"><a href="#let、const和var的区别" class="headerlink" title="let、const和var的区别"></a>let、const和var的区别</h1><p>let和var本质上都是为了声明变量的，但是var声明变量的时候会出现变量提升，而let声明变量的时候不会出现变量提升。const就是声明常量的。</p><p>const声明的为常量，所以这个值是不能改变了，js引用类型分为值引用和地址引用，对于值引用，const声明的变量，值不能改变，但是地址引用，const声明的变量，地址不能改变，但是值可以</p><h1 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h1><p>7种基本类型：null，undefined，boolean，number，string，symbol，bigint</p><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><blockquote><p>返回一个值的数据类型:number、undefined、boolean、string、symbol、object、function</p></blockquote><p><strong>注意</strong>:undefined 和没有用 var 声明的变量，用<code>typeof返回的是undefined</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x</span><br><span class="line"><span class="keyword">typeof</span> x</span><br><span class="line"><span class="comment">// &quot;undefined&quot;</span></span><br></pre></td></tr></table></figure><p>其余的返回object</p><p> <strong>注意</strong>:<br> null的返回值是object，这是由于历史原因造成的，1995年JavaScript语言的第一版，所有值都设计成32位，其中最低的3位用来表述数据类型，object对应的值是000。当时，只设计了五种数据类型（对象、整数、浮点数、字符串和布尔值），完全没考虑null，只把它当作object的一种特殊值，32位全部为0。这是typeof null返回object的根本原因。 为了兼容以前的代码，后来就没法修改了。这并不是说null就属于对象，本质上null是一个类似于undefined的特殊值。</p><h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p><strong>NaN的特殊</strong>:</p><p><strong>1.NaN 的typeof 的类型是 number;</strong></p><p><strong>2.NaN 转成数字类型是 NaN ;</strong></p><p>3.NaN 转成布尔类型是 false;</p><p>4.NaN 转成字符串是 NaN ;</p><p><strong>5.NaN &#x3D;&#x3D; NaN &#x3D;&gt;false ;</strong></p><p>6.NaN &#x3D;&#x3D;&#x3D;NaN &#x3D;&gt;false;</p><p>7.0&#x2F;0 &#x3D; NaN</p><p>8.任何数+NAN&#x3D;NAN</p><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p><strong>undefined特殊</strong>:</p><p><strong>1.undefined 的typeof 的类型是 undefiend;</strong></p><p><strong>2.undefined 转成数字类型为 NaN;</strong></p><p>3.undefined 转为布尔类型是 false;</p><p>4.undefined 转为字符串类型是 undefined ;</p><p><strong>5.null &#x3D;&#x3D; undefined &#x3D;&gt; true;</strong></p><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p><strong>null的特殊之处</strong>:</p><p><strong>1.null 的typeof 的类型是 object;</strong></p><p><strong>2.null 转成数字类型为 0;</strong></p><p>3.null 转为布尔类型是 false;</p><p>4.null 转为字符串类型是 null ;</p><p>5.null 和 任何非 null 都不相等;(但和undefined相等)</p><p><strong>6.null &#x3D;&#x3D; undefined &#x3D;&gt;true;</strong></p><h2 id="symbol"><a href="#symbol" class="headerlink" title="symbol"></a>symbol</h2><blockquote><p>是ES6新增的，用来创建私有变量的，避免冲突的。</p></blockquote><h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h1><p>字符实体:<code>&amp;nbsp;</code>、<code>&amp;lt;</code>、<code>&amp;gt;</code>、<code>&amp;quot；</code>、<code>&amp;copy;</code>、<code>&amp;reg;</code></p><p>常用的转义符:<code>\b</code>:退格、<code>\f</code>:走纸换页、<code>\n</code>、<code>\r</code>、<code>\t</code></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h2><p>+-*&#x2F;</p><p>两个数组相加，则会触发类型转换: 将值转换为原始值，转换为数字，转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>] + [<span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment">// [1, 2].toString() -&gt; &#x27;1,2&#x27;</span></span><br><span class="line"><span class="comment">// [2, 1].toString() -&gt; &#x27;2,1&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;1,2&#x27; + &#x27;2,1&#x27; = &#x27;1,22,1&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="和-的区别"><a href="#和-的区别" class="headerlink" title="&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;的区别"></a>&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;的区别</h2><p>&#x3D;&#x3D;运算符<br>如果比较的俩个数据的类型不同,他们都要想办法转成数字;</p><p>如果一边是对象,一边是基本类型:</p><ol><li>首先调用这个对象的valueOf(),看这个方法的返回值是否是基本类型</li></ol><p>如果是基本类型,则用这个返回值和另一边相比;</p><ol start="2"><li>如果返回的不是基本类型,调用toString(),使用这个方法的返回字符串和另一边比较</li></ol><p>字符串 : 字符串里有数字的转换为数字;只要有一个非数字,就是NaN;</p><p><strong>对象与对象</strong>比较,****不管是&#x3D;&#x3D;还是&#x3D;&#x3D;&#x3D;,**比较的是俩个对象的地址值是否相等,</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">如:<span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// alert(a==b) =&gt;false;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="params">undefined</span>=&gt;</span>转成数字=&gt;<span class="title class_">NaN</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// null=&gt; 转成数字 =&gt; 0;</span></span><br></pre></td></tr></table></figure><p><strong>特殊</strong>:</p><ol><li><p>null虽然转成数字是0,但他和其他的任何非 null 都不相等</p></li><li><p>NaN !&#x3D;NaN ;</p></li><li><p>null和undefined是相等的;</p></li></ol><p>&#x3D;&#x3D;&#x3D;运算符:</p><ol><li><p>先看类型,如果类型不同,直接false。</p></li><li><p>如果类型相同,再比较内容;</p></li></ol><h2 id="一些其他的不会的点-拓展"><a href="#一些其他的不会的点-拓展" class="headerlink" title="一些其他的不会的点(拓展)"></a>一些其他的不会的点(拓展)</h2><h3 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf()"></a>valueOf()</h3><p>JavaScript 调用 valueOf 方法来将对象转换成基本类型值。你很少需要自己调用 valueOf 方法；当遇到需要基本类型值的对象时，JavaScript 会自动的调用该方法。</p><p>强制数字类型转换和强制基本类型转换优先会调用该方法，而强制字符串转换会优先调用 toString()，并且 toString() 很可能返回字符串值（甚至对于 Object.prototype.toString() 基本实现也是如此），因此在这种情况下不会调用 valueOf()。</p><p>从 Object.prototype 继承的所有对象（即，除了null 原型对象之外的所有对象）都继承了 toString() 方法。Object.prototype.valueOf() 的基本实现被有意设计为无用的：返回一个对象；<strong>其返回值将永远不会被任何基本类型转换算法使用。许多内置对象重写此方法以返回适当的基本类型值</strong> 。<strong>创建自定义对象时，可以重写 valueOf() 来调用自定义方法，以便将自定义对象转换为基本类型值</strong>。通常，valueOf() 用于返回对对象具有意义的值——与 toString() 不同，它不需要字符串。或者，你可以添加一个 @@toPrimitive 方法，该方法允许对转换过程进行更多控制，并且对于任何类型的转换，始终优先于 valueOf 或 toString。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写valueOf</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span> &#123;</span><br><span class="line">  #value;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#value = value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.#value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> box = <span class="keyword">new</span> <span class="title class_">Box</span>(<span class="number">123</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box + <span class="number">456</span>); <span class="comment">// 579</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(box == <span class="number">123</span>); <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>自己编写一个类对象，来进行对里面的方法来进行重写。</p><h1 id="数组的常用方法"><a href="#数组的常用方法" class="headerlink" title="数组的常用方法"></a>数组的常用方法</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">不会的看这里，数组最全面的</a></p><p><code>entries</code></p><p><code>Array.prototype.fill()</code></p><p><code>Array.from()</code></p><p><code>Array.prototype.reduce()</code></p><p><code>Array.prototype.sort()</code></p><h1 id="对象常见的方法"><a href="#对象常见的方法" class="headerlink" title="对象常见的方法"></a>对象常见的方法</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">里面的对象的方法比较全</a></p><p><code>Object.assign()</code>相当于…</p><p><code>Object.create()</code>使用它来实现类继承</p><p><code>Object.defineProperty()</code></p><p><code>Object.entries()</code></p><p><code>Object.groupBy()</code>:还在实验中</p><p><code>Object.hasOwn()</code>如果指定的对象自身有指定的属性，则静态方法 Object.hasOwn() 返回 true。如果属性是继承的或者不存在，该方法返回 false。</p><p><code>Object.is()</code></p><p><code>Object.keys()</code></p><p><code>Object.values()</code></p><h1 id="函数基础"><a href="#函数基础" class="headerlink" title="函数基础"></a>函数基础</h1><h1 id="正则运算"><a href="#正则运算" class="headerlink" title="正则运算"></a>正则运算</h1><h2 id="正则作用"><a href="#正则作用" class="headerlink" title="正则作用"></a>正则作用</h2><p>作用:<br>提高用户体验<br>减轻服务器的压力</p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><h2 id="mouseover和mouseenter的区别"><a href="#mouseover和mouseenter的区别" class="headerlink" title="mouseover和mouseenter的区别"></a>mouseover和mouseenter的区别</h2><p>这两者都是移入的时候触发，但是 onmouseover 会触发多次，而 onmouseenter 只在进去的时候才触发。</p><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>localStorage和sessionStorage</p><h2 id="location"><a href="#location" class="headerlink" title="location"></a>location</h2>]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> JS </category>
          
          <category> JavaScript基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据双向绑定</title>
      <link href="/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/Vue/Vue%E6%BA%90%E7%A0%81/%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B(%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A)/"/>
      <url>/2023/01/26/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0/Vue/Vue%E6%BA%90%E7%A0%81/%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B(%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A)/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>Vue最大的特点之一就是数据驱动视图,数据就是状态,视图就是我们的页面,当数据发生了变化(即状态发生了改变),其中的页面也会动态的发生改变。</p><h2 id="什么是变化侦测"><a href="#什么是变化侦测" class="headerlink" title="什么是变化侦测"></a>什么是变化侦测</h2><p>Vue是怎样知道状态发生了改变，所以需要实现Vue追踪状态的变化。<br>在React是通过对比虚拟DOM来实现变化侦测。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之，就是要知道数据什么时候发生变化,捕捉数据变化很重要。</p><h1 id="Vue3实现双向绑定"><a href="#Vue3实现双向绑定" class="headerlink" title="Vue3实现双向绑定"></a>Vue3实现双向绑定</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><blockquote><p>Vue3实现双向绑定是通过Proxy来实现。</p></blockquote><h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><h4 id="Proxy基础"><a href="#Proxy基础" class="headerlink" title="Proxy基础"></a>Proxy基础</h4><p>什么是Proxy?</p><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy更多内容</a></p><p>然后Vue3通过Proxy的handler.get()和handler.set()来实现数据的双向绑定。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// handler.get()方法</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, property, receiver</span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// target:为目标对象</span></span><br><span class="line">    <span class="comment">//property:为被捕获对象的属性名</span></span><br><span class="line">    <span class="comment">//receiver:为Proxy或者继承Proxy的对象</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// handler.set()方法</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, property, value, receiver</span>) &#123;&#125;,</span><br><span class="line">    <span class="comment">// target:为目标对象</span></span><br><span class="line">    <span class="comment">//property:为被捕获对象的属性名</span></span><br><span class="line">    <span class="comment">//value:为设置的值</span></span><br><span class="line">    <span class="comment">//receiver:为Proxy或者继承Proxy的对象</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>example:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  创建响应式数据</span></span><br><span class="line"><span class="comment">  @param [object]:普通对象</span></span><br><span class="line"><span class="comment">  @return [proxy]:代理对象</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">//先判断传入的是否为对象</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>&amp;&amp;obj!==<span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="comment">//先判断是否为对象</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_">isObject</span>(obj)) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj,&#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params">target, p, receiver</span>) &#123;</span><br><span class="line">        <span class="comment">//获取</span></span><br><span class="line">        <span class="keyword">return</span> target[p]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">target, p, newValue, receiver</span>) &#123;</span><br><span class="line">        <span class="comment">//进行重新设置</span></span><br><span class="line">        target[p] = newValue</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> state = &#123;<span class="attr">name</span>:<span class="string">&#x27;73483&#x27;</span>&#125;</span><br><span class="line">  <span class="keyword">const</span> p = <span class="title function_">reactive</span>(state)</span><br><span class="line">  p.<span class="property">name</span> = <span class="string">&#x27;woshishei&#x27;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>)</span><br></pre></td></tr></table></figure><h4 id="为什么要用Proxy进行重构"><a href="#为什么要用Proxy进行重构" class="headerlink" title="为什么要用Proxy进行重构"></a>为什么要用Proxy进行重构</h4><p>以前vue2使用的Object.defineProperty()来实现数据的双向绑定，但是Object.defineProperty()有缺陷，比如无法监听数组的变化，无法监听对象</p><blockquote><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象</p></blockquote><p>出现的问题就是当新增一个对象的属性的时候，Object.defineProperty()无法监听到。</p><p>然后我们回到 defineProperty 本身，是对对象上的属性做操作，而非对象本身</p><p>一句话来说就是，在 Observer data 时，新增属性并不存在，自然就不会有 getter, setter，也就解释了为什么新增视图不更新，解决有很多种，Vue 提供的全局$set 本质也是给新增的属性手动 observer</p><p>总结来说:vue2之前的方法无法监听对象的新增属性。</p><p>总结:</p><ol><li><p>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化</p></li><li><p>Proxy 能观察的类型比 defineProperty 更丰富</p></li><li><p>Proxy 不兼容IE，也没有 polyfill, defineProperty 能支持到IE9</p></li><li><p>Object.definedProperty 是劫持对象的属性，新增元素需要再次 definedProperty。而 Proxy 劫持的是整个对象，不需要做特殊处理</p></li><li><p>使用 defineProperty 时，我们修改原来的 obj 对象就可以触发拦截，而使用 proxy，就必须修改代理对象，即 Proxy 的实例才可以触发拦截<br><a href="https://es6.ruanyifeng.com/#docs/proxy">讲proxy的博客</a></p></li></ol><h1 id="响应式系统"><a href="#响应式系统" class="headerlink" title="响应式系统"></a>响应式系统</h1>]]></content>
      
      
      <categories>
          
          <category> 前端面试个人学习 </category>
          
          <category> Vue源码 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
